const axios = require('axios');
const WhatsAppAIAtacado = require('./whatsapp_ai_atacado');

class WhatsAppBotDivisao {
    constructor() {
        this.comprovantesMemorizados = {};
        this.processandoDivisoes = new Set();
        
        // Inicializar IA usando vari√°vel de ambiente (mesma do servidor)
        const openaiApiKey = process.env.OPENAI_API_KEY;
        if (openaiApiKey) {
            this.ia = new WhatsAppAIAtacado(openaiApiKey);
            console.log('üß† IA integrada ao bot de divis√£o usando .env!');
        } else {
            this.ia = null;
            console.log('‚ö†Ô∏è IA n√£o dispon√≠vel - OPENAI_API_KEY n√£o encontrada no .env');
        }
        
        // URLs dos Google Apps Scripts existentes
        this.SCRIPTS_CONFIG = {
            PEDIDOS: 'https://script.google.com/macros/s/AKfycbzdvM-IrH4a6gS53WZ0J-AGXY0duHfgv15DyxdqUm1BLEm3Z15T67qgstu6yPTedgOSCA/exec',
            PAGAMENTOS: 'https://script.google.com/macros/s/AKfycbzzifHGu1JXc2etzG3vqK5Jd3ihtULKezUTQQIDJNsr6tXx3CmVmKkOlsld0x1Feo0H/exec'
        };
        
        // Configura√ß√£o dos grupos (mesma estrutura do sistema atual)
        this.CONFIGURACAO_GRUPOS = {
            '120363419652375064@g.us': {
                nome: 'Net Fornecedor V',
                precos: {
                    10240: 125,    // 10GB = 125MT
                    20480: 250,    // 20GB = 250MT
                    30720: 375,    // 30GB = 375MT
                    40960: 500,    // 40GB = 500MT
                    51200: 625,    // 50GB = 625MT
                    61440: 750,    // 60GB = 750MT
                    71680: 875,    // 70GB = 875MT
                    81920: 1000,   // 80GB = 1000MT
                    92160: 1125,   // 90GB = 1125MT
                    102400: 1250   // 100GB = 1250MT
                },
                // N√öMEROS DE PAGAMENTO DO GRUPO (NUNCA devem receber megas)
                numerosPagamento: [
                    '870059057',   // N√∫mero eMola do grupo
                    '840326152',   // N√∫mero M-Pesa do VASCO (sem prefixo)
                    '258840326152', // Vers√£o completa com prefixo
                    '877777777'    // Adicionar outros n√∫meros de pagamento do grupo aqui
                ]
            }
            // Adicionar outros grupos conforme necess√°rio
        };
        
        // Limpar comprovativos antigos a cada 10 minutos
        setInterval(() => {
            this.limparComprovantesAntigos();
        }, 10 * 60 * 1000);
        
        console.log('üîÑ Bot de Divis√£o inicializado - M√∫ltiplos n√∫meros autom√°tico!');
    }
    
    // === FUN√á√ÉO PRINCIPAL - PROCESSAR MENSAGEM ===
    async processarMensagem(message, remetente, grupoId) {
        try {
            let mensagem = message.body ? message.body.trim() : '';
            
            // S√≥ processa grupos configurados
            if (!this.CONFIGURACAO_GRUPOS[grupoId]) {
                return null;
            }
            
            console.log(`\nüîç DIVIS√ÉO: Analisando mensagem de ${remetente}`);
            
            // VERIFICAR SE TEM IMAGEM COM COMPROVATIVO
            if (message.hasMedia && (message.type === 'image' || message.type === 'document')) {
                console.log(`üì∑ DIVIS√ÉO: Mensagem cont√©m m√≠dia do tipo: ${message.type}`);
                try {
                    const resultadoImagem = await this.extrairTextoDeImagem(message, grupoId);
                    
                    // Se a IA j√° processou tudo completamente, retornar resultado direto
                    if (resultadoImagem && resultadoImagem.processadoCompleto) {
                        console.log('üéØ DIVIS√ÉO: IA processou imagem + n√∫mero completamente!');
                        return resultadoImagem.resultado;
                    }
                    
                    // Se extraiu texto do comprovativo, continuar processamento normal
                    if (resultadoImagem && typeof resultadoImagem === 'string') {
                        console.log(`üìÑ DIVIS√ÉO: Texto extra√≠do da imagem: "${resultadoImagem.substring(0, 100)}..."`);
                        mensagem = resultadoImagem + ' ' + mensagem; // Combinar texto da imagem com texto da mensagem
                    } else {
                        // Se tem imagem mas n√£o conseguiu extrair texto, orientar o usu√°rio
                        console.log('üí° DIVIS√ÉO: Imagem detectada mas texto n√£o extra√≠do');
                        return {
                            resposta: `üì∑ *COMPROVATIVO EM IMAGEM DETECTADO*\n\nüß† Tentei processar com IA avan√ßada mas n√£o consegui extrair os dados.\n\nüí° *Para melhor resultado:*\n‚Ä¢ Tire uma foto mais clara e focada\n‚Ä¢ Certifique-se que TODO o comprovativo est√° vis√≠vel\n‚Ä¢ Ou copie e cole o texto do comprovativo\n\nüîç Exemplo: Confirmado ABC123 - Transferiste 250MT`
                        };
                    }
                } catch (error) {
                    console.error('‚ùå DIVIS√ÉO: Erro ao extrair texto da imagem:', error);
                }
            }
            
            // 1. DETECTAR SE √â COMPROVATIVO SEM N√öMEROS DE DESTINO
            const comprovativo = this.extrairComprovativo(mensagem);
            if (comprovativo && !this.temNumerosDestino(mensagem, grupoId)) {
                console.log(`üí∞ DIVIS√ÉO: Comprovativo memorizado: ${comprovativo.referencia} - ${comprovativo.valor}MT para remetente: ${remetente}`);
                
                // Normalizar remetente para armazenamento consistente
                const remetenteNormalizado = this.normalizarRemetente(remetente);
                console.log(`üîÑ DIVIS√ÉO: Remetente normalizado: ${remetenteNormalizado}`);
                
                this.comprovantesMemorizados[remetenteNormalizado] = {
                    ...comprovativo,
                    timestamp: Date.now(),
                    grupoId: grupoId,
                    remetenteOriginal: remetente
                };
                return null; // N√£o responde ainda
            }
            
            // 2. DETECTAR M√öLTIPLOS N√öMEROS (para verificar se precisa processar)
            const numerosDetectados = this.extrairMultiplosNumeros(mensagem, grupoId);
            
            // 3. VERIFICAR SE √â APENAS 1 N√öMERO - N√ÉO PROCESSAR DIVIS√ÉO
            if (numerosDetectados && numerosDetectados.length === 1) {
                console.log(`üë§ DIVIS√ÉO: Apenas 1 n√∫mero detectado (${numerosDetectados[0]}) - deixando para o sistema normal`);
                return null; // Deixar o sistema normal processar
            }
            
            // 4. PRIORIDADE: COMPROVATIVO + M√öLTIPLOS N√öMEROS NA MESMA MENSAGEM
            if (comprovativo && numerosDetectados && numerosDetectados.length > 1) {
                console.log(`üéØ DIVIS√ÉO: Comprovativo + m√∫ltiplos n√∫meros na mesma mensagem!`);
                console.log(`üì± DIVIS√ÉO: ${numerosDetectados.length} n√∫meros detectados: ${numerosDetectados.join(', ')}`);
                return await this.processarDivisao(comprovativo, numerosDetectados, grupoId, message);
            }
            
            // 5. CASO ALTERNATIVO: APENAS M√öLTIPLOS N√öMEROS (buscar comprovativo memorizado)
            if (numerosDetectados && numerosDetectados.length > 1 && !comprovativo) {
                console.log(`üì± DIVIS√ÉO: ${numerosDetectados.length} n√∫meros detectados sem comprovativo na mensagem`);
                
                // Procurar comprovativo memorizado usando normaliza√ß√£o
                const remetenteNormalizado = this.normalizarRemetente(remetente);
                let comprovantivoAssociado = this.comprovantesMemorizados[remetenteNormalizado];
                
                // Se n√£o tem memorizado, buscar no hist√≥rico (√∫ltimos 30 min)
                if (!comprovantivoAssociado) {
                    comprovantivoAssociado = await this.buscarComprovanteRecenteHist(remetente);
                }
                
                if (comprovantivoAssociado) {
                    console.log(`‚úÖ DIVIS√ÉO: Comprovativo memorizado encontrado para divis√£o!`);
                    return await this.processarDivisao(comprovantivoAssociado, numerosDetectados, grupoId, message);
                } else {
                    console.log(`‚ùå DIVIS√ÉO: Nenhum comprovativo encontrado para ${remetente}`);
                    return {
                        resposta: `üì± *${numerosDetectados.length} n√∫meros detectados*\n\n‚ùå N√£o encontrei seu comprovativo nos √∫ltimos 30 minutos.\n\nüîç Envie primeiro o comprovativo de pagamento.`
                    };
                }
            }
            
            return null; // N√£o √© caso para divis√£o
            
        } catch (error) {
            console.error('‚ùå DIVIS√ÉO: Erro ao processar mensagem:', error);
            return {
                resposta: '‚ùå Erro interno no sistema de divis√£o. Tente novamente.'
            };
        }
    }
    
    // === EXTRAIR COMPROVATIVO ===
    extrairComprovativo(mensagem) {
        const mensagemLimpa = mensagem.trim();
        console.log(`üîç DIVIS√ÉO: Verificando comprovativo em: "${mensagemLimpa.substring(0, 50)}..."`);
        
        const temConfirmado = /^confirmado/i.test(mensagemLimpa);
        const temID = /^id\s/i.test(mensagemLimpa);
        const temEmola = /e-?mola|emola/i.test(mensagemLimpa);
        const temTransferencia = /transferencia\s+realizada/i.test(mensagemLimpa);
        const temRecibo = /recibo\s+de\s+transferencia/i.test(mensagemLimpa);
        
        console.log(`üîç DIVIS√ÉO: temConfirmado: ${temConfirmado}, temID: ${temID}, temEmola: ${temEmola}, temTransferencia: ${temTransferencia}, temRecibo: ${temRecibo}`);
        
        if (!temConfirmado && !temID && !temEmola && !temTransferencia && !temRecibo) {
            console.log(`‚ùå DIVIS√ÉO: N√£o √© comprovativo reconhecido`);
            return null;
        }
        
        // Patterns para extrair refer√™ncia e valor (M-Pesa e eMola)
        const patternsRef = [
            // M-Pesa
            /Confirmado\s+([A-Z0-9]+)/i,
            // eMola - Padr√µes com pontos (incluindo ponto final)
            /ID da transacao\s+([A-Z0-9]+\.[A-Z0-9]+\.[A-Z0-9]+)\.?\s/i,
            /ID da transacao\s*:?\s*([A-Z0-9]+\.[A-Z0-9]+\.[A-Z0-9]+)\.?/i,
            /ID da transacao\s*:?\s*([A-Z0-9]+\.[A-Z0-9]+)\.?/i,
            /ID da transacao\s*:?\s*([A-Z0-9]+)\.?/i,
            /Referencia\s*:?\s*([A-Z0-9]+\.[A-Z0-9]+\.[A-Z0-9]+)\.?/i,
            /Referencia\s*:?\s*([A-Z0-9]+)\.?/i,
            /Codigo\s*:?\s*([A-Z0-9]+\.[A-Z0-9]+\.[A-Z0-9]+)\.?/i,
            /Codigo\s*:?\s*([A-Z0-9]+)\.?/i,
            /ID\s*:?\s*([A-Z0-9]+\.[A-Z0-9]+\.[A-Z0-9]+)\.?/i,
            /Numero da transacao\s*:?\s*([A-Z0-9]+\.[A-Z0-9]+\.[A-Z0-9]+)\.?/i
        ];
        
        const patternsValor = [
            // M-Pesa
            /Transferiste\s+(\d+(?:[.,]\d+)?)MT/i,
            // eMola
            /Valor\s*:?\s*(\d+(?:[.,]\d+)?)MT/i,
            /Montante\s*:?\s*(\d+(?:[.,]\d+)?)MT/i,
            /Total\s*:?\s*(\d+(?:[.,]\d+)?)MT/i,
            // Gen√©rico
            /(\d+(?:[.,]\d+)?)\s*MT/i
        ];
        
        let referencia = null;
        let valor = null;
        
        // Extrair refer√™ncia
        for (const pattern of patternsRef) {
            const match = mensagem.match(pattern);
            if (match) {
                referencia = match[1];
                break;
            }
        }
        
        // Extrair valor
        for (const pattern of patternsValor) {
            const match = mensagem.match(pattern);
            if (match) {
                valor = parseFloat(match[1].replace(',', '.'));
                // Se for n√∫mero inteiro, remover decimais
                if (valor % 1 === 0) valor = parseInt(valor);
                break;
            }
        }
        
        console.log(`üîç DIVIS√ÉO: Refer√™ncia extra√≠da: "${referencia}", Valor: ${valor}`);
        
        if (referencia && valor) {
            console.log(`‚úÖ DIVIS√ÉO: Comprovativo extra√≠do com sucesso!`);
            return { referencia, valor };
        }
        
        console.log(`‚ùå DIVIS√ÉO: Falha na extra√ß√£o - Refer√™ncia: ${referencia}, Valor: ${valor}`);
        return null;
    }
    
    // === VERIFICAR SE TEM N√öMEROS ===
    temNumeros(mensagem) {
        const regex = /(?:\+258\s*)?8[0-9]{8}/g;
        const matches = mensagem.match(regex);
        return matches && matches.length > 0;
    }

    // === VERIFICAR SE TEM N√öMEROS DE DESTINO (IGNORA PAGAMENTO) ===
    temNumerosDestino(mensagem, grupoId = null) {
        const regex = /(?:\+258\s*)?8[0-9]{8}/g;
        const matches = mensagem.match(regex) || [];
        
        if (matches.length === 0) return false;
        
        // Usar mesma filtragem que extrairMultiplosNumeros
        const numerosLimpos = matches.map(num => this.limparNumero(num))
                                    .filter(num => num && /^8[0-9]{8}$/.test(num));
        
        const numerosUnicos = [...new Set(numerosLimpos)];
        const numerosFiltrados = this.filtrarNumerosComprovante(numerosUnicos, mensagem, grupoId);
        
        return numerosFiltrados.length > 0;
    }
    
    // === EXTRAIR M√öLTIPLOS N√öMEROS ===
    extrairMultiplosNumeros(mensagem, grupoId = null) {
        // REGEX MELHORADA: Capturar n√∫meros com ou sem prefixo 258
        const regex = /(?:\+?258\s*)?8[0-9]{8}/g;
        const matches = mensagem.match(regex) || [];
        
        if (matches.length === 0) return null;
        
        // Limpar e filtrar n√∫meros v√°lidos
        const numerosLimpos = matches.map(num => this.limparNumero(num))
                                    .filter(num => num && /^8[0-9]{8}$/.test(num));
        
        // Remover duplicatas
        const numerosUnicos = [...new Set(numerosLimpos)];
        
        // === FILTRAR N√öMEROS QUE EST√ÉO NO MEIO DE OUTROS N√öMEROS ===
        const numerosFiltradosPorContexto = numerosUnicos.filter(numero => {
            // Encontrar TODAS as ocorr√™ncias deste n√∫mero na mensagem
            let posicao = 0;
            while ((posicao = mensagem.indexOf(numero, posicao)) !== -1) {
                // Verificar caractere antes e depois desta ocorr√™ncia
                const charAntes = mensagem[posicao - 1];
                const charDepois = mensagem[posicao + numero.length];
                
                // Se h√° d√≠gitos antes ou depois, √© parte de um n√∫mero maior
                const isPartOfLargerNumber = /\d/.test(charAntes) || /\d/.test(charDepois);
                
                if (isPartOfLargerNumber) {
                    console.log(`üö´ DIVIS√ÉO: ${numero} REJEITADO (parte de n√∫mero maior)`);
                    return false; // Rejeitar se qualquer ocorr√™ncia estiver no meio
                }
                
                posicao++; // Continuar buscando outras ocorr√™ncias
            }
            
            return true; // Aceitar se todas as ocorr√™ncias s√£o n√∫meros independentes
        });
        
        // === FILTRAR N√öMEROS QUE N√ÉO S√ÉO PARA DIVIS√ÉO ===
        const numerosFiltrados = this.filtrarNumerosComprovante(numerosFiltradosPorContexto, mensagem, grupoId);
        
        return numerosFiltrados.length > 0 ? numerosFiltrados : null;
    }
    
    // === FILTRAR N√öMEROS DE COMPROVANTE ===
    filtrarNumerosComprovante(numeros, mensagem, grupoId = null) {
        return numeros.filter(numero => {
            console.log(`üîç DIVIS√ÉO: Analisando ${numero}...`);
            
            // 1. VERIFICAR SE √â N√öMERO DE PAGAMENTO DO GRUPO
            if (grupoId && this.CONFIGURACAO_GRUPOS[grupoId] && this.CONFIGURACAO_GRUPOS[grupoId].numerosPagamento) {
                const numerosPagamento = this.CONFIGURACAO_GRUPOS[grupoId].numerosPagamento;
                if (numerosPagamento.includes(numero)) {
                    console.log(`üö´ DIVIS√ÉO: ${numero} REJEITADO (√© n√∫mero de pagamento do grupo)`);
                    return false;
                }
            }
            
            // 2. VERIFICAR POSI√á√ÉO NA MENSAGEM
            const posicaoNumero = mensagem.indexOf(numero);
            const comprimentoMensagem = mensagem.length;
            const percentualPosicao = (posicaoNumero / comprimentoMensagem) * 100;
            
            console.log(`üîç DIVIS√ÉO: ${numero} - posi√ß√£o ${percentualPosicao.toFixed(1)}% da mensagem`);
            
            // Se o n√∫mero est√° no in√≠cio da mensagem (<30%), √© provavelmente n√∫mero de pagamento
            if (percentualPosicao < 30) {
                console.log(`üö´ DIVIS√ÉO: ${numero} REJEITADO (est√° no in√≠cio da mensagem - poss√≠vel n√∫mero de pagamento)`);
                return false;
            }
            
            // Se o n√∫mero est√° no final da mensagem (>70%), √© provavelmente para divis√£o
            if (percentualPosicao > 70) {
                console.log(`‚úÖ DIVIS√ÉO: ${numero} ACEITO (est√° no final da mensagem)`);
                return true;
            }
            
            // 3. VERIFICAR CONTEXTOS ESPEC√çFICOS DE PAGAMENTO
            // PADR√ïES PARA DETECTAR N√öMEROS DE PAGAMENTO EM CONFIRMA√á√ïES M-PESA/EMOLA
            const contextosPagamentoEspecificos = [
                // eMola - padr√µes gerais
                new RegExp(`para\\s+conta\\s+${numero}`, 'i'),                    // "para conta 870059057"
                new RegExp(`conta\\s+${numero}`, 'i'),                            // "conta 870059057"
                new RegExp(`para\\s+${numero}\\s*,\\s*nome`, 'i'),               // "para 870059057, nome:"
                new RegExp(`${numero}\\s*,\\s*nome:`, 'i'),                      // "870059057, nome: vasco"
                
                // M-Pesa - padr√µes espec√≠ficos (COM e SEM prefixo 258)
                new RegExp(`Transferiste.*para\\s+${numero}\\s*-`, 'i'),         // "Transferiste ... para 840326152 - VASCO"
                new RegExp(`Transferiste.*para\\s+258${numero}\\s*-`, 'i'),       // "Transferiste ... para 258840326152 - VASCO"
                new RegExp(`para\\s+${numero}\\s*-\\s*[A-Z]`, 'i'),              // "para 840326152 - VASCO"
                new RegExp(`para\\s+258${numero}\\s*-`, 'i'),                    // "para 258840326152 - VASCO"
                new RegExp(`MT.*para\\s+${numero}`, 'i'),                        // "125.00MT ... para 840326152"
                new RegExp(`MT.*para\\s+258${numero}`, 'i'),                     // "125.00MT ... para 258840326152"
                new RegExp(`taxa.*para\\s+${numero}`, 'i'),                      // "taxa foi ... para 840326152"
                new RegExp(`taxa.*para\\s+258${numero}`, 'i'),                   // "taxa foi ... para 258840326152"
                new RegExp(`${numero}\\s*-\\s*[A-Z]{2,}`, 'i'),                  // "840326152 - VASCO"
                new RegExp(`258${numero}\\s*-\\s*[A-Z]{2,}`, 'i'),               // "258840326152 - VASCO"
                
                // NOVOS: Padr√µes mais espec√≠ficos para capturar destinat√°rios
                new RegExp(`e\\s+a\\s+taxa\\s+foi\\s+de.*para\\s+${numero}`, 'i'),      // "e a taxa foi de 0.00MT para 840326152"
                new RegExp(`e\\s+a\\s+taxa\\s+foi\\s+de.*para\\s+258${numero}`, 'i'),   // "e a taxa foi de 0.00MT para 258840326152"
                new RegExp(`taxa\\s+foi\\s+de.*para\\s+${numero}`, 'i'),               // "taxa foi de 0.00MT para 840326152"
                new RegExp(`taxa\\s+foi\\s+de.*para\\s+258${numero}`, 'i')             // "taxa foi de 0.00MT para 258840326152"
            ];
            
            // Se o n√∫mero aparece em contexto ESPEC√çFICO de pagamento, n√£o √© para divis√£o
            for (const padrao of contextosPagamentoEspecificos) {
                if (padrao.test(mensagem)) {
                    console.log(`üö´ DIVIS√ÉO: ${numero} REJEITADO (contexto espec√≠fico de pagamento)`);
                    return false;
                }
            }
            
            console.log(`‚úÖ DIVIS√ÉO: ${numero} ACEITO (n√£o est√° em contexto de pagamento)`);
            return true; // N√∫mero v√°lido para divis√£o
        });
    }
    
    // === LIMPAR N√öMERO ===
    limparNumero(numero) {
        if (!numero || typeof numero !== 'string') return numero;
        
        let numeroLimpo = numero
            .replace(/[\u200E\u200F\u202A-\u202E\u2066-\u2069]/g, '') // Caracteres invis√≠veis
            .replace(/^\+?258\s*/, '') // Remove +258 ou 258
            .replace(/\s+/g, '') // Remove espa√ßos
            .trim();
        
        // Se ap√≥s limpar sobrou um n√∫mero que come√ßa com 8 e tem 9 d√≠gitos, retornar apenas os √∫ltimos 9
        if (/^8[0-9]{8,}$/.test(numeroLimpo) && numeroLimpo.length > 9) {
            numeroLimpo = numeroLimpo.slice(-9); // Pegar os √∫ltimos 9 d√≠gitos
        }
        
        return numeroLimpo;
    }
    
    // === NORMALIZAR REMETENTE PARA ARMAZENAMENTO CONSISTENTE ===
    normalizarRemetente(remetente) {
        // Extrair apenas os d√≠gitos e pegar os √∫ltimos 9 (n√∫mero de telefone)
        const numerosApenas = remetente.replace(/\D/g, '');
        if (numerosApenas.length >= 9) {
            return numerosApenas.slice(-9); // Retorna apenas os √∫ltimos 9 d√≠gitos
        }
        return remetente; // Se n√£o conseguir normalizar, retorna original
    }

    // === BUSCAR COMPROVATIVO NO HIST√ìRICO (SIMULADO) ===
    async buscarComprovanteRecenteHist(remetente) {
        console.log(`üîç DIVIS√ÉO: Buscando comprovativo para remetente: ${remetente}`);
        console.log(`üìã DIVIS√ÉO: Comprovativos memorizados:`, Object.keys(this.comprovantesMemorizados));
        
        // Normalizar o remetente atual para busca
        const remetenteNormalizado = this.normalizarRemetente(remetente);
        console.log(`üîÑ DIVIS√ÉO: Remetente normalizado para busca: ${remetenteNormalizado}`);
        
        // Buscar usando a chave normalizada
        const comprovativo = this.comprovantesMemorizados[remetenteNormalizado];
        
        // Verificar se ainda est√° dentro do prazo (30 min)
        if (comprovativo && (Date.now() - comprovativo.timestamp) <= 1800000) {
            console.log(`‚úÖ DIVIS√ÉO: Comprovativo encontrado dentro do prazo!`);
            console.log(`   Ref: ${comprovativo.referencia}, Valor: ${comprovativo.valor}MT`);
            return comprovativo;
        } else if (comprovativo) {
            const minutosExpiracao = (Date.now() - comprovativo.timestamp) / 60000;
            console.log(`‚ùå DIVIS√ÉO: Comprovativo encontrado mas expirado (${minutosExpiracao.toFixed(1)} min)`);
        } else {
            console.log(`‚ùå DIVIS√ÉO: Nenhum comprovativo encontrado para este remetente`);
        }
        
        return null;
    }
    
    // === EXTRAIR ESPECIFICA√á√ïES DO CLIENTE ===
    extrairEspecificacoes(mensagem, numeros) {
        console.log(`üîç DIVIS√ÉO: Extraindo especifica√ß√µes da mensagem`);
        
        const especificacoes = {};
        const linhas = mensagem.split('\n').map(linha => linha.trim()).filter(linha => linha.length > 0);
        
        console.log(`   üìÑ Processando ${linhas.length} linhas da mensagem`);
        
        // Processar linha por linha para encontrar padr√µes
        for (let i = 0; i < linhas.length; i++) {
            const linha = linhas[i];
            console.log(`   üîç Linha ${i + 1}: "${linha}"`);
            
            // Padr√£o 1: GB e n√∫mero na mesma linha (ex: "10gb 852118624")
            const sameLinha = linha.match(/(\d+)\s*gb\s+(\d{9})/i);
            if (sameLinha) {
                const gb = parseInt(sameLinha[1]);
                const numero = sameLinha[2];
                
                if (numeros.includes(numero) && !especificacoes[numero]) {
                    especificacoes[numero] = gb * 1024;
                    console.log(`   ‚úÖ Padr√£o mesma linha: ${numero} ‚Üí ${gb}GB`);
                }
                continue; // Pular para pr√≥xima linha
            }
            
            // Padr√£o 2: Linha s√≥ com GB (ex: "10gb")
            const somenteGb = linha.match(/^(\d+)\s*gb\s*$/i);
            if (somenteGb) {
                const gb = parseInt(somenteGb[1]);
                console.log(`   üîç GB detectado: ${gb}GB - procurando pr√≥ximo n√∫mero`);
                
                // Procurar o PR√ìXIMO n√∫mero que ainda n√£o tem especifica√ß√£o
                for (let j = i + 1; j < linhas.length; j++) {
                    const linhaSeguinte = linhas[j];
                    const numeroMatch = linhaSeguinte.match(/^(\d{9})$/);
                    
                    if (numeroMatch) {
                        const numero = numeroMatch[1];
                        if (numeros.includes(numero) && !especificacoes[numero]) {
                            especificacoes[numero] = gb * 1024;
                            console.log(`   ‚úÖ Padr√£o separado: ${numero} ‚Üí ${gb}GB`);
                            break; // Parar na primeira correspond√™ncia
                        }
                    }
                }
                continue; // Pular para pr√≥xima linha
            }
        }
        
        console.log(`   üìä Especifica√ß√µes finais extra√≠das:`);
        Object.entries(especificacoes).forEach(([numero, megas]) => {
            console.log(`      ‚Ä¢ ${numero}: ${megas/1024}GB`);
        });
        
        return especificacoes;
    }

    // === PROCESSAR DIVIS√ÉO ===
    async processarDivisao(comprovativo, numeros, grupoId, message) {
        const chaveProcessamento = `${comprovativo.referencia}_${numeros.join('_')}`;
        
        // Evitar processamento duplicado
        if (this.processandoDivisoes.has(chaveProcessamento)) {
            return { resposta: '‚è≥ Divis√£o j√° em processamento...' };
        }
        
        this.processandoDivisoes.add(chaveProcessamento);
        
        try {
            console.log(`üîÑ DIVIS√ÉO: Iniciando processamento de ${comprovativo.referencia}`);
            
            // 1. CONFIRMAR PAGAMENTO EXISTE (com retry para sincroniza√ß√£o)
            console.log(`üîç DIVIS√ÉO: Verificando pagamento (pode precisar aguardar sincroniza√ß√£o)...`);
            let pagamentoExiste = await this.buscarPagamentoNaPlanilha(
                comprovativo.referencia, 
                comprovativo.valor
            );
            
            // Se n√£o encontrou, tentar mais 2 vezes com delay (sincroniza√ß√£o Google Sheets)
            if (!pagamentoExiste) {
                console.log(`‚è≥ DIVIS√ÉO: Primeira tentativa falhou, aguardando sincroniza√ß√£o...`);
                await new Promise(resolve => setTimeout(resolve, 3000)); // 3 segundos
                pagamentoExiste = await this.buscarPagamentoNaPlanilha(
                    comprovativo.referencia, 
                    comprovativo.valor
                );
                
                if (!pagamentoExiste) {
                    console.log(`‚è≥ DIVIS√ÉO: Segunda tentativa falhou, √∫ltima tentativa...`);
                    await new Promise(resolve => setTimeout(resolve, 5000)); // +5 segundos
                    pagamentoExiste = await this.buscarPagamentoNaPlanilha(
                        comprovativo.referencia, 
                        comprovativo.valor
                    );
                }
            }
            
            if (!pagamentoExiste) {
                console.log(`‚ùå DIVIS√ÉO: Pagamento n√£o encontrado ap√≥s 3 tentativas`);
                return {
                    resposta: `‚è≥ *PAGAMENTO N√ÉO ENCONTRADO*\n\nüí∞ Refer√™ncia: ${comprovativo.referencia}\nüí≥ Valor: ${comprovativo.valor}MT\n\nüîç Aguarde alguns minutos e tente novamente.\n(O sistema pode estar sincronizando com o banco)`
                };
            }
            
            console.log(`‚úÖ DIVIS√ÉO: Pagamento confirmado!`);
            
            // 2. EXTRAIR ESPECIFICA√á√ïES DO CLIENTE
            const especificacoes = this.extrairEspecificacoes(message.body || '', numeros);
            
            // 3. CALCULAR DIVIS√ÉO (usar especifica√ß√µes se dispon√≠veis)
            let divisao = null;
            
            if (Object.keys(especificacoes).length > 0) {
                divisao = this.calcularDivisaoComEspecificacoes(comprovativo.valor, numeros, grupoId, especificacoes);
            } else {
                // Tentar divis√£o autom√°tica com retry
                console.log(`üîÑ DIVIS√ÉO: Tentando c√°lculo autom√°tico...`);
                divisao = this.calcularDivisaoPorPrioridade(comprovativo.valor, numeros, grupoId);
                
                // Se falhou, tentar diferentes estrat√©gias
                if (!divisao || divisao.length === 0) {
                    console.log(`‚ö†Ô∏è DIVIS√ÉO: Primeira tentativa falhou, tentando estrat√©gias alternativas...`);
                    
                    // ESTRAT√âGIA 2: Tentar redistribuir se poss√≠vel
                    divisao = await this.tentarEstrategiaAlternativa(comprovativo.valor, numeros, grupoId);
                }
            }
            
            // Se ainda n√£o conseguiu calcular, retornar erro detalhado
            if (!divisao || divisao.length === 0) {
                console.error(`‚ùå DIVIS√ÉO: FALHA COMPLETA no c√°lculo`);
                
                // Obter pre√ßos dispon√≠veis para mostrar na mensagem
                const configGrupo = this.CONFIGURACAO_GRUPOS[grupoId];
                const precosDisponiveis = Object.entries(configGrupo.precos || {})
                    .map(([megas, preco]) => `${Math.floor(megas/1024)}GB = ${preco}MT`)
                    .join('\n‚Ä¢ ');
                
                return {
                    resposta: `‚ùå *ERRO NO C√ÅLCULO DE DIVIS√ÉO*\n\n` +
                             `üí∞ **Valor:** ${comprovativo.valor}MT\n` +
                             `üì± **N√∫meros:** ${numeros.length}\n\n` +
                             `üö´ **Problema:** Este valor n√£o pode ser dividido automaticamente entre ${numeros.length} n√∫meros.\n\n` +
                             `üìã **Pre√ßos dispon√≠veis:**\n‚Ä¢ ${precosDisponiveis}\n\n` +
                             `üí° **Sugest√µes:**\n` +
                             `‚Ä¢ Use um valor que seja soma exata dos pre√ßos dispon√≠veis\n` +
                             `‚Ä¢ Especifique manualmente os tamanhos (ex: "10gb 840123456")\n` +
                             `‚Ä¢ Divida em menos n√∫meros\n\n` +
                             `üîÑ **N√£o foram enviados dados** - sistema protegido contra erros.`
                };
            }
            
            // 3. GERAR NOVAS REFER√äNCIAS
            const novasReferencias = [];
            for (let i = 0; i < divisao.length; i++) {
                novasReferencias.push(comprovativo.referencia + String(i + 1).padStart(3, '0'));
            }
            
            // 4. ENVIAR MENSAGEM INFORMATIVA
            const temEspecificacoes = Object.keys(especificacoes).length > 0;
            
            let mensagemResposta = `üîÑ *M√öLTIPLOS N√öMEROS DETECTADOS!*\n\n`;
            mensagemResposta += `üí∞ **${comprovativo.referencia}** - ${comprovativo.valor}MT\n`;
            mensagemResposta += `üì± **${numeros.length} n√∫meros** ser√£o processados\n\n`;
            
            if (temEspecificacoes) {
                mensagemResposta += `üéØ **Divis√£o conforme especificado:**\n`;
            } else {
                mensagemResposta += `‚ö° **Divis√£o autom√°tica:**\n`;
            }
            
            divisao.forEach((item, i) => {
                mensagemResposta += `   ‚Ä¢ ${item.numero}: ${item.megasTexto} (${item.valorMT}MT)\n`;
            });
            
            mensagemResposta += `\n‚è≥ *Criando pedidos separados...*`;
            
            // Enviar mensagem
            await message.reply(mensagemResposta);
            
            // 5. CRIAR REGISTROS DIVIDIDOS
            let sucessos = 0;
            for (let i = 0; i < divisao.length; i++) {
                const { numero, megas, valorMT } = divisao[i];
                const novaRef = novasReferencias[i];
                
                try {
                    // PEDIDO na planilha de pedidos
                    await this.enviarParaPlanilhaPedidos(novaRef, megas, numero, grupoId);
                    
                    // PAGAMENTO na planilha de pagamentos  
                    await this.enviarParaPlanilhaPagamentos(novaRef, valorMT, numero, grupoId);
                    
                    sucessos++;
                    console.log(`‚úÖ DIVIS√ÉO: ${novaRef} criado com sucesso`);
                    
                } catch (error) {
                    console.error(`‚ùå DIVIS√ÉO: Erro ao criar ${novaRef}:`, error);
                }
            }
            
            // 6. LIMPAR DADOS E RESPONDER
            const remetenteLimpeza = this.normalizarRemetente(message.author || message.from);
            delete this.comprovantesMemorizados[remetenteLimpeza];
            
            const mensagemFinal = `‚úÖ *DIVIS√ÉO CONCLU√çDA!*\n\n` +
                `üéØ **${sucessos}/${divisao.length} pedidos criados**\n` +
                `üìä Refer√™ncias: ${novasReferencias.join(', ')}\n\n` +
                `‚è≥ *O sistema principal processar√° as transfer√™ncias em instantes...*`;
            
            // Aguardar um pouco antes da mensagem final
            setTimeout(async () => {
                try {
                    await message.reply(mensagemFinal);
                } catch (error) {
                    console.error('‚ùå Erro ao enviar mensagem final:', error);
                }
            }, 2000);
            
            return { processado: true, sucessos, total: divisao.length };
            
        } catch (error) {
            console.error('‚ùå DIVIS√ÉO: Erro no processamento:', error);
            return {
                resposta: `‚ùå *ERRO NO PROCESSAMENTO*\n\n${error.message}`
            };
        } finally {
            this.processandoDivisoes.delete(chaveProcessamento);
        }
    }
    
    // === BUSCAR PAGAMENTO NA PLANILHA ===
    async buscarPagamentoNaPlanilha(referencia, valorEsperado) {
        try {
            console.log(`üîç DIVIS√ÉO: Buscando pagamento ${referencia} - ${valorEsperado}MT`);
            console.log(`üîç DIVIS√ÉO: Tipo do valor: ${typeof valorEsperado}`);
            console.log(`üîç DIVIS√ÉO: Valor original: "${valorEsperado}"`);
            
            // Converter valor para n√∫mero para garantir consist√™ncia
            const valorNumerico = parseFloat(valorEsperado);
            console.log(`üîç DIVIS√ÉO: Valor num√©rico: ${valorNumerico}`);
            
            const response = await axios.post(this.SCRIPTS_CONFIG.PAGAMENTOS, {
                action: "buscar_por_referencia",
                referencia: referencia,
                valor: valorNumerico
            }, {
                timeout: 15000,
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            console.log(`üîç DIVIS√ÉO: Resposta da busca:`, JSON.stringify(response.data));
            
            if (response.data && response.data.encontrado) {
                console.log(`‚úÖ DIVIS√ÉO: Pagamento encontrado!`);
                return true;
            }
            
            console.log(`‚ùå DIVIS√ÉO: Pagamento n√£o encontrado`);
            return false;
            
        } catch (error) {
            console.error(`‚ùå DIVIS√ÉO: Erro ao buscar pagamento:`, error.message);
            return false;
        }
    }
    
    // === CALCULAR DIVIS√ÉO COM ESPECIFICA√á√ïES DO CLIENTE ===
    calcularDivisaoComEspecificacoes(valorTotal, numeros, grupoId, especificacoes) {
        console.log(`üéØ DIVIS√ÉO: Calculando COM especifica√ß√µes do cliente`);
        
        const configGrupo = this.CONFIGURACAO_GRUPOS[grupoId];
        if (!configGrupo) {
            console.error(`‚ùå DIVIS√ÉO: Grupo ${grupoId} n√£o configurado`);
            return null;
        }
        
        const resultado = [];
        let valorUsado = 0;
        let megasUsados = 0;
        
        // Processar cada n√∫mero com sua especifica√ß√£o
        for (let i = 0; i < numeros.length; i++) {
            const numero = numeros[i];
            const megasEspecificados = especificacoes[numero];
            
            if (!megasEspecificados) {
                console.error(`‚ùå DIVIS√ÉO: N√∫mero ${numero} sem especifica√ß√£o encontrada`);
                return null;
            }
            
            // Encontrar pre√ßo correspondente aos megas especificados
            let valorMT = null;
            let megasTexto = '';
            
            for (const [megas, preco] of Object.entries(configGrupo.precos)) {
                if (parseInt(megas) === megasEspecificados) {
                    valorMT = preco;
                    megasTexto = `${megasEspecificados / 1024}GB`;
                    break;
                }
            }
            
            if (valorMT === null) {
                console.error(`‚ùå DIVIS√ÉO: N√£o encontrou pre√ßo para ${megasEspecificados}MB (${megasEspecificados/1024}GB)`);
                return null;
            }
            
            resultado.push({
                numero: numero,
                megas: megasEspecificados,
                megasTexto: megasTexto,
                valorMT: valorMT
            });
            
            valorUsado += valorMT;
            megasUsados += megasEspecificados;
            
            console.log(`   üìã ${numero}: ${megasTexto} (${valorMT}MT) - especificado pelo cliente`);
        }
        
        // Verificar se o total confere
        if (valorUsado !== valorTotal) {
            console.error(`‚ùå DIVIS√ÉO: Especifica√ß√µes totalizam ${valorUsado}MT mas comprovativo tem ${valorTotal}MT`);
            console.error(`   üí° SUGEST√ÉO: Verifique se as especifica√ß√µes est√£o corretas`);
            return null;
        }
        
        console.log(`‚úÖ DIVIS√ÉO: Especifica√ß√µes conferem! Total: ${valorUsado}MT (${megasUsados/1024}GB)`);
        return resultado;
    }

    // === CALCULAR DIVIS√ÉO POR PRIORIDADE ===
    calcularDivisaoPorPrioridade(valorTotal, numeros, grupoId) {
        try {
            const configGrupo = this.CONFIGURACAO_GRUPOS[grupoId];
            if (!configGrupo || !configGrupo.precos) {
                console.error(`‚ùå DIVIS√ÉO: Grupo ${grupoId} n√£o configurado`);
                return null;
            }
            
            // VALIDA√á√ÉO CR√çTICA: Verificar se o valor √© v√°lido
            if (!valorTotal || isNaN(valorTotal) || valorTotal <= 0) {
                console.error(`‚ùå DIVIS√ÉO: Valor inv√°lido: ${valorTotal}MT`);
                return null;
            }
            
            // VALIDA√á√ÉO CR√çTICA: Verificar se h√° n√∫meros para divis√£o
            if (!numeros || numeros.length === 0) {
                console.error(`‚ùå DIVIS√ÉO: Nenhum n√∫mero v√°lido para divis√£o`);
                return null;
            }
            
            console.log(`üîç DIVIS√ÉO: Tentando dividir ${valorTotal}MT entre ${numeros.length} n√∫meros`);
            
            // Converter valor para megas total com valida√ß√£o melhorada
            let megasTotal = null;
            const precosDisponiveis = [];
            
            for (const [megas, preco] of Object.entries(configGrupo.precos)) {
                precosDisponiveis.push(`${Math.floor(megas/1024)}GB=${preco}MT`);
                if (preco === valorTotal) {
                    megasTotal = parseInt(megas);
                    break;
                }
            }
            
            if (!megasTotal) {
                console.error(`‚ùå DIVIS√ÉO: Valor ${valorTotal}MT n√£o encontrado na tabela de pre√ßos`);
                console.error(`üìã DIVIS√ÉO: Pre√ßos dispon√≠veis: ${precosDisponiveis.join(', ')}`);
                return null;
            }
            
            console.log(`‚úÖ DIVIS√ÉO: ${valorTotal}MT = ${megasTotal}MB (${megasTotal/1024}GB) total`);
            
            // TENTATIVA 1: Divis√£o exata primeiro
            const resultado = this.tentarDivisaoExata(megasTotal, numeros, configGrupo);
            if (resultado && resultado.length > 0) {
                // Validar se a soma confere
                const somaValores = resultado.reduce((sum, item) => sum + item.valorMT, 0);
                if (somaValores === valorTotal) {
                    console.log(`‚úÖ DIVIS√ÉO: Divis√£o exata bem-sucedida`);
                    return resultado;
                } else {
                    console.log(`‚ö†Ô∏è DIVIS√ÉO: Divis√£o exata falhou na valida√ß√£o - ${somaValores}MT ‚â† ${valorTotal}MT`);
                }
            }
            
            // TENTATIVA 2: Divis√£o por aproxima√ß√£o
            console.log(`üîÑ DIVIS√ÉO: Tentando divis√£o por aproxima√ß√£o...`);
            const resultadoAprox = this.tentarDivisaoPorAproximacao(valorTotal, numeros, configGrupo);
            if (resultadoAprox && resultadoAprox.length > 0) {
                // Validar se a soma confere
                const somaValores = resultadoAprox.reduce((sum, item) => sum + item.valorMT, 0);
                if (somaValores === valorTotal) {
                    console.log(`‚úÖ DIVIS√ÉO: Divis√£o por aproxima√ß√£o bem-sucedida`);
                    return resultadoAprox;
                } else {
                    console.log(`‚ö†Ô∏è DIVIS√ÉO: Divis√£o por aproxima√ß√£o falhou na valida√ß√£o - ${somaValores}MT ‚â† ${valorTotal}MT`);
                }
            }
            
            // FALHA: N√£o foi poss√≠vel dividir
            console.error(`‚ùå DIVIS√ÉO: FALHA COMPLETA - Valor ${valorTotal}MT n√£o pode ser dividido entre ${numeros.length} n√∫meros`);
            console.error(`üìã DIVIS√ÉO: Pre√ßos dispon√≠veis no grupo: ${precosDisponiveis.join(', ')}`);
            
            return null;
            
        } catch (error) {
            console.error(`‚ùå DIVIS√ÉO: Erro cr√≠tico no c√°lculo:`, error);
            return null;
        }
    }

    // === TENTATIVA 1: DIVIS√ÉO EXATA ===
    tentarDivisaoExata(megasTotal, numeros, configGrupo) {
        try {
            console.log(`üéØ DIVIS√ÉO: Tentando divis√£o exata de ${megasTotal}MB entre ${numeros.length} n√∫meros`);
            
            // Calcular divis√£o base
            const megasPorNumero = Math.floor(megasTotal / numeros.length);
            
            // Tentar arredondar para m√∫ltiplos de 10GB primeiro
            let megasBase = Math.floor(megasPorNumero / 10240) * 10240;
            
            // Se megasBase √© 0, tentar m√∫ltiplos menores
            if (megasBase === 0) {
                console.log(`üîÑ DIVIS√ÉO: Base de 10GB muito grande, tentando valores menores...`);
                return null; // Deixar para aproxima√ß√£o
            }
            
            const megasRestante = megasTotal - (megasBase * numeros.length);
            
            console.log(`üìä DIVIS√ÉO: Base ${megasBase}MB cada, restante ${megasRestante}MB`);
            
            const resultado = [];
            let megasDistribuidos = 0;
            
            for (let i = 0; i < numeros.length; i++) {
                let megasFinais = megasBase;
                
                // Distribuir restante por prioridade
                if (megasRestante > 0 && i < Math.floor(megasRestante / 10240)) {
                    megasFinais += 10240; // +10GB
                }
                
                // Verificar se este tamanho existe na tabela
                let valorMT = null;
                let megasTexto = '';
                
                for (const [megas, preco] of Object.entries(configGrupo.precos)) {
                    if (parseInt(megas) === megasFinais) {
                        valorMT = preco;
                        megasTexto = `${megasFinais / 1024}GB`;
                        break;
                    }
                }
                
                if (valorMT === null) {
                    console.error(`‚ùå DIVIS√ÉO: Tamanho ${megasFinais}MB (${megasFinais/1024}GB) n√£o existe na tabela`);
                    return null;
                }
                
                resultado.push({
                    numero: numeros[i],
                    megas: megasFinais,
                    megasTexto: megasTexto,
                    valorMT: valorMT
                });
                
                megasDistribuidos += megasFinais;
            }
            
            // Verificar se todos os megas foram distribu√≠dos
            if (megasDistribuidos !== megasTotal) {
                console.error(`‚ùå DIVIS√ÉO: Megas distribu√≠dos ${megasDistribuidos} ‚â† Total ${megasTotal}`);
                return null;
            }
            
            console.log(`‚úÖ DIVIS√ÉO: Divis√£o exata calculada com sucesso`);
            return resultado;
            
        } catch (error) {
            console.error(`‚ùå DIVIS√ÉO: Erro na divis√£o exata:`, error);
            return null;
        }
    }

    // === TENTATIVA 2: DIVIS√ÉO POR APROXIMA√á√ÉO ===
    tentarDivisaoPorAproximacao(valorTotal, numeros, configGrupo) {
        try {
            console.log(`üîÑ DIVIS√ÉO: Tentando divis√£o por aproxima√ß√£o - ${valorTotal}MT entre ${numeros.length} n√∫meros`);
            
            // Obter todos os pre√ßos dispon√≠veis ordenados
            const precosOrdenados = Object.entries(configGrupo.precos)
                .map(([megas, preco]) => ({ megas: parseInt(megas), preco: parseInt(preco) }))
                .sort((a, b) => a.preco - b.preco);
            
            console.log(`üìã DIVIS√ÉO: Pre√ßos dispon√≠veis:`, precosOrdenados.map(p => `${p.preco}MT(${p.megas/1024}GB)`).join(', '));
            
            // Encontrar combina√ß√µes que somem exatamente o valor total
            const combinacoes = this.encontrarCombinacoesExatas(valorTotal, numeros.length, precosOrdenados);
            
            if (combinacoes && combinacoes.length > 0) {
                const resultado = [];
                
                for (let i = 0; i < numeros.length && i < combinacoes.length; i++) {
                    const { megas, preco } = combinacoes[i];
                    resultado.push({
                        numero: numeros[i],
                        megas: megas,
                        megasTexto: `${megas / 1024}GB`,
                        valorMT: preco
                    });
                }
                
                console.log(`‚úÖ DIVIS√ÉO: Combina√ß√£o encontrada por aproxima√ß√£o`);
                return resultado;
            }
            
            console.log(`‚ùå DIVIS√ÉO: Nenhuma combina√ß√£o v√°lida encontrada`);
            return null;
            
        } catch (error) {
            console.error(`‚ùå DIVIS√ÉO: Erro na divis√£o por aproxima√ß√£o:`, error);
            return null;
        }
    }

    // === ENCONTRAR COMBINA√á√ïES EXATAS ===
    encontrarCombinacoesExatas(valorAlvo, quantidadeNumeros, precosDisponiveis) {
        console.log(`üîç DIVIS√ÉO: Procurando combina√ß√µes que somem ${valorAlvo}MT para ${quantidadeNumeros} n√∫meros`);
        
        // Fun√ß√£o recursiva para encontrar combina√ß√µes
        const encontrarCombinacao = (valorRestante, numerosRestantes, combinacaoAtual) => {
            // Caso base: se n√£o h√° mais n√∫meros para preencher
            if (numerosRestantes === 0) {
                return valorRestante === 0 ? combinacaoAtual : null;
            }
            
            // Se valor restante √© negativo, falhou
            if (valorRestante < 0) {
                return null;
            }
            
            // Tentar cada pre√ßo dispon√≠vel
            for (const preco of precosDisponiveis) {
                if (preco.preco <= valorRestante) {
                    const novaCombinacao = [...combinacaoAtual, preco];
                    const resultado = encontrarCombinacao(
                        valorRestante - preco.preco,
                        numerosRestantes - 1,
                        novaCombinacao
                    );
                    
                    if (resultado) {
                        return resultado;
                    }
                }
            }
            
            return null;
        };
        
        const resultado = encontrarCombinacao(valorAlvo, quantidadeNumeros, []);
        
        if (resultado) {
            console.log(`‚úÖ DIVIS√ÉO: Combina√ß√£o encontrada:`, resultado.map(p => `${p.preco}MT(${p.megas/1024}GB)`).join(', '));
        } else {
            console.log(`‚ùå DIVIS√ÉO: Nenhuma combina√ß√£o exata encontrada`);
        }
        
        return resultado;
    }

    // === ESTRAT√âGIA ALTERNATIVA DE C√ÅLCULO ===
    async tentarEstrategiaAlternativa(valorTotal, numeros, grupoId) {
        try {
            console.log(`üîÑ DIVIS√ÉO: Tentando estrat√©gia alternativa para ${valorTotal}MT`);
            
            const configGrupo = this.CONFIGURACAO_GRUPOS[grupoId];
            if (!configGrupo || !configGrupo.precos) {
                return null;
            }
            
            // ESTRAT√âGIA 1: Tentar com n√∫meros diferentes (reduzir 1 n√∫mero)
            if (numeros.length > 2) {
                console.log(`üîÑ DIVIS√ÉO: Tentando com ${numeros.length - 1} n√∫meros...`);
                const numerosReduzidos = numeros.slice(0, -1);
                const divisaoReduzida = this.calcularDivisaoPorPrioridade(valorTotal, numerosReduzidos, grupoId);
                
                if (divisaoReduzida && divisaoReduzida.length > 0) {
                    console.log(`‚ö†Ô∏è DIVIS√ÉO: Consegui dividir apenas entre ${numerosReduzidos.length} n√∫meros`);
                    
                    // Adicionar informa√ß√£o sobre n√∫mero n√£o processado
                    const numeroNaoProcessado = numeros[numeros.length - 1];
                    divisaoReduzida.observacao = `N√∫mero ${numeroNaoProcessado} n√£o p√¥de ser inclu√≠do na divis√£o autom√°tica`;
                    
                    return divisaoReduzida;
                }
            }
            
            // ESTRAT√âGIA 2: Verificar se √© m√∫ltiplo de pre√ßos menores
            const precosOrdenados = Object.entries(configGrupo.precos)
                .map(([megas, preco]) => ({ megas: parseInt(megas), preco: parseInt(preco) }))
                .sort((a, b) => a.preco - b.preco);
            
            console.log(`üîÑ DIVIS√ÉO: Tentando dividir usando menor pre√ßo dispon√≠vel...`);
            const menorPreco = precosOrdenados[0];
            
            if (menorPreco && valorTotal % menorPreco.preco === 0) {
                const quantidadePossivel = Math.floor(valorTotal / menorPreco.preco);
                
                if (quantidadePossivel >= numeros.length) {
                    console.log(`‚úÖ DIVIS√ÉO: Posso dar ${menorPreco.megas/1024}GB para todos`);
                    
                    const resultado = numeros.map(numero => ({
                        numero: numero,
                        megas: menorPreco.megas,
                        megasTexto: `${menorPreco.megas / 1024}GB`,
                        valorMT: menorPreco.preco
                    }));
                    
                    // Calcular sobra
                    const valorUsado = numeros.length * menorPreco.preco;
                    if (valorUsado < valorTotal) {
                        resultado.observacao = `Sobra de ${valorTotal - valorUsado}MT n√£o foi distribu√≠da`;
                    }
                    
                    return resultado;
                }
            }
            
            console.log(`‚ùå DIVIS√ÉO: Todas as estrat√©gias alternativas falharam`);
            return null;
            
        } catch (error) {
            console.error(`‚ùå DIVIS√ÉO: Erro na estrat√©gia alternativa:`, error);
            return null;
        }
    }
    
    // === ENVIAR PARA PLANILHA DE PEDIDOS ===
    async enviarParaPlanilhaPedidos(referencia, megas, numero, grupoId) {
        try {
            console.log(`üìã DIVIS√ÉO: Enviando pedido ${referencia}|${megas}|${numero}`);
            
            const timestamp = new Date().toLocaleString('pt-BR');
            const dadosCompletos = `${referencia}|${megas}|${numero}|${timestamp}`;
            
            const dados = {
                grupo_id: grupoId,
                timestamp: timestamp,
                dados: dadosCompletos,
                sender: "WhatsApp-Bot-Divisao",
                message: `Pedido dividido: ${dadosCompletos}`
            };
            
            console.log(`üìã DIVIS√ÉO: URL PEDIDOS: ${this.SCRIPTS_CONFIG.PEDIDOS}`);
            console.log(`üìã DIVIS√ÉO: Dados:`, JSON.stringify(dados));
            
            const response = await axios.post(this.SCRIPTS_CONFIG.PEDIDOS, dados, {
                timeout: 20000, // Aumentado para 20 segundos
                headers: { 'Content-Type': 'application/json' },
                retry: 2 // Tentar novamente se falhar
            });
            
            console.log(`üìã DIVIS√ÉO: Resposta recebida:`, response.data);
            
            if (!response.data || !response.data.success) {
                const responseText = typeof response.data === 'string' ? response.data : JSON.stringify(response.data);
                throw new Error(`Erro ao salvar pedido: ${responseText}`);
            }
            
            console.log(`‚úÖ DIVIS√ÉO: Pedido salvo com sucesso - ${referencia}|${megas}|${numero}`);
            
        } catch (error) {
            console.error(`‚ùå DIVIS√ÉO: Erro ao enviar pedido:`, error.message);
            
            // Se foi timeout, tentar novamente
            if (error.code === 'ECONNABORTED' && error.message.includes('timeout')) {
                console.log(`üîÑ DIVIS√ÉO: Tentando reenviar pedido ap√≥s timeout...`);
                try {
                    const response = await axios.post(this.SCRIPTS_CONFIG.PEDIDOS, dados, {
                        timeout: 30000, // 30 segundos na segunda tentativa
                        headers: { 'Content-Type': 'application/json' }
                    });
                    
                    console.log(`‚úÖ DIVIS√ÉO: Pedido enviado na segunda tentativa:`, response.data);
                    
                    if (response.data && response.data.success) {
                        console.log(`‚úÖ DIVIS√ÉO: Pedido salvo com sucesso na segunda tentativa - ${referencia}|${megas}|${numero}`);
                        return;
                    }
                } catch (retryError) {
                    console.error(`‚ùå DIVIS√ÉO: Segunda tentativa tamb√©m falhou:`, retryError.message);
                }
            }
            
            throw error;
        }
    }
    
    // === ENVIAR PARA PLANILHA DE PAGAMENTOS ===
    async enviarParaPlanilhaPagamentos(referencia, valor, numero, grupoId) {
        try {
            console.log(`üí∞ DIVIS√ÉO: Enviando pagamento ${referencia}|${valor}|${numero}`);
            
            const timestamp = new Date().toLocaleString('pt-BR');
            const dadosCompletos = `${referencia}|${valor}|${numero}|${timestamp}`;
            
            const dados = {
                grupo_id: grupoId,
                timestamp: timestamp,
                transacao: dadosCompletos,
                sender: "WhatsApp-Bot-Divisao",
                message: `Pagamento dividido: ${dadosCompletos}`
            };
            
            console.log(`üí∞ DIVIS√ÉO: URL PAGAMENTOS: ${this.SCRIPTS_CONFIG.PAGAMENTOS}`);
            console.log(`üí∞ DIVIS√ÉO: Dados:`, JSON.stringify(dados));
            
            const response = await axios.post(this.SCRIPTS_CONFIG.PAGAMENTOS, dados, {
                timeout: 20000, // Aumentado para 20 segundos  
                headers: { 'Content-Type': 'application/json' },
                retry: 2 // Tentar novamente se falhar
            });
            
            console.log(`üí∞ DIVIS√ÉO: Resposta recebida:`, response.data);
            
            // Verificar se foi sucesso - pode ser objeto {success: true} ou string "Sucesso!"
            const isSuccess = (response.data && response.data.success) || 
                             (typeof response.data === 'string' && response.data.includes('Sucesso'));
            
            if (!response.data || !isSuccess) {
                const responseText = typeof response.data === 'string' ? response.data : JSON.stringify(response.data);
                throw new Error(`Erro ao salvar pagamento: ${responseText}`);
            }
            
            console.log(`‚úÖ DIVIS√ÉO: Pagamento salvo com sucesso - ${referencia}|${valor}|${numero}`);
            
        } catch (error) {
            console.error(`‚ùå DIVIS√ÉO: Erro ao enviar pagamento:`, error.message);
            
            // Se foi timeout, tentar novamente
            if (error.code === 'ECONNABORTED' && error.message.includes('timeout')) {
                console.log(`üîÑ DIVIS√ÉO: Tentando reenviar pagamento ap√≥s timeout...`);
                try {
                    const response = await axios.post(this.SCRIPTS_CONFIG.PAGAMENTOS, dados, {
                        timeout: 30000, // 30 segundos na segunda tentativa
                        headers: { 'Content-Type': 'application/json' }
                    });
                    
                    console.log(`‚úÖ DIVIS√ÉO: Pagamento enviado na segunda tentativa:`, response.data);
                    
                    const isSuccess = (response.data && response.data.success) || 
                                     (typeof response.data === 'string' && response.data.includes('Sucesso'));
                    
                    if (isSuccess) {
                        console.log(`‚úÖ DIVIS√ÉO: Pagamento salvo com sucesso na segunda tentativa - ${referencia}|${valor}|${numero}`);
                        return;
                    }
                } catch (retryError) {
                    console.error(`‚ùå DIVIS√ÉO: Segunda tentativa de pagamento tamb√©m falhou:`, retryError.message);
                }
            }
            
            throw error;
        }
    }
    
    // === LIMPEZA DE DADOS ANTIGOS ===
    limparComprovantesAntigos() {
        const agora = Date.now();
        const timeout = 30 * 60 * 1000; // 30 minutos
        let removidos = 0;
        
        Object.keys(this.comprovantesMemorizados).forEach(remetente => {
            const comprovativo = this.comprovantesMemorizados[remetente];
            if (agora - comprovativo.timestamp > timeout) {
                delete this.comprovantesMemorizados[remetente];
                removidos++;
            }
        });
        
        if (removidos > 0) {
            console.log(`üóëÔ∏è DIVIS√ÉO: ${removidos} comprovativos antigos removidos`);
        }
    }
    
    // === EXTRAIR TEXTO DE IMAGEM COM IA ===
    async extrairTextoDeImagem(message, grupoId) {
        try {
            console.log('üì∑ DIVIS√ÉO: Iniciando extra√ß√£o de texto da imagem com IA...');
            
            // Verificar se IA est√° dispon√≠vel
            if (!this.ia) {
                console.log('‚ùå DIVIS√ÉO: IA n√£o dispon√≠vel para processar imagens');
                return null;
            }
            
            // Baixar a m√≠dia
            const media = await message.downloadMedia();
            if (!media) {
                console.log('‚ùå DIVIS√ÉO: N√£o foi poss√≠vel baixar a m√≠dia');
                return null;
            }
            
            console.log(`üì∑ DIVIS√ÉO: M√≠dia baixada - Tipo: ${media.mimetype}, Tamanho: ${media.data.length} bytes`);
            
            // Verificar se √© imagem
            if (!media.mimetype || !media.mimetype.startsWith('image/')) {
                console.log('‚ùå DIVIS√ÉO: Arquivo n√£o √© uma imagem v√°lida');
                return null;
            }
            
            // Criar configura√ß√£o de grupo para a IA (usando dados do bot de divis√£o)
            const configGrupoParaIA = this.CONFIGURACAO_GRUPOS[grupoId] ? {
                tabela: this.gerarTabelaTextoParaIA(grupoId),
                precos: this.CONFIGURACAO_GRUPOS[grupoId].precos  // CORRE√á√ÉO: Adicionar pre√ßos diretos
            } : null;
            
            // Usar a IA avan√ßada para extrair comprovativo da imagem
            const resultadoIA = await this.ia.processarImagem(media.data, 'usuario_divisao', Date.now(), configGrupoParaIA, message.body || '');
            
            console.log(`üîç DIVIS√ÉO: Resultado completo da IA:`, JSON.stringify(resultadoIA, null, 2));
            
            if (resultadoIA && resultadoIA.sucesso) {
                // Se a IA j√° processou tudo (comprovativo + n√∫mero √∫nico), retornar resultado direto
                if (resultadoIA.dadosCompletos) {
                    console.log(`‚úÖ DIVIS√ÉO: IA processou TUDO: ${resultadoIA.dadosCompletos}`);
                    return { processadoCompleto: true, resultado: resultadoIA };
                }
                
                // Se IA s√≥ extraiu comprovativo, simular texto para processamento normal
                if (resultadoIA.referencia && resultadoIA.valor) {
                    console.log(`‚úÖ DIVIS√ÉO: IA extraiu comprovativo: ${resultadoIA.referencia} - ${resultadoIA.valor}MT`);
                    const textoSimulado = `Confirmado ${resultadoIA.referencia} - Transferiste ${resultadoIA.valor}MT`;
                    return textoSimulado;
                }
            }
            
            // CASO ESPECIAL: IA rejeitou m√∫ltiplos n√∫meros, mas n√≥s queremos process√°-los!
            if (resultadoIA && !resultadoIA.sucesso && resultadoIA.tipo === 'multiplos_numeros_nao_permitido') {
                console.log('üéØ DIVIS√ÉO: IA detectou m√∫ltiplos n√∫meros - extraindo s√≥ comprovativo!');
                console.log(`üì± DIVIS√ÉO: M√∫ltiplos n√∫meros detectados: ${resultadoIA.numeros.join(', ')}`);
                
                // Extrair apenas o comprovativo usando prompt personalizado para divis√£o
                const comprovantivoIA = await this.extrairApenasComprovativo(media.data);
                
                if (comprovantivoIA && comprovantivoIA.referencia && comprovantivoIA.valor) {
                    console.log(`‚úÖ DIVIS√ÉO: Comprovativo extra√≠do: ${comprovantivoIA.referencia} - ${comprovantivoIA.valor}MT`);
                    
                    // Simular texto com comprovativo + m√∫ltiplos n√∫meros
                    const textoSimulado = `Confirmado ${comprovantivoIA.referencia} - Transferiste ${comprovantivoIA.valor}MT ${resultadoIA.numeros.join(' ')}`;
                    return textoSimulado;
                }
            }
            
            console.log('‚ùå DIVIS√ÉO: IA n√£o conseguiu extrair comprovativo da imagem');
            return null;
            
        } catch (error) {
            console.error('‚ùå DIVIS√ÉO: Erro ao usar IA para extrair texto da imagem:', error);
            return null;
        }
    }

    // === EXTRAIR APENAS COMPROVATIVO (SEM N√öMEROS) ===
    async extrairApenasComprovativo(imagemBase64) {
        if (!this.ia) return null;
        
        try {
            console.log('üîç DIVIS√ÉO: Extraindo apenas comprovativo da imagem...');
            
            const prompt = `Analise esta imagem de comprovante M-Pesa/E-Mola de Mo√ßambique.

FOQUE APENAS no comprovante - IGNORE todos os n√∫meros de telefone.

Extraia:
- Refer√™ncia da transa√ß√£o (ID da transa√ß√£o)
- Valor transferido em MT

‚ö†Ô∏è CR√çTICO: Mantenha mai√∫sculas e min√∫sculas EXATAMENTE como aparecem!

Responda APENAS no formato JSON:
{
  "referencia": "CHP2H5LBZAS",
  "valor": "250",
  "encontrado": true,
  "tipo": "mpesa"
}

Se n√£o conseguir extrair:
{"encontrado": false}`;

            const response = await this.ia.openai.chat.completions.create({
                model: "gpt-4o",
                messages: [
                    {
                        role: "user",
                        content: [
                            { type: "text", text: prompt },
                            {
                                type: "image_url",
                                image_url: {
                                    url: `data:image/jpeg;base64,${imagemBase64}`,
                                    detail: "high"
                                }
                            }
                        ]
                    }
                ],
                temperature: 0.1,
                max_tokens: 300
            });
            
            console.log(`üîç DIVIS√ÉO: Resposta da IA (s√≥ comprovativo): ${response.choices[0].message.content}`);
            
            const resultado = this.ia.extrairJSONMelhorado(response.choices[0].message.content);
            
            if (resultado && resultado.encontrado) {
                return {
                    referencia: resultado.referencia,
                    valor: this.ia.limparValor(resultado.valor)
                };
            }
            
            return null;
            
        } catch (error) {
            console.error('‚ùå DIVIS√ÉO: Erro ao extrair comprovativo:', error);
            return null;
        }
    }

    // === GERAR TABELA PARA IA ===
    gerarTabelaTextoParaIA(grupoId) {
        const configGrupo = this.CONFIGURACAO_GRUPOS[grupoId];
        if (!configGrupo || !configGrupo.precos) {
            return '';
        }
        
        let tabela = `üìã TABELA ${configGrupo.nome}:\n`;
        
        Object.entries(configGrupo.precos).forEach(([megas, preco]) => {
            const gb = Math.floor(megas / 1024);
            tabela += `${gb}GB‚ûú${preco}MT\n`;
        });
        
        console.log(`üìã DIVIS√ÉO: Tabela gerada para IA: ${tabela}`);
        return tabela;
    }

    // === ADICIONAR N√öMERO DE PAGAMENTO ===
    adicionarNumeroPagamento(grupoId, numero) {
        if (!this.CONFIGURACAO_GRUPOS[grupoId]) {
            console.log(`‚ùå DIVIS√ÉO: Grupo ${grupoId} n√£o existe`);
            return false;
        }
        
        if (!this.CONFIGURACAO_GRUPOS[grupoId].numerosPagamento) {
            this.CONFIGURACAO_GRUPOS[grupoId].numerosPagamento = [];
        }
        
        const numeroLimpo = this.limparNumero(numero);
        if (!this.CONFIGURACAO_GRUPOS[grupoId].numerosPagamento.includes(numeroLimpo)) {
            this.CONFIGURACAO_GRUPOS[grupoId].numerosPagamento.push(numeroLimpo);
            console.log(`‚úÖ DIVIS√ÉO: N√∫mero de pagamento ${numeroLimpo} adicionado ao grupo ${this.CONFIGURACAO_GRUPOS[grupoId].nome}`);
            return true;
        } else {
            console.log(`‚ö†Ô∏è DIVIS√ÉO: N√∫mero ${numeroLimpo} j√° est√° na lista de pagamentos`);
            return false;
        }
    }

    // === STATUS DO BOT ===
    getStatus() {
        return {
            comprovantesMemorizados: Object.keys(this.comprovantesMemorizados).length,
            processandoDivisoes: this.processandoDivisoes.size,
            gruposConfigurados: Object.keys(this.CONFIGURACAO_GRUPOS).length,
            numerosPagamento: Object.keys(this.CONFIGURACAO_GRUPOS).reduce((acc, grupoId) => {
                const config = this.CONFIGURACAO_GRUPOS[grupoId];
                acc[config.nome] = config.numerosPagamento || [];
                return acc;
            }, {})
        };
    }
}

module.exports = WhatsAppBotDivisao;