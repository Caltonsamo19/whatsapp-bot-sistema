require('dotenv').config();
const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const fs = require('fs').promises;
const axios = require('axios'); // npm install axios

// === IMPORTAR A IA ===
const WhatsAppAI = require('./whatsapp_ai');

// === IMPORTAR SISTEMA DE PACOTES ===
const SistemaPacotes = require('./sistema_pacotes');

// === IMPORTAR SISTEMA DE COMPRAS ===
const SistemaCompras = require('./sistema_compras');

// === CONFIGURA√á√ÉO GOOGLE SHEETS - BOT RETALHO (SCRIPT PR√ìPRIO) ===
const GOOGLE_SHEETS_CONFIG = {
    scriptUrl: process.env.GOOGLE_SHEETS_SCRIPT_URL_RETALHO || 'https://script.google.com/macros/s/AKfycbyMilUC5bYKGXV95LR4MmyaRHzMf6WCmXeuztpN0tDpQ9_2qkgCxMipSVqYK_Q6twZG/exec',
    planilhaUrl: 'https://docs.google.com/spreadsheets/d/1vIv1Y0Hiu6NHEG37ubbFoa_vfbEe6sAb9I4JH-P38BQ/edit',
    planilhaId: '1vIv1Y0Hiu6NHEG37ubbFoa_vfbEe6sAb9I4JH-P38BQ',
    timeout: 30000,
    retryAttempts: 3,
    retryDelay: 2000
};

// === CONFIGURA√á√ÉO DE PAGAMENTOS (MESMA PLANILHA DO BOT ATACADO) ===
const PAGAMENTOS_CONFIG = {
    scriptUrl: 'https://script.google.com/macros/s/AKfycbzzifHGu1JXc2etzG3vqK5Jd3ihtULKezUTQQIDJNsr6tXx3CmVmKkOlsld0x1Feo0H/exec',
    timeout: 30000
};

console.log(`üìä Google Sheets configurado`);

// Fun√ß√£o helper para reply com fallback
async function safeReply(message, client, texto) {
    try {
        await message.reply(texto);
    } catch (error) {
        console.log('‚ö†Ô∏è Erro no reply, usando sendMessage como fallback:', error.message);
        try {
            await client.sendMessage(message.from, texto);
        } catch (fallbackError) {
            console.error('‚ùå Erro tamb√©m no sendMessage fallback:', fallbackError.message);
            throw fallbackError;
        }
    }
}

// Criar inst√¢ncia do cliente OTIMIZADA
const client = new Client({
    authStrategy: new LocalAuth({
        clientId: "bot_retalho_modificado", // Diferente do bot atacado
        dataPath: './session_data' // Caminho personalizado para dados de sess√£o
    }),
    puppeteer: {
        headless: true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--disable-gpu',
            '--disable-extensions',
            '--no-default-browser-check',
            '--disable-default-apps',
            '--disable-translate',
            '--disable-sync',
            '--disable-background-timer-throttling', // OTIMIZA√á√ÉO: Evitar throttling
            '--disable-backgrounding-occluded-windows',
            '--disable-renderer-backgrounding',
            '--disable-features=TranslateUI',
            '--disable-ipc-flooding-protection',
            '--memory-pressure-off', // OTIMIZA√á√ÉO: Reduzir press√£o de mem√≥ria
            '--max-old-space-size=1024' // OTIMIZA√á√ÉO: Limitar uso de mem√≥ria
        ],
        executablePath: undefined,
        timeout: 0,
        ignoreDefaultArgs: ['--disable-extensions']
    }
});

// === INICIALIZAR A IA ===
require('dotenv').config();
const ia = new WhatsAppAI(process.env.OPENAI_API_KEY);

// === SISTEMA DE PACOTES (ser√° inicializado ap√≥s WhatsApp conectar) ===
let sistemaPacotes = null;
let sistemaCompras = null;

// Configura√ß√£o para encaminhamento
const ENCAMINHAMENTO_CONFIG = {
    grupoOrigem: '120363152151047451@g.us', // Phull Megas
    numeroDestino: '258861645968@c.us',
    intervaloSegundos: 2
};

// Fila de mensagens para encaminhar
let filaMensagens = [];
let processandoFila = false;

// === SISTEMA DE CACHE DE DADOS OTIMIZADO ===
let cacheTransacoes = new Map(); // Cache em mem√≥ria mais eficiente

// === SISTEMA DE RETRY SILENCIOSO PARA PAGAMENTOS ===
let pagamentosPendentes = {}; // {id: {dados do pedido}}
let timerRetryPagamentos = null;
const ARQUIVO_PAGAMENTOS_PENDENTES = './pagamentos_pendentes.json';
const RETRY_INTERVAL = 60000; // 60 segundos
const RETRY_TIMEOUT = 30 * 60 * 1000; // 30 minutos

// === SISTEMA DE REFER√äNCIAS E B√îNUS ===
let codigosReferencia = {}; // codigo -> dados do dono
let referenciasClientes = {}; // cliente -> dados da referencia
let bonusSaldos = {}; // cliente -> saldo e historico
let pedidosSaque = {}; // referencia -> dados do pedido
let membrosEntrada = {}; // {grupoId: {memberId: dataEntrada}}

// Arquivos de persist√™ncia
const ARQUIVO_REFERENCIAS = './dados_referencias.json';
const ARQUIVO_BONUS = './dados_bonus.json';
const ARQUIVO_CODIGOS = './dados_codigos.json';
const ARQUIVO_SAQUES = './dados_saques.json';
const ARQUIVO_MEMBROS = './dados_membros_entrada.json';

// === FUN√á√ïES DO SISTEMA DE REFER√äNCIA ===

// Cache para controlar boas-vindas (evitar spam)
let cacheBoasVindas = {}; // {grupoId_participantId: timestamp}
let ultimosParticipantes = {}; // {grupoId: [participantIds]} - cache dos participantes

// === CACHE PARA RASTREAR MEMBROS J√Å PROCESSADOS VIA GROUP-JOIN ===
let membrosProcessadosViaEvent = new Set(); // Evita processamento duplicado

// Sistema autom√°tico de detec√ß√£o de novos membros
async function iniciarMonitoramentoMembros() {
    console.log('üïµÔ∏è Iniciando monitoramento autom√°tico de novos membros...');
    
    // Executar a cada 2 minutos (otimizado - era 30s)
    setInterval(async () => {
        try {
            await verificarNovosMembros();
        } catch (error) {
            console.error('‚ùå Erro no monitoramento de membros:', error);
        }
    }, 120000); // 2 minutos
    
    // Primeira execu√ß√£o ap√≥s 10 segundos (para dar tempo do bot conectar)
    setTimeout(async () => {
        await verificarNovosMembros();
    }, 10000);
}

// Verificar novos membros em todos os grupos monitorados
async function verificarNovosMembros() {
    for (const grupoId of Object.keys(CONFIGURACAO_GRUPOS)) {
        try {
            await detectarNovosMembrosGrupo(grupoId);
        } catch (error) {
            // Silencioso para n√£o poluir logs
        }
    }
}

// Detectar novos membros em um grupo espec√≠fico
async function detectarNovosMembrosGrupo(grupoId) {
    try {
        const chat = await client.getChatById(grupoId);
        const participants = await chat.participants;
        const participantIds = participants.map(p => p.id._serialized);
        
        // Se √© a primeira vez que verificamos este grupo
        if (!ultimosParticipantes[grupoId]) {
            ultimosParticipantes[grupoId] = participantIds;
            return;
        }
        
        // Encontrar novos participantes
        const novosParticipantes = participantIds.filter(id => 
            !ultimosParticipantes[grupoId].includes(id)
        );
        
        // Processar novos membros
        for (const participantId of novosParticipantes) {
            await processarNovoMembro(grupoId, participantId);
        }
        
        // Atualizar cache
        ultimosParticipantes[grupoId] = participantIds;
        
    } catch (error) {
        // Silencioso - grupo pode n√£o existir ou bot n√£o ter acesso
    }
}

// Processar novo membro detectado
async function processarNovoMembro(grupoId, participantId) {
    try {
        const configGrupo = getConfiguracaoGrupo(grupoId);
        if (!configGrupo) return;

        const cacheKey = `${grupoId}_${participantId}`;
        const agora = Date.now();

        // Verificar se j√° enviamos boas-vindas recentemente (√∫ltimas 24h)
        if (cacheBoasVindas[cacheKey] && (agora - cacheBoasVindas[cacheKey]) < (24 * 60 * 60 * 1000)) {
            return;
        }

        console.log(`üëã Novo membro detectado via POLLING: ${participantId}`);

        // Verificar se j√° foi processado via event 'group-join'
        const membroKey = `${grupoId}_${participantId}`;
        if (membrosProcessadosViaEvent.has(membroKey)) {
            console.log(`‚úÖ Membro ${participantId} j√° foi processado via event 'group-join' - pulando...`);
            return;
        }

        // SISTEMA AUTOM√ÅTICO DESATIVADO - Usu√°rio deve usar c√≥digo manual
        console.log(`üì¢ Sistema autom√°tico desativado - novo membro deve usar c√≥digo do convidador`);

        /* SISTEMA AUTOM√ÅTICO COMENTADO - USU√ÅRIO PREFERIU M√âTODO MANUAL
        // M√âTODO ALTERNATIVO: Analisar mensagens recentes do grupo
        const referenciaCreada = await detectarConvidadorViaMensagens(grupoId, participantId);
        if (referenciaCreada) {
            console.log(`‚úÖ Refer√™ncia criada via an√°lise de mensagens`);
        } else {
            console.log(`‚ÑπÔ∏è N√£o foi poss√≠vel detectar convidador - enviando apenas boas-vindas`);
        }
        */

        // Registrar entrada do membro
        await registrarEntradaMembro(grupoId, participantId);

        // Marcar como processado
        cacheBoasVindas[cacheKey] = agora;

        // Enviar boas-vindas com delay aleat√≥rio
        setTimeout(async () => {
            try {
                await enviarBoasVindas(grupoId, participantId);
                console.log(`‚úÖ Boas-vindas enviadas`);
            } catch (error) {
                console.error(`‚ùå Erro ao enviar boas-vindas para ${participantId}:`, error.message);
            }
        }, 3000 + (Math.random() * 5000)); // 3-8 segundos

    } catch (error) {
        console.error('‚ùå Erro ao processar novo membro:', error);
    }
}

// SISTEMA DE DETEC√á√ÉO INTELIGENTE - CORRIGIDO
async function tentarDetectarConvidador(grupoId, novoMembroId) {
    try {
        console.log(`üîç DETEC√á√ÉO: Analisando quem adicionou ${novoMembroId}...`);

        const chat = await client.getChatById(grupoId);
        const participants = await chat.participants;

        // 1. ESTRAT√âGIA: Verificar admins ativos recentemente
        const admins = participants.filter(p => p.isAdmin && p.id._serialized !== novoMembroId);

        if (admins.length === 0) {
            console.log(`‚ùå DETEC√á√ÉO: Nenhum admin encontrado no grupo`);
            return null;
        }

        // 2. L√ìGICA INTELIGENTE: Buscar o admin mais prov√°vel
        const hojeISO = new Date().toISOString().split('T')[0];

        // Verificar quantas refer√™ncias cada admin criou hoje
        const adminStats = admins.map(admin => {
            const adminId = admin.id._serialized;
            const referenciasHoje = Object.keys(referenciasClientes).filter(clienteId => {
                const ref = referenciasClientes[clienteId];
                return ref.convidadoPor === adminId && ref.dataRegistro?.startsWith(hojeISO);
            }).length;

            return { adminId, referenciasHoje, nome: admin.pushname || 'Admin' };
        });

        // Ordenar por menos refer√™ncias criadas (mais justo distribuir)
        adminStats.sort((a, b) => a.referenciasHoje - b.referenciasHoje);

        // 3. REGRAS DE SELE√á√ÉO INTELIGENTE:
        const adminEscolhido = adminStats[0];

        // Se o admin com menos refer√™ncias tem muito poucas (0-2), √© um bom candidato
        if (adminEscolhido.referenciasHoje <= 2) {
            console.log(`üéØ DETEC√á√ÉO: Selecionado ${adminEscolhido.nome} (${adminEscolhido.referenciasHoje} refs hoje)`);
            return await criarReferenciaAutomaticaInteligente(adminEscolhido.adminId, novoMembroId, grupoId);
        }

        // Se todos os admins j√° t√™m muitas refer√™ncias, usar distribui√ß√£o rotativa
        console.log(`‚öñÔ∏è DETEC√á√ÉO: Usando distribui√ß√£o rotativa entre admins`);
        return await criarReferenciaAutomaticaInteligente(adminEscolhido.adminId, novoMembroId, grupoId);

        /* C√ìDIGO ANTIGO COMENTADO - CAUSAVA FALSAS REFER√äNCIAS
        const chat = await client.getChatById(grupoId);
        const participants = await chat.participants;
        const admins = participants.filter(p => p.isAdmin && p.id._serialized !== novoMembroId);

        if (admins.length > 0) {
            const possivelConvidador = admins[0].id._serialized;
            console.log(`üéØ BACKUP: Assumindo que ${possivelConvidador} adicionou ${novoMembroId}`);

            const hojeISO = new Date().toISOString().split('T')[0];
            const referenciasHoje = Object.keys(referenciasClientes).filter(clienteId => {
                const ref = referenciasClientes[clienteId];
                return ref.convidadoPor === possivelConvidador &&
                       ref.dataRegistro?.startsWith(hojeISO);
            }).length;

            if (referenciasHoje >= 5) {
                console.log(`‚ö†Ô∏è BACKUP: ${possivelConvidador} j√° tem ${referenciasHoje} refer√™ncias hoje, pulando...`);
                return false;
            }

            const resultado = await criarReferenciaAutomaticaBackup(possivelConvidador, novoMembroId, grupoId);
            console.log(`üîó BACKUP: Resultado da cria√ß√£o: ${resultado ? 'SUCESSO' : 'FALHOU'}`);

            return resultado;
        } else {
            console.log(`‚ùå BACKUP: Nenhum admin encontrado no grupo`);
            return false;
        }
        */

    } catch (error) {
        console.error('‚ùå Erro ao tentar detectar convidador (backup):', error);
        return null;
    }
}

// === DETEC√á√ÉO DE CONVIDADOR VIA AN√ÅLISE DE MENSAGENS ===
async function detectarConvidadorViaMensagens(grupoId, novoMembroId) {
    try {
        console.log(`üîç AN√ÅLISE: Detectando convidador via mensagens para ${novoMembroId}...`);

        // Obter hist√≥rico de mensagens recentes do grupo (√∫ltimos 10 minutos)
        const chat = await client.getChatById(grupoId);
        const agora = Date.now();
        const limiteTempo = agora - (10 * 60 * 1000); // 10 minutos atr√°s

        // Buscar mensagens recentes
        const mensagens = await chat.fetchMessages({ limit: 100 });
        console.log(`üìú Analisando ${mensagens.length} mensagens recentes...`);

        let convidadorDetectado = null;
        let confiabilidade = 0;

        // 1. PRIORIDADE M√ÅXIMA: Buscar mensagens de sistema do WhatsApp
        for (const mensagem of mensagens) {
            // Pular mensagens antigas
            if (mensagem.timestamp * 1000 < limiteTempo) {
                continue;
            }

            // Buscar mensagens de sistema (aqueles placeholders cinzentos)
            const isSistema = mensagem.type === 'notification' ||
                             mensagem.type === 'group_notification' ||
                             mensagem.type === 'GROUP_NOTIFICATION' ||
                             mensagem.type === 'NOTIFICATION';

            if (isSistema || (mensagem.body && (mensagem.body.includes('adicionou') || mensagem.body.includes('added')))) {
                console.log(`üîî NOTIFICA√á√ÉO SISTEMA:`, {
                    type: mensagem.type,
                    body: mensagem.body,
                    author: mensagem.author,
                    timestamp: new Date(mensagem.timestamp * 1000).toLocaleString()
                });

                // Tentar extrair quem adicionou da mensagem do sistema
                if (mensagem.body) {
                    const nomeNovoMembro = await obterNomeContato(novoMembroId);

                    // Padr√µes mais abrangentes para detectar adi√ß√£o
                    const padroesAdicao = [
                        new RegExp(`([\\w\\s]+)\\s+(adicionou|added)\\s+.*${nomeNovoMembro.split(' ')[0]}`, 'i'),
                        new RegExp(`([\\w\\s]+)\\s+(adicionou|added)\\s+.*${nomeNovoMembro}`, 'i'),
                        new RegExp(`(.+)\\s+(adicionou|added)\\s+(.+)`, 'i') // Padr√£o gen√©rico
                    ];

                    for (const regex of padroesAdicao) {
                        const match = mensagem.body.match(regex);
                        if (match) {
                            const nomeConvidador = match[1].trim();
                            console.log(`üéØ SISTEMA DETECTOU: "${nomeConvidador}" adicionou "${match[3] || nomeNovoMembro}"`);

                            // Buscar ID do convidador pelos participantes
                            const participants = chat.participants;
                            for (const participant of participants) {
                                const nomeParticipante = await obterNomeContato(participant.id._serialized);

                                // Compara√ß√£o flex√≠vel de nomes
                                const nomeParticipanteLimpo = nomeParticipante.toLowerCase().trim();
                                const nomeConvidadorLimpo = nomeConvidador.toLowerCase().trim();

                                if ((nomeParticipanteLimpo.includes(nomeConvidadorLimpo) ||
                                     nomeConvidadorLimpo.includes(nomeParticipanteLimpo)) &&
                                    participant.isAdmin) {

                                    convidadorDetectado = participant.id._serialized;
                                    confiabilidade = 95; // Alt√≠ssima confiabilidade para mensagens do sistema
                                    console.log(`üéØ CONFIRMADO VIA SISTEMA: ${nomeParticipante} (${convidadorDetectado})`);
                                    break;
                                }
                            }

                            if (convidadorDetectado) break;
                        }
                    }
                }
            }

            if (convidadorDetectado) break;
        }

        // 2. SEGUNDO M√âTODO: Buscar padr√µes de convite nas mensagens de usu√°rios
        if (!convidadorDetectado) {
            for (const mensagem of mensagens) {
                if (mensagem.timestamp * 1000 < limiteTempo) continue;

                const autorMensagem = mensagem.author || mensagem.from;
                const corpo = mensagem.body.toLowerCase();

                // Buscar padr√µes de convite nas mensagens
                const padroesFrases = [
                    /vou adicionar/i,
                    /vou convidar/i,
                    /vou chamar/i,
                    /adicionei/i,
                    /convidei/i,
                    /chamei/i,
                    /entrem?\s+no\s+grupo/i,
                    /venham?\s+para\s+o\s+grupo/i,
                    /grupo\s+novo/i
                ];

                for (const padrao of padroesFrases) {
                    if (padrao.test(corpo)) {
                        console.log(`üí° PADR√ÉO DETECTADO: "${corpo.substring(0, 50)}..." por ${autorMensagem}`);

                        const isAdmin = await isAdminGrupo(grupoId, autorMensagem);
                        if (isAdmin) {
                            convidadorDetectado = autorMensagem;
                            confiabilidade = 75; // Boa confiabilidade para padr√µes + admin
                            console.log(`üéØ DETECTADO VIA PADR√ÉO: ${autorMensagem} (confiabilidade: ${confiabilidade}%)`);
                            break;
                        }
                    }
                }

                if (convidadorDetectado) break;
            }
        }

        // 3. FALLBACK: Distribui√ß√£o inteligente
        if (!convidadorDetectado) {
            console.log(`üß† Usando distribui√ß√£o inteligente como backup...`);
            convidadorDetectado = await selecionarAdminComMenosReferencias(grupoId);
            confiabilidade = 50; // Confiabilidade m√©dia para distribui√ß√£o inteligente
        }

        if (convidadorDetectado) {
            console.log(`‚úÖ DETECTADO: ${convidadorDetectado} (confiabilidade: ${confiabilidade}%)`);

            // Criar refer√™ncia autom√°tica com m√©todo identificado
            const resultado = await criarReferenciaAutomaticaInteligente(
                convidadorDetectado,
                novoMembroId,
                grupoId
            );

            if (resultado) {
                // Adicionar indicador de m√©todo de detec√ß√£o
                const referencia = referenciasClientes[novoMembroId];
                if (referencia) {
                    referencia.metodoDeteccao = 'AUTO_ANALISE_MENSAGENS';
                    referencia.confiabilidade = confiabilidade;

                    console.log(`üéØ AN√ÅLISE: Refer√™ncia criada com ${confiabilidade}% de confiabilidade`);
                }
            }

            return resultado;
        } else {
            console.log(`‚ùå AN√ÅLISE: N√£o foi poss√≠vel detectar convidador`);
            return false;
        }

    } catch (error) {
        console.error('‚ùå Erro na an√°lise de mensagens:', error);
        return false;
    }
}

// === FUN√á√ÉO AUXILIAR PARA OBTER NOME DE CONTATO ===
async function obterNomeContato(contactId) {
    try {
        const contact = await client.getContactById(contactId);
        return contact.pushname || contact.name || contact.number || 'Desconhecido';
    } catch (error) {
        console.error(`‚ùå Erro ao obter nome do contato ${contactId}:`, error);
        return 'Desconhecido';
    }
}

// === SELE√á√ÉO INTELIGENTE DE ADMIN COM MENOS REFER√äNCIAS ===
async function selecionarAdminComMenosReferencias(grupoId) {
    try {
        const chat = await client.getChatById(grupoId);
        const participants = chat.participants;

        // Filtrar apenas admins
        const admins = participants.filter(p => p.isAdmin);
        if (admins.length === 0) {
            console.log(`‚ùå Nenhum admin encontrado no grupo`);
            return null;
        }

        console.log(`üë• DISTRIBUI√á√ÉO: Analisando ${admins.length} admins...`);

        // Contar refer√™ncias criadas hoje por cada admin
        const hoje = new Date().toDateString();
        const contadorReferencias = {};

        // Inicializar contador para todos os admins
        admins.forEach(admin => {
            contadorReferencias[admin.id._serialized] = 0;
        });

        // Contar refer√™ncias existentes
        Object.values(referenciasClientes).forEach(ref => {
            if (ref.dataReferencia && new Date(ref.dataReferencia).toDateString() === hoje) {
                if (contadorReferencias.hasOwnProperty(ref.convidadoPor)) {
                    contadorReferencias[ref.convidadoPor]++;
                }
            }
        });

        // Encontrar admin com menos refer√™ncias
        let adminSelecionado = null;
        let menorContador = Infinity;

        for (const [adminId, contador] of Object.entries(contadorReferencias)) {
            console.log(`üìä Admin ${adminId}: ${contador} refer√™ncias hoje`);
            if (contador < menorContador) {
                menorContador = contador;
                adminSelecionado = adminId;
            }
        }

        if (adminSelecionado) {
            console.log(`üéØ SELECIONADO: ${adminSelecionado} (${menorContador} refer√™ncias hoje)`);
        }

        return adminSelecionado;

    } catch (error) {
        console.error('‚ùå Erro ao selecionar admin:', error);
        return null;
    }
}

// === CRIA√á√ÉO DE REFER√äNCIA AUTOM√ÅTICA INTELIGENTE ===
async function criarReferenciaAutomaticaInteligente(convidadorId, convidadoId, grupoId) {
    try {
        console.log(`ü§ñ INTELIGENTE: Criando refer√™ncia autom√°tica: ${convidadorId} ‚Üí ${convidadoId}`);

        // Verificar se o convidado j√° tem refer√™ncia
        if (referenciasClientes[convidadoId]) {
            console.log(`   ‚ö†Ô∏è INTELIGENTE: Cliente ${convidadoId} j√° tem refer√™ncia registrada`);
            return false;
        }

        // Obter nomes para logs mais claros
        let nomeConvidador = convidadorId;
        let nomeConvidado = convidadoId;

        try {
            const contactConvidador = await client.getContactById(convidadorId);
            const contactConvidado = await client.getContactById(convidadoId);
            nomeConvidador = contactConvidador.pushname || contactConvidador.name || convidadorId;
            nomeConvidado = contactConvidado.pushname || contactConvidado.name || convidadoId;
        } catch (error) {
            console.log(`   ‚ö†Ô∏è N√£o foi poss√≠vel obter nomes dos contatos`);
        }

        // Gerar c√≥digo √∫nico
        const codigo = gerarCodigoReferencia(convidadorId);

        // Criar refer√™ncia com indica√ß√£o de detec√ß√£o autom√°tica
        referenciasClientes[convidadoId] = {
            codigo: codigo,
            convidadoPor: convidadorId,
            nomeConvidador: nomeConvidador,
            nomeConvidado: nomeConvidado,
            dataRegistro: new Date().toISOString(),
            grupo: grupoId,
            comprasRealizadas: 0,
            bonusTotal: 0,
            metodoDeteccao: 'AUTO_INTELIGENTE', // Indica√ß√£o especial
            obs: 'Refer√™ncia criada por detec√ß√£o autom√°tica inteligente'
        };

        codigosReferencia[codigo] = convidadoId;

        console.log(`   ‚úÖ INTELIGENTE: Refer√™ncia criada: ${codigo} (${nomeConvidador} ‚Üí ${nomeConvidado})`);

        // Enviar notifica√ß√£o ao convidador com indica√ß√£o de auto-detec√ß√£o
        try {
            const mensagemNotificacao = `ü§ñ *REFER√äNCIA AUTOM√ÅTICA CRIADA*

üéØ **C√≥digo:** ${codigo}
üë§ **Novo cliente:** ${nomeConvidado}
üìÖ **Data:** ${new Date().toLocaleDateString('pt-PT')}

‚ö†Ô∏è *Esta refer√™ncia foi criada automaticamente*
Se n√£o foi voc√™ quem convidou este membro, digite *.cancelar ${codigo}* para cancelar.

üí∞ Ganhe 10MB por cada 100MT que ele gastar!`;

            await client.sendMessage(convidadorId, mensagemNotificacao);
            console.log(`   ‚úÖ INTELIGENTE: Notifica√ß√£o enviada ao convidador`);
        } catch (error) {
            console.error(`   ‚ùå Erro ao enviar notifica√ß√£o:`, error);
        }

        return true;

    } catch (error) {
        console.error('‚ùå Erro ao criar refer√™ncia autom√°tica inteligente:', error);
        return false;
    }
}

// Vers√£o backup da cria√ß√£o de refer√™ncia (com indica√ß√£o de incerteza) - DEPRECATED
async function criarReferenciaAutomaticaBackup(convidadorId, convidadoId, grupoId) {
    try {
        console.log(`üîó BACKUP: Criando refer√™ncia autom√°tica: ${convidadorId} ‚Üí ${convidadoId}`);

        // Verificar se o convidado j√° tem refer√™ncia
        if (referenciasClientes[convidadoId]) {
            console.log(`   ‚ö†Ô∏è BACKUP: Cliente ${convidadoId} j√° tem refer√™ncia registrada`);
            return false;
        }

        // Verificar se o convidador n√£o est√° tentando convidar a si mesmo
        if (convidadorId === convidadoId) {
            console.log(`   ‚ùå BACKUP: Convidador tentou convidar a si mesmo`);
            return false;
        }

        // Gerar c√≥digo √∫nico para esta refer√™ncia
        const codigo = gerarCodigoReferencia(convidadorId);

        // Registrar c√≥digo de refer√™ncia
        codigosReferencia[codigo] = {
            criador: convidadorId,
            dataCreacao: new Date().toISOString(),
            usado: true,
            usadoPor: convidadoId,
            dataUso: new Date().toISOString(),
            automatico: true,
            backup: true // Marcar como detectado por sistema backup
        };

        // Registrar refer√™ncia do cliente
        referenciasClientes[convidadoId] = {
            codigo: codigo,
            convidadoPor: convidadorId,
            dataRegistro: new Date().toISOString(),
            comprasRealizadas: 0,
            automatico: true,
            backup: true // Marcar como detectado por sistema backup
        };

        // Inicializar saldo de b√¥nus do convidador se n√£o existir
        if (!bonusSaldos[convidadorId]) {
            bonusSaldos[convidadorId] = {
                saldo: 0,
                detalhesReferencias: {},
                historicoSaques: [],
                totalReferencias: 0
            };
        }

        // Incrementar total de refer√™ncias
        bonusSaldos[convidadorId].totalReferencias++;

        // Inicializar detalhes da refer√™ncia
        bonusSaldos[convidadorId].detalhesReferencias[convidadoId] = {
            compras: 0,
            bonusGanho: 0,
            codigo: codigo,
            ativo: true,
            automatico: true,
            backup: true
        };

        // Salvar dados
        // Sistema de cache otimizado - sem salvamento em arquivos

        // Obter nomes dos participantes para notifica√ß√£o
        const nomeConvidador = await obterNomeContato(convidadorId);
        const nomeConvidado = await obterNomeContato(convidadoId);

        // Enviar notifica√ß√£o no grupo (com indica√ß√£o de estimativa)
        try {
            await client.sendMessage(grupoId,
                `üéâ *NOVO MEMBRO ADICIONADO!*\n\n` +
                `üëã Bem-vindo *${nomeConvidado}*!\n\n` +
                `üì¢ Sistema detectou prov√°vel adi√ß√£o por: *${nomeConvidador}*\n` +
                `üéÅ *${nomeConvidador}* ganhar√° *200MB* a cada compra de *${nomeConvidado}*!\n\n` +
                `üìã *Benef√≠cios:*\n` +
                `‚Ä¢ M√°ximo: 5 compras = 1000MB (1GB)\n` +
                `‚Ä¢ Saque m√≠nimo: 1000MB\n` +
                `‚Ä¢ Sistema autom√°tico ativo!\n\n` +
                `üí° _Continue convidando amigos para ganhar mais b√¥nus!_\n` +
                `‚ö†Ô∏è _Detec√ß√£o autom√°tica por monitoramento do sistema_`, {
                mentions: [convidadorId, convidadoId]
            });

            console.log(`‚úÖ BACKUP: Notifica√ß√£o de refer√™ncia autom√°tica enviada`);
        } catch (error) {
            console.error('‚ùå BACKUP: Erro ao enviar notifica√ß√£o de refer√™ncia:', error);
        }

        console.log(`‚úÖ BACKUP: Refer√™ncia autom√°tica criada: ${codigo} (${nomeConvidador} ‚Üí ${nomeConvidado})`);

        return {
            codigo: codigo,
            convidador: convidadorId,
            convidado: convidadoId,
            automatico: true,
            backup: true
        };

    } catch (error) {
        console.error('‚ùå BACKUP: Erro ao criar refer√™ncia autom√°tica:', error);
        return false;
    }
}

// Detectar novo membro pela primeira mensagem (backup)
async function detectarNovoMembro(grupoId, participantId, configGrupo) {
    // Esta fun√ß√£o agora √© s√≥ um backup caso o monitoramento autom√°tico falhe
    return;
}

// Registrar entrada de novo membro
async function registrarEntradaMembro(grupoId, participantId) {
    try {
        if (!membrosEntrada[grupoId]) {
            membrosEntrada[grupoId] = {};
        }
        
        membrosEntrada[grupoId][participantId] = new Date().toISOString();
        await salvarDadosMembros();
        
        console.log(`üìù Entrada registrada`);
    } catch (error) {
        console.error('‚ùå Erro ao registrar entrada de membro:', error);
    }
}

// Salvar dados de membros
async function salvarDadosMembros() {
    try {
        await fs.writeFile(ARQUIVO_MEMBROS, JSON.stringify(membrosEntrada));
    } catch (error) {
        console.error('‚ùå Erro ao salvar dados de membros:', error);
    }
}

// Enviar mensagem de boas-vindas para novos membros
async function enviarBoasVindas(grupoId, participantId) {
    try {
        console.log(`üëã Enviando boas-vindas`);
        
        // Registrar entrada do membro
        await registrarEntradaMembro(grupoId, participantId);
        
        // Obter informa√ß√µes do participante
        const contact = await client.getContactById(participantId);
        const nomeUsuario = contact.name || contact.pushname || participantId.replace('@c.us', '');
        
        // Obter configura√ß√£o do grupo
        const configGrupo = getConfiguracaoGrupo(grupoId);
        if (!configGrupo) {
            console.log(`‚ö†Ô∏è Grupo n√£o configurado`);
            return false;
        }
        
        // Usar mensagem personalizada do grupo ou padr√£o
        let mensagemBoasVindas = configGrupo.boasVindas || `üéâ *BOAS-VINDAS AO GRUPO!*

üëã Ol√° @NOME, seja bem-vindo!

ü§ñ *SISTEMA DE VENDAS 100% AUTOM√ÅTICO!*
üì± 1. Envie comprovante de pagamento aqui
‚ö° 2. Nosso sistema processa automaticamente
üìä 3. Participe do ranking di√°rio de compradores

üí∞ *COMANDOS √öTEIS:*
‚Ä¢ *tabela* - Ver pre√ßos de pacotes
‚Ä¢ *pagamento* - Ver formas de pagamento
‚Ä¢ *.ranking* - Ver ranking do grupo
‚Ä¢ *.meucodigo* - Gerar seu c√≥digo de refer√™ncia

üéÅ *GANHE MEGABYTES GR√ÅTIS!*
üíé Ganhe at√© *5GB GRATUITOS* convidando amigos!
üîë 1. Digite *.meucodigo* para gerar seu c√≥digo
üë• 2. Convide amigos para o grupo
üí∞ 3. Pe√ßa para usarem seu c√≥digo: *.convite SEUC√ìDIGO*
üéØ 4. Ganhe *200MB* a cada compra deles (primeiras 5 compras)

‚ö†Ô∏è *TEM C√ìDIGO DE ALGU√âM?*
Use: *.convite C√ìDIGO* para ativar a parceria!

üöÄ Vamos come√ßar? Qualquer d√∫vida, pergunte no grupo!`;
        
        // Substituir placeholder @NOME pelo nome real
        mensagemBoasVindas = mensagemBoasVindas.replace('@NOME', `@${participantId.replace('@c.us', '')}`);
        
        // Enviar mensagem com men√ß√£o
        await client.sendMessage(grupoId, mensagemBoasVindas, {
            mentions: [participantId]
        });
        
        console.log(`‚úÖ Boas-vindas enviadas`);
        return true;
        
    } catch (error) {
        console.error(`‚ùå Erro ao enviar boas-vindas para ${participantId}:`, error);
        return false;
    }
}

// Verificar se usu√°rio √© eleg√≠vel para usar c√≥digo (√∫ltimos 5 dias)
function isElegivelParaCodigo(participantId, grupoId) {
    try {
        if (!membrosEntrada[grupoId] || !membrosEntrada[grupoId][participantId]) {
            console.log(`‚ö†Ô∏è Membro sem registro de entrada`);
            return false; // Se n√£o tem registro, n√£o √© eleg√≠vel
        }
        
        const dataEntrada = new Date(membrosEntrada[grupoId][participantId]);
        const agora = new Date();
        const limite5Dias = 5 * 24 * 60 * 60 * 1000; // 5 dias em ms
        
        const tempoNoGrupo = agora - dataEntrada;
        const elegivelTempo = tempoNoGrupo <= limite5Dias;
        
        console.log(`üîç Verificando elegibilidade - ${Math.floor(tempoNoGrupo / (24 * 60 * 60 * 1000))} dias no grupo`);
        
        return elegivelTempo;
    } catch (error) {
        console.error('‚ùå Erro ao verificar elegibilidade:', error);
        return false;
    }
}

// Carregar dados persistentes
async function carregarDadosReferencia() {
    try {
        // Carregar c√≥digos
        try {
            const dados = await fs.readFile(ARQUIVO_CODIGOS, 'utf8');
            codigosReferencia = JSON.parse(dados);
            console.log(`üìã ${Object.keys(codigosReferencia).length} c√≥digos de refer√™ncia carregados`);
        } catch (e) {
            codigosReferencia = {};
        }

        // Carregar refer√™ncias  
        try {
            const dados = await fs.readFile(ARQUIVO_REFERENCIAS, 'utf8');
            referenciasClientes = JSON.parse(dados);
            console.log(`üë• ${Object.keys(referenciasClientes).length} refer√™ncias de clientes carregadas`);
        } catch (e) {
            referenciasClientes = {};
        }

        // Carregar b√¥nus
        try {
            const dados = await fs.readFile(ARQUIVO_BONUS, 'utf8');
            bonusSaldos = JSON.parse(dados);
            console.log(`üí∞ ${Object.keys(bonusSaldos).length} saldos de b√¥nus carregados`);
        } catch (e) {
            bonusSaldos = {};
        }

        // Carregar saques
        try {
            const dados = await fs.readFile(ARQUIVO_SAQUES, 'utf8');
            pedidosSaque = JSON.parse(dados);
            console.log(`üè¶ ${Object.keys(pedidosSaque).length} pedidos de saque carregados`);
        } catch (e) {
            pedidosSaque = {};
        }

        // Carregar dados de entrada de membros
        try {
            const dados = await fs.readFile(ARQUIVO_MEMBROS, 'utf8');
            membrosEntrada = JSON.parse(dados);
            console.log(`üë• ${Object.keys(membrosEntrada).length} grupos com dados de entrada carregados`);
        } catch (e) {
            membrosEntrada = {};
        }

    } catch (error) {
        console.error('‚ùå Erro ao carregar dados de refer√™ncia:', error);
    }
}

// Salvar dados persistentes
// === SISTEMA DE SALVAMENTO OTIMIZADO ===
let salvamentoPendente = false;

async function salvarDadosReferencia() {
    // Evitar salvamentos simult√¢neos
    if (salvamentoPendente) return;
    salvamentoPendente = true;

    try {
        // Usar Promise.allSettled para n√£o falhar se um arquivo der erro
        const resultados = await Promise.allSettled([
            fs.writeFile(ARQUIVO_CODIGOS, JSON.stringify(codigosReferencia)),
            fs.writeFile(ARQUIVO_REFERENCIAS, JSON.stringify(referenciasClientes)),
            fs.writeFile(ARQUIVO_BONUS, JSON.stringify(bonusSaldos)),
            fs.writeFile(ARQUIVO_SAQUES, JSON.stringify(pedidosSaque))
        ]);

        // Log apenas se houve falhas
        const falhas = resultados.filter(r => r.status === 'rejected');
        if (falhas.length > 0) {
            console.error('‚ùå Algumas escritas falharam:', falhas.length);
        }
    } catch (error) {
        console.error('‚ùå Erro ao salvar dados de refer√™ncia:', error);
    } finally {
        salvamentoPendente = false;
    }
}

// === CACHE DE TRANSA√á√ïES (SEM ARQUIVOS .TXT) ===
function adicionarTransacaoCache(dados, grupoId) {
    const key = `${grupoId}_${Date.now()}_${Math.random()}`;
    cacheTransacoes.set(key, {
        ...dados,
        timestamp: Date.now(),
        grupo_id: grupoId
    });

    // Limpar cache automaticamente (manter √∫ltimas 100 transa√ß√µes)
    if (cacheTransacoes.size > 100) {
        const keys = Array.from(cacheTransacoes.keys());
        const oldKeys = keys.slice(0, keys.length - 100);
        oldKeys.forEach(key => cacheTransacoes.delete(key));
    }
}

// Gerar c√≥digo √∫nico
function gerarCodigoReferencia(remetente) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let codigo;
    do {
        codigo = '';
        for (let i = 0; i < 6; i++) {
            codigo += chars.charAt(Math.floor(Math.random() * chars.length));
        }
    } while (codigosReferencia[codigo]);
    
    return codigo;
}

// Processar b√¥nus de compra
async function processarBonusCompra(remetenteCompra, valorCompra) {
    console.log(`üéÅ Verificando b√¥nus para compra`);
    
    // Verificar se cliente tem refer√™ncia
    const referencia = referenciasClientes[remetenteCompra];
    if (!referencia) {
        console.log(`   ‚ùå Cliente n√£o tem refer√™ncia registrada`);
        return false;
    }

    // Verificar se ainda pode ganhar b√¥nus (m√°ximo 5 compras)
    if (referencia.comprasRealizadas >= 5) {
        console.log(`   ‚ö†Ô∏è Cliente j√° fez 5 compras, sem mais b√¥nus`);
        return false;
    }

    // Atualizar contador de compras
    referencia.comprasRealizadas++;
    
    // Creditar b√¥nus ao convidador
    const convidador = referencia.convidadoPor;
    if (!bonusSaldos[convidador]) {
        bonusSaldos[convidador] = {
            saldo: 0,
            detalhesReferencias: {},
            historicoSaques: [],
            totalReferencias: 0
        };
    }

    // Adicionar 200MB ao saldo
    const bonusAtual = 200;
    bonusSaldos[convidador].saldo += bonusAtual;
    
    // Atualizar detalhes da refer√™ncia
    if (!bonusSaldos[convidador].detalhesReferencias[remetenteCompra]) {
        bonusSaldos[convidador].detalhesReferencias[remetenteCompra] = {
            compras: 0,
            bonusGanho: 0,
            codigo: referencia.codigo,
            ativo: true
        };
    }
    
    bonusSaldos[convidador].detalhesReferencias[remetenteCompra].compras = referencia.comprasRealizadas;
    bonusSaldos[convidador].detalhesReferencias[remetenteCompra].bonusGanho += bonusAtual;
    
    // Enviar notifica√ß√£o de b√¥nus por refer√™ncia
    try {
        const nomeComprador = await obterNomeContato(remetenteCompra);
        const nomeConvidador = await obterNomeContato(convidador);
        const novoSaldo = bonusSaldos[convidador].saldo;
        const novoSaldoFormatado = novoSaldo >= 1024 ? `${(novoSaldo/1024).toFixed(2)}GB` : `${novoSaldo}MB`;

        // Verificar se √© refer√™ncia autom√°tica ou manual
        const isAutomatico = referencia.automatico;
        const tipoReferencia = isAutomatico ? 'adicionou ao grupo' : `usou seu c√≥digo ${referencia.codigo}`;

        await client.sendMessage(message.from,
            `üéâ *B√îNUS DE REFER√äNCIA CREDITADO!*\n\n` +
            `üíé *${nomeConvidador}*, recebeste *${bonusAtual}MB* de b√¥nus!\n\n` +
            `üë§ *Referenciado:* ${nomeComprador}\n` +
            `üì¢ *Motivo:* ${nomeComprador} que voc√™ ${tipoReferencia} fez uma compra!\n` +
            `üõí *Compra:* ${referencia.comprasRealizadas}¬™ de 5\n` +
            `üí∞ *Novo saldo:* ${novoSaldoFormatado}\n\n` +
            `${novoSaldo >= 1024 ? 'üöÄ *J√° podes sacar!* Use: *.sacar*' : '‚è≥ *Continua a convidar amigos para ganhar mais b√¥nus!*'}`, {
            mentions: [convidador, remetenteCompra]
        });
    } catch (error) {
        console.error('‚ùå Erro ao enviar notifica√ß√£o de b√¥nus:', error);
    }

    // Salvar dados
    agendarSalvamento();
    
    console.log(`   ‚úÖ B√¥nus creditado: ${bonusAtual}MB (${referencia.comprasRealizadas}/5)`);
    
    return {
        convidador: convidador,
        bonusGanho: bonusAtual,
        compraAtual: referencia.comprasRealizadas,
        totalCompras: 5,
        novoSaldo: bonusSaldos[convidador].saldo
    };
}

// === CRIAR REFER√äNCIA AUTOM√ÅTICA ===
async function criarReferenciaAutomatica(convidadorId, convidadoId, grupoId) {
    try {
        console.log(`ü§ù Criando refer√™ncia autom√°tica: ${convidadorId} ‚Üí ${convidadoId}`);

        // Verificar se o convidado j√° tem refer√™ncia
        if (referenciasClientes[convidadoId]) {
            console.log(`   ‚ö†Ô∏è Cliente ${convidadoId} j√° tem refer√™ncia registrada`);
            return false;
        }

        // Verificar se o convidador n√£o est√° tentando convidar a si mesmo
        if (convidadorId === convidadoId) {
            console.log(`   ‚ùå Convidador tentou convidar a si mesmo`);
            return false;
        }

        // Gerar c√≥digo √∫nico para esta refer√™ncia (para compatibilidade com sistema antigo)
        const codigo = gerarCodigoReferencia(convidadorId);

        // Registrar c√≥digo de refer√™ncia
        codigosReferencia[codigo] = {
            criador: convidadorId,
            dataCreacao: new Date().toISOString(),
            usado: true,
            usadoPor: convidadoId,
            dataUso: new Date().toISOString(),
            automatico: true // Marcar como refer√™ncia autom√°tica
        };

        // Registrar refer√™ncia do cliente
        referenciasClientes[convidadoId] = {
            codigo: codigo,
            convidadoPor: convidadorId,
            dataRegistro: new Date().toISOString(),
            comprasRealizadas: 0,
            automatico: true // Marcar como refer√™ncia autom√°tica
        };

        // Inicializar saldo de b√¥nus do convidador se n√£o existir
        if (!bonusSaldos[convidadorId]) {
            bonusSaldos[convidadorId] = {
                saldo: 0,
                detalhesReferencias: {},
                historicoSaques: [],
                totalReferencias: 0
            };
        }

        // Incrementar total de refer√™ncias
        bonusSaldos[convidadorId].totalReferencias++;

        // Inicializar detalhes da refer√™ncia
        bonusSaldos[convidadorId].detalhesReferencias[convidadoId] = {
            compras: 0,
            bonusGanho: 0,
            codigo: codigo,
            ativo: true,
            automatico: true
        };

        // Salvar dados
        // Sistema de cache otimizado - sem salvamento em arquivos

        // Obter nomes dos participantes para notifica√ß√£o
        const nomeConvidador = await obterNomeContato(convidadorId);
        const nomeConvidado = await obterNomeContato(convidadoId);

        // Enviar notifica√ß√£o no grupo
        try {
            await client.sendMessage(grupoId,
                `üéâ *NOVO MEMBRO ADICIONADO!*\n\n` +
                `üëã Bem-vindo *${nomeConvidado}*!\n\n` +
                `üì¢ Adicionado por: *${nomeConvidador}*\n` +
                `üéÅ *${nomeConvidador}* ganhar√° *200MB* a cada compra de *${nomeConvidado}*!\n\n` +
                `üìã *Benef√≠cios:*\n` +
                `‚Ä¢ M√°ximo: 5 compras = 1000MB (1GB)\n` +
                `‚Ä¢ Saque m√≠nimo: 1000MB\n` +
                `‚Ä¢ Sistema autom√°tico ativo!\n\n` +
                `üí° _Continue convidando amigos para ganhar mais b√¥nus!_`, {
                mentions: [convidadorId, convidadoId]
            });

            console.log(`‚úÖ Notifica√ß√£o de refer√™ncia autom√°tica enviada`);
        } catch (error) {
            console.error('‚ùå Erro ao enviar notifica√ß√£o de refer√™ncia:', error);
        }

        console.log(`‚úÖ Refer√™ncia autom√°tica criada: ${codigo} (${nomeConvidador} ‚Üí ${nomeConvidado})`);

        return {
            codigo: codigo,
            convidador: convidadorId,
            convidado: convidadoId,
            automatico: true
        };

    } catch (error) {
        console.error('‚ùå Erro ao criar refer√™ncia autom√°tica:', error);
        return false;
    }
}

// === OBTER NOME DO CONTATO ===
async function obterNomeContato(contactId) {
    try {
        const contact = await client.getContactById(contactId);
        return contact.name || contact.pushname || contactId.replace('@c.us', '');
    } catch (error) {
        console.error(`‚ùå Erro ao obter nome do contato ${contactId}:`, error);
        return contactId.replace('@c.us', '');
    }
}

// === FUN√á√ÉO PARA NORMALIZAR VALORES ===
function normalizarValor(valor) {
    if (typeof valor === 'number') return valor;
    if (typeof valor === 'string') {
        // Remover caracteres n√£o num√©ricos exceto ponto e v√≠rgula
        let valorLimpo = valor.replace(/[^\d.,]/g, '');

        // Converter v√≠rgula para ponto se for separador decimal
        if (valorLimpo.includes(',') && !valorLimpo.includes('.')) {
            const partes = valorLimpo.split(',');
            if (partes.length === 2 && partes[1].length <= 2) {
                valorLimpo = partes[0] + '.' + partes[1];
            } else {
                valorLimpo = valorLimpo.replace(/,/g, '');
            }
        } else if (valorLimpo.includes(',')) {
            // Se tem tanto v√≠rgula quanto ponto, remover v√≠rgulas (separadores de milhares)
            valorLimpo = valorLimpo.replace(/,/g, '');
        }

        const numeroFinal = parseFloat(valorLimpo) || 0;
        console.log(`üîß normalizarValor: "${valor}" ‚Üí "${valorLimpo}" ‚Üí ${numeroFinal}`);
        return numeroFinal;
    }
    return 0;
}

// === FUN√á√ÉO PARA CALCULAR VALOR DO PEDIDO ===
function calcularValorPedido(megas, precosGrupo) {
    const megasNum = parseInt(megas) || 0;
    if (precosGrupo && precosGrupo[megasNum]) {
        return precosGrupo[megasNum];
    }
    // Fallback: calcular valor baseado em pre√ßo por MB (assumindo ~12.5MT/GB)
    const valorPorMB = 12.5 / 1024; // ~0.012MT por MB
    return Math.round(megasNum * valorPorMB);
}

// === FUN√á√ÉO PARA VERIFICAR PAGAMENTO ===
async function verificarPagamentoIndividual(referencia, valorEsperado) {
    try {
        const valorNormalizado = normalizarValor(valorEsperado);

        console.log(`üîç REVENDEDORES: Verificando pagamento ${referencia} - ${valorNormalizado}MT (original: ${valorEsperado})`);

        // Primeira tentativa: busca pelo valor exato (otimizado)
        let response = await axios.post(PAGAMENTOS_CONFIG.scriptUrl, {
            action: "buscar_por_referencia",
            referencia: referencia,
            valor: valorNormalizado
        }, {
            timeout: PAGAMENTOS_CONFIG.timeout, // Mant√©m timeout do Google Sheets
            headers: {
                'Content-Type': 'application/json',
                'Connection': 'keep-alive',
                'Cache-Control': 'no-cache'
            },
            maxRedirects: 3,
            validateStatus: (status) => status < 500
        });

        if (response.data && response.data.encontrado) {
            console.log(`‚úÖ REVENDEDORES: Pagamento encontrado (valor exato)!`);
            return true;
        }

        // Segunda tentativa: busca apenas por refer√™ncia (com toler√¢ncia de valor)
        console.log(`üîç REVENDEDORES: Tentando busca apenas por refer√™ncia...`);
        response = await axios.post(PAGAMENTOS_CONFIG.scriptUrl, {
            action: "buscar_por_referencia_only",
            referencia: referencia
        }, {
            timeout: PAGAMENTOS_CONFIG.timeout, // Mant√©m timeout do Google Sheets
            headers: {
                'Content-Type': 'application/json',
                'Connection': 'keep-alive',
                'Cache-Control': 'no-cache'
            },
            maxRedirects: 3,
            validateStatus: (status) => status < 500
        });

        if (response.data && response.data.encontrado) {
            const valorEncontrado = parseFloat(response.data.valor || 0);
            const diferenca = Math.abs(valorEncontrado - valorNormalizado);
            const tolerancia = Math.max(1, valorNormalizado * 0.05); // 5% ou m√≠n 1MT

            console.log(`üîç REVENDEDORES: Valor encontrado: ${valorEncontrado}MT vs esperado: ${valorNormalizado}MT (diff: ${diferenca.toFixed(2)}MT, toler√¢ncia: ${tolerancia.toFixed(2)}MT)`);

            if (diferenca <= tolerancia) {
                console.log(`‚úÖ REVENDEDORES: Pagamento aceito com toler√¢ncia!`);
                return true;
            } else {
                console.log(`‚ùå REVENDEDORES: Diferen√ßa muito grande entre valores`);
            }
        }

        console.log(`‚ùå REVENDEDORES: Pagamento n√£o encontrado`);
        return false;

    } catch (error) {
        console.error(`‚ùå REVENDEDORES: Erro ao verificar pagamento:`, error.message);
        return false;
    }
}

// Base de dados de compradores
let historicoCompradores = {};
const ARQUIVO_HISTORICO = 'historico_compradores.json';

// Cache de administradores dos grupos
let adminCache = {};

// === FUN√á√ïES DO SISTEMA DE RETRY SILENCIOSO ===

// Carregar pagamentos pendentes do arquivo
async function carregarPagamentosPendentes() {
    try {
        const dados = await fs.readFile(ARQUIVO_PAGAMENTOS_PENDENTES, 'utf8');
        pagamentosPendentes = JSON.parse(dados);
        console.log(`üíæ RETRY: ${Object.keys(pagamentosPendentes).length} pagamentos pendentes carregados`);
    } catch (error) {
        console.log(`üíæ RETRY: Nenhum arquivo de pend√™ncias encontrado - iniciando limpo`);
        pagamentosPendentes = {};
    }
}

// Salvar pagamentos pendentes no arquivo
async function salvarPagamentosPendentes() {
    try {
        await fs.writeFile(ARQUIVO_PAGAMENTOS_PENDENTES, JSON.stringify(pagamentosPendentes, null, 2));
        console.log(`üíæ RETRY: Pagamentos pendentes salvos - ${Object.keys(pagamentosPendentes).length} pend√™ncias`);
    } catch (error) {
        console.error(`‚ùå RETRY: Erro ao salvar pend√™ncias:`, error);
    }
}

// Adicionar pagamento para retry
async function adicionarPagamentoPendente(referencia, valorComprovante, dadosCompletos, message, resultadoIA) {
    const id = `${referencia}_${Date.now()}`;
    const agora = Date.now();

    const pendencia = {
        id: id,
        referencia: referencia,
        valorComprovante: valorComprovante,
        dadosCompletos: dadosCompletos,
        timestamp: agora,
        expira: agora + RETRY_TIMEOUT,
        tentativas: 0,
        // Dados para resposta
        chatId: message.from,
        messageData: {
            author: message.author || message.from,
            notifyName: message._data?.notifyName || 'N/A'
        },
        resultadoIA: resultadoIA
    };

    pagamentosPendentes[id] = pendencia;
    await salvarPagamentosPendentes();

    console.log(`‚è≥ RETRY: Pagamento ${referencia} adicionado √† fila de retry`);

    // Iniciar timer se n√£o existe
    if (!timerRetryPagamentos) {
        iniciarTimerRetryPagamentos();
    }

    return id;
}

// Remover pagamento pendente
async function removerPagamentoPendente(id) {
    if (pagamentosPendentes[id]) {
        delete pagamentosPendentes[id];
        await salvarPagamentosPendentes();
        console.log(`‚úÖ RETRY: Pagamento ${id} removido da fila`);
    }
}

// Iniciar timer de verifica√ß√£o peri√≥dica
function iniciarTimerRetryPagamentos() {
    if (timerRetryPagamentos) {
        clearInterval(timerRetryPagamentos);
    }

    console.log(`üîÑ RETRY: Iniciando verifica√ß√£o a cada ${RETRY_INTERVAL/1000}s`);

    timerRetryPagamentos = setInterval(async () => {
        await verificarPagamentosPendentes();
    }, RETRY_INTERVAL);
}

// Parar timer de verifica√ß√£o
function pararTimerRetryPagamentos() {
    if (timerRetryPagamentos) {
        clearInterval(timerRetryPagamentos);
        timerRetryPagamentos = null;
        console.log(`‚èπÔ∏è RETRY: Timer de verifica√ß√£o parado`);
    }
}

// Verificar todos os pagamentos pendentes
async function verificarPagamentosPendentes() {
    const agora = Date.now();
    const pendencias = Object.values(pagamentosPendentes);

    if (pendencias.length === 0) {
        pararTimerRetryPagamentos();
        return;
    }

    console.log(`üîç RETRY: Verificando ${pendencias.length} pagamentos pendentes...`);

    for (const pendencia of pendencias) {
        // Verificar se expirou
        if (agora > pendencia.expira) {
            console.log(`‚è∞ RETRY: Pagamento ${pendencia.referencia} expirou ap√≥s 30min`);
            await removerPagamentoPendente(pendencia.id);
            continue;
        }

        // Verificar pagamento
        pendencia.tentativas++;
        console.log(`üîç RETRY: Tentativa ${pendencia.tentativas} para ${pendencia.referencia}`);

        const pagamentoConfirmado = await verificarPagamentoIndividual(pendencia.referencia, pendencia.valorComprovante);

        if (pagamentoConfirmado) {
            console.log(`‚úÖ RETRY: Pagamento ${pendencia.referencia} confirmado! Processando...`);
            await processarPagamentoConfirmado(pendencia);
            await removerPagamentoPendente(pendencia.id);
        }
    }

    // Se n√£o h√° mais pend√™ncias, parar timer
    if (Object.keys(pagamentosPendentes).length === 0) {
        pararTimerRetryPagamentos();
    }
}

// Processar pagamento confirmado ap√≥s retry
async function processarPagamentoConfirmado(pendencia) {
    try {
        const { dadosCompletos, chatId, messageData, resultadoIA } = pendencia;
        const [referencia, megas, numero] = dadosCompletos.split('|');

        // === VERIFICA√á√ÉO DE VALOR MUITO BAIXO ===
        if (megas === 'VALOR_MUITO_BAIXO') {
            console.log(`‚ùå VALOR MUITO BAIXO no pagamento confirmado: ${referencia}`);

            const configGrupo = getConfiguracaoGrupo(chatId);
            const precos = ia.extrairPrecosTabela(configGrupo.tabela);
            const menorPreco = Math.min(...precos.map(p => p.preco));

            await client.sendMessage(chatId,
                `‚ùå *Valor muito baixo*\n\n` +
                `üí≥ O valor transferido est√° abaixo do pacote m√≠nimo dispon√≠vel.\n\n` +
                `üìã *Pacote mais barato:* ${menorPreco}MT\n\n` +
                `üí° *Para ver todos os pacotes:* digite "tabela"`
            );
            return;
        }

        // Enviar mensagem de confirma√ß√£o
        await client.sendMessage(chatId,
            `‚úÖ *PAGAMENTO CONFIRMADO!*\n\n` +
            `üí∞ Refer√™ncia: ${referencia}\n` +
            `üìä Megas: ${megas} MB\n` +
            `üì± N√∫mero: ${numero}\n` +
            `üí≥ Valor: ${pendencia.valorComprovante}MT\n\n` +
            `üéâ Pedido est√° sendo processado!\n` +
            `‚è∞ ${new Date().toLocaleString('pt-BR')}`
        );

        // Processar b√¥nus de refer√™ncia
        const bonusInfo = await processarBonusCompra(chatId, megas);

        // Enviar para Tasker/Planilha
        const resultadoEnvio = await enviarParaTasker(referencia, megas, numero, chatId, messageData.author);

        // Verificar duplicatas
        if (resultadoEnvio && resultadoEnvio.duplicado) {
            await client.sendMessage(chatId,
                `‚ö†Ô∏è *AVISO: PEDIDO DUPLICADO*\n\n` +
                `Este pedido ${resultadoEnvio.status_existente === 'PROCESSADO' ? 'j√° foi processado' : 'est√° na fila'}.\n` +
                `Status: ${resultadoEnvio.status_existente}`
            );
            return;
        }

        // Registrar comprador
        await registrarComprador(chatId, numero, messageData.notifyName, megas);

        // Encaminhamento se necess√°rio
        if (chatId === ENCAMINHAMENTO_CONFIG.grupoOrigem) {
            const timestampMensagem = new Date().toLocaleString('pt-BR');
            adicionarNaFila(dadosCompletos, messageData.author, 'Retry Confirmado', timestampMensagem);
        }

        console.log(`‚úÖ RETRY: Pagamento ${pendencia.referencia} processado com sucesso`);

    } catch (error) {
        console.error(`‚ùå RETRY: Erro ao processar pagamento confirmado:`, error);
    }
}

// Cache para evitar logs repetidos de grupos
let gruposLogados = new Set();

// === COMANDOS CUSTOMIZADOS ===
let comandosCustomizados = {};
const ARQUIVO_COMANDOS = 'comandos_customizados.json';

// Configura√ß√£o de administradores GLOBAIS
const ADMINISTRADORES_GLOBAIS = [
    '258874100607@c.us',
    '258871112049@c.us',
    '258845356399@c.us', 
    '258840326152@c.us', 
    '258852118624@c.us',
    '23450974470333@lid'   // ID interno do WhatsApp para 852118624
    // Removido temporariamente para testar verifica√ß√£o de grupo: '245075749638206@lid'
];

// Mapeamento de IDs internos (@lid) para n√∫meros reais (@c.us)
const MAPEAMENTO_IDS = {
    '23450974470333@lid': '258852118624@c.us',  // Seu ID
    '245075749638206@lid': null  // Ser√° identificado automaticamente
};

// === CONFIGURA√á√ÉO DE MODERA√á√ÉO ===
const MODERACAO_CONFIG = {
    ativado: {
        '258820749141-1441573529@g.us': true,
        '120363152151047451@g.us': true,
        '258840161370-1471468657@g.us': true
    },
    detectarLinks: true,
    apagarMensagem: true,
    removerUsuario: true,
    excecoes: [
        '258861645968@c.us',
        '258871112049@c.us', 
        '258852118624@c.us'
    ]
};

// Configura√ß√£o para cada grupo
const CONFIGURACAO_GRUPOS = {
    '258820749141-1441573529@g.us': {
        nome: 'Data Store - Vodacom',
        boasVindas: `üéâ *BOAS-VINDAS AO GRUPO!*

üëã Ol√° @NOME, seja bem-vindo!

ü§ñ *SISTEMA DE VENDAS 100% AUTOM√ÅTICO!*
üì± 1. Envie comprovante de pagamento aqui
‚ö° 2. Nosso sistema processa automaticamente
üìä 3. Participe do ranking di√°rio de compradores

üí∞ *COMANDOS √öTEIS:*
‚Ä¢ *tabela* - Ver pre√ßos de pacotes
‚Ä¢ *pagamento* - Ver formas de pagamento
‚Ä¢ *.ranking* - Ver ranking do grupo
‚Ä¢ *.meucodigo* - Gerar c√≥digo de refer√™ncia

üéÅ *SISTEMA DE REFER√äNCIAS:*
Voc√™ tem c√≥digo de refer√™ncia de algu√©m?
Use: *.convite C√ìDIGO* para ativar!

‚ú® *IMPORTANTE:* C√≥digos de refer√™ncia s√≥ funcionam para membros que entraram nos √∫ltimos 5 dias!

üöÄ Vamos come√ßar? Qualquer d√∫vida, pergunte no grupo!`,
        tabela: `SUPER PROMO√á√ÉO  DE üõú‚ìÇEGAS‚úÖ VODACOM A MELHOR PRE√áO DO MERCADO - 04-05/09/2025

üìÜ PACOTES DI√ÅRIOS
512MB üíé 10MT üíµüíΩ
900MB üíé 15MT üíµüíΩ
1080MB üíé 17MT üíµüíΩ
1200MB üíé 20MT üíµüíΩ
2150MB üíé 34MT üíµüíΩ
3200MB üíé 51MT üíµüíΩ
4250MB üíé 68MT üíµüíΩ
5350MB üíé 85MT üíµüíΩ
10240MB üíé 160MT üíµüíΩ
20480MB üíé 320MT üíµüíΩ

üìÖPACOTE DI√ÅRIO PREMIUM (3 Dias)
2000 + 700MB üíé 44MT üíµüíΩ
3000 + 700MB üíé 66MT üíµüíΩ
4000 + 700MB üíé 88MT üíµüíΩ
5000 + 700MB üíé 109MT üíµüíΩ
6000 + 700MB üíé 133MT üíµüíΩ
7000 + 700MB üíé 149MT üíµüíΩ
10000 + 700MB üíé 219MT üíµüíΩ

üìÖ PACOTES SEMANAIS(5 Dias)
3072 + 700MB üíé 105MT üíµüíΩ
5120 + 700MB üíé 155MT üíµüíΩ
10240 + 700MB üíé 300MT üíµüíΩ
15360 + 700MB üíé 455MT üíµüíΩ
20480 + 700MB üíé 600MT üíµüíΩ

üìÖ PACOTES MENSAIS
12.8GB üíé 270MT üíµüíΩ
22.8GB üíé 435MT üíµüíΩ
32.8GB üíé 605MT üíµüíΩ
52.8GB üíé 945MT üíµüíΩ
102.8GB¬†üíé¬†1605MT¬†üíµüíΩ


PACOTES DIAMANTE MENSAIS
Chamadas + SMS ilimitadas + 11GB üíé 460MT üíµ
Chamadas + SMS ilimitadas + 24GB üíé 820MT üíµ
Chamadas + SMS ilimitadas + 50GB üíé 1550MT üíµ
Chamadas + SMS ilimitadas + 100GB üíé 2250MT üíµ

‚ö† NB: V√°lido apenas¬†para¬†Vodacom
`,

        pagamento: `FORMAS DE PAGAMENTO ATUALIZADAS
 
1- M-PESA 
N√öMERO: 848715208
NOME:  NATACHA ALICE

N√öMERO: 871112049
NOME: NATACHA ALICE`
    },

    '120363402160265624@g.us': {
        nome: 'Treinamento IA',
        tabela: `PROMO√á√ÉO DE üõú‚ìÇEGAS‚úÖ VODACOM A MELHOR PRE√áO DO MERCADO 
üìÜ PACOTES DI√ÅRIOS 
512MB üíé 10MT üíµüíΩ
850MB üíé 15MT üíµüíΩ
1024MB üíé 17MT üíµüíΩ
1200MB üíé 20MT üíµüíΩ
2048MB üíé 34MT üíµüíΩ
3072MB üíé 51MT üíµüíΩ
4096MB üíé 68MT üíµüíΩ
5120MB üíé 85MT üíµüíΩ
10240MB üíé 170MT üíµüíΩ
20480MB üíé 340MT üíµüíΩ

üìÖPACOTE DI√ÅRIO PREMIUM (3 Dias)
2000 + 700MB üíé 44MT üíµüíΩ
3000 + 700MB üíé 66MT üíµüíΩ
4000 + 700MB üíé 88MT üíµüíΩ
5000 + 700MB üíé 109MT üíµüíΩ
6000 + 700MB üíé 133MT üíµüíΩ
7000 + 700MB üíé 149MT üíµüíΩ
10000 + 700MB üíé 219MT üíµüíΩ

üìÖ PACOTES SEMANAIS(5 Dias)
3072 + 700MB üíé 105MT üíµüíΩ
5120 + 700MB üíé 155MT üíµüíΩ
10240 + 700MB üíé 300MT üíµüíΩ
15360 + 700MB üíé 455MT üíµüíΩ
20480 + 700MB üíé 600MT üíµüíΩ

üìÖ PACOTES MENSAIS
‚ö† Para ativar estes pacotes, o Txuna Cr√©dito n√£o pode estar ativo
12.8GB üíé 255MT üíµüíΩ
22.8GB üíé 435MT üíµüíΩ
32.8GB üíé 605MT üíµüíΩ
52.8GB üíé 945MT üíµüíΩ
102.8GB üíé 1605MT üíµüíΩ

PACOTES DIAMANTE MENSAIS
Chamadas + SMS ilimitadas + 12GB üíé 460MT üíµ
Chamadas + SMS ilimitadas + 24GB üíé 820MT üíµ
Chamadas + SMS ilimitadas + 50GB üíé 1550MT üíµ
Chamadas + SMS ilimitadas + 100GB üíé 2250MT üíµ
‚ö† NB: V√°lido apenas para Vodacom


üöÄ Oferecemos sempre¬†o¬†melhor!*

`,

        pagamento: `üÖºüÖ¥üÖ∂üÖ∞üÜÇ üÖøüÜÅüÖæüÖºüÖæ    üí≥ üõí‚õî FORMAS DE PAGAMENTO:‚õîüõíüí≥


      ‚óè E-MOLA: 868019487üõí
      ‚óè M-PESA: 851841990üõí

NOME:   Alice Armando Nhaquilaüìù

!¬° üìÇ‚õîüõí ENVIE O SEU COMPROVATIVO NO GRUPO,  JUNTAMENTE COM O N√öMERO QUE VAI RECEBER¬†OS¬†MB‚úÖ‚õîüõí
`
    },

    '258840161370-1471468657@g.us': {
        nome: 'Venda Autom√°tica 24/7',
        tabela: `TABELA ATUALIZADA
___________________________

 PACOTE DI√ÅRIO B√ÅSICO( 24H‚è±) 
1024MB    - 17,00 MT
1200MB    - 20,00 MT
2048MB   - 34,00 MT
2200MB    - 40,00 MT
3096MB    - 51,00 MT
4096MB    - 68,00 MT
5120MB     - 85,00 MT
6144MB    - 102,00 MT
7168MB    - 119,00 MT
8192MB    - 136,00 MT
9144MB    - 153,00 MT
10240MB  - 170,00 MT

 PACOTE DI√ÅRIO PREMIUM ( 3 DIAS üóì) 
Megabyte Renov√°veis! 
2000MB  - 44,00 MT
3000MB  - 66,00 MT
4000MB  - 88,00 MT
5000MB - 109,00 MT
6000MB  - 133,00 MT
7000MB  - 149,00 MT
10000MB  - 219,00 MT

PACOTE SEMANAL B√ÅSICO (5 Diasüóì)
Megabyte Renov√°veis!
1700MB - 45,00MT
2900MB - 80,00MT
3400MB - 110,00MT
5500MB - 150,00MT
7800MB - 200,00MT
11400MB - 300,00MT 

 PACOTE SEMANAL PREMIUM ( 15 DIAS üóì ) 
Megabyte Renov√°veis!
3000MB - 100,00 MT
5000MB - 149,00 MT
8000MB - 201,00 MT
10000MB - 231,00 MT
20000MB - 352,00 MT

PACOTE MENSAL PREMIUM (30 diasüóì)
Megabyte Renov√°veis!
3198MB   - 104,00MT
5298MB   - 184,00MT
8398MB   - 229,00MT
10498MB   - 254,00MT
12598MB   - 294,00MT
15698MB   - 349,00MT
18798MB   - 414,00MT
20898MB   - 468,00MT
25998MB   - 529,00MT

PACOTE MENSAL EXCLUSIVO (30 diasüóì)
N√£o pode ter xtuna cr√©dito
32.8GB   - 649,00MT
51.2GB   - 1049,00MT
60.2GB   - 124900MT
80.2GB   - 1449,00MT
100.2GB   - 1700,00MT

üî¥üî¥ VODACOM
‚ûñChamadas +SMS ILIMITADAS ‚ûñp/todas as redes +GB‚ûñ

‚ûñ SEMANAL (7dias)‚ûñ
280mt = Ilimitado+ 7.5GB

Mensal(30dias):
450MT - Ilimitado + 11.5GB.
500MT - Ilimitado + 14.5GB.
700MT - Ilimitado + 26.5GB.
1000MT - Ilimitado + 37.5GB.
1500MT - Ilimitado + 53.5GB
2150MT - Ilimitado + 102.5GB

PARA OS PACOTES MENSAIS, N√ÉO PODE TER TXUNA CR√âDITO.

üü†üü† MOVITEL
‚ûñChamadas +SMS ILIMITADAS ‚ûñp/todas as redes +GB‚ûñ

‚ûñ SEMANAL (7dias)‚ûñ
280mt = Ilimitado+ 7.1GB

‚ûñ MENSAL (30dias)‚ûñ p./tds redes
450mt = Ilimitado+ 9GB
950mt = Ilimitado+ 23GB
1450mt = Ilimitado+ 38GB
1700mt = Ilimitado+ 46GB
1900mt = Ilimitado+ 53GB
2400mt = ilimitado+ 68GB

Importante üö®: Envie o valor que consta¬†na¬†tabela!
`,

        pagamento: `‚ï≠‚îÅ‚îÅ‚îÅ‚îõ üí∏  Ôº¶ÔºØÔº≤Ôº≠Ôº°Ôº≥ Ôº§Ôº• Ôº∞Ôº°ÔºßÔº°Ôº≠Ôº•ÔºÆÔº¥ÔºØ: 
‚îÉ
‚îÉ ü™ô E-Mola: (Gl√≥ria) üë©‚Äçüíª
‚îÉ     860186270  
‚îÉ
‚îÉ ü™ô M-Pesa:  (Leonor)üë®‚Äçüíª
‚îÉ     857451196  
‚îÉ
‚îÉ
‚îÉ ‚ö† IMPORTANTE:  
‚îÉ     ‚ñ™ Envie o comprovativo em forma de mensagem e o n√∫mero para receber r√°pido!
‚îÉ
‚îÉ‚îÉ
‚ï∞‚ö† NB: V√°lido apenas para Vodacom‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  
       üöÄ O futuro √© agora. Vamos?`
    },
    '120363228868368923@g.us': {
    nome: 'VENDA DE MEGAS',
    tabela: `ùóßùóÆùóØùó≤ùóπùóÆ ùóÆùó∞ùòÅùòÇùóÆùóπùó∂ùòáùóÆdo ùó±ùó≤ ùòÉùóºùó±ùóÆùó∞ùóºùó∫


ùóóùó∂ùóÆùóøùó∂ùóº
‚úÖPODE TER TXUNA CR√âDITO


ùü≠024Mùóï__ùü≠ùü¥ ùó†ùóß
ùüÆ048Mùóï__ùüØ6ùó†ùóß
ùüØ072MB ___ ùü±4ùó†ùóß
ùü∞096MB__ùü≥0ùó†ùóß
ùü±120Mùóï ___ ùüµùü¨ùó†ùóß
ùü≠0240MB___ùü≠8ùü¨ùó†ùóß

ùó¶ùó≤ùó∫ùóÆùóªùóÆùóπ
‚ùé N√ÉO PODE TER TXUNA CR√âDITO

ùü∞5ùó†ùóß__ùü≠ùü≥41Mùóï
80ùó†ùóß__ùüÆùüµ70Mùóï
90ùó†ùóß__ùüØùü∞82Mùóï
ùü≠40ùó†ùóß___ùü±325Mùóï
ùü≠80ùó†ùóß___ùü≥270Mùóï

ùêåùêûùêßùê¨ùêöùê•
‚ùé N√ÉO PODE TER TXUNA CR√âDITO

ùü≤057Mùóï__ùüÆùü¨ùü¨ùó†ùóß
ùü¥057MB__ùüÆùüØùü¨ùó†ùóß
ùü≠ùü¨057MB___ùüÆ6ùü¨ùó†ùóß
ùüÆùü¨057Mùóï___ùü∞ùü±ùü¨ùó†ùóß

ùóóùó∂ùóÆùó∫ùóÆùóªùòÅùó≤ ùó±ùó≤ ùó©ùóºùó±ùóÆùó∞ùóºùó∫
‚ùé N√ÉO PODE TER TXUNA CR√âDITO

ùó†ùó≤ùóªùòÄùóÆùóπ (ùüØùü¨ùóóùó∂ùóÆùòÄ)
‚ø°ùü∞50ùó†ùòÅ =ùóñùóµùóÆùó∫ùóÆùó±ùóÆùòÄ ùó∂ùóπùó∂ùó∫ùó∂ùòÅùóÆùó±ùóÆùòÄ +ùü≠ùü≠ùóöùóï+ùó¶ùó†ùó¶
‚ø¢ùü±50 =ùóñùóµùóÆùó∫ùóÆùó±ùóÆùòÄ ùó∂ùóπùó∂ùó∫ùó∂ùòÅùóÆùó±ùóÆùòÄ +ùü≠ùü±ùóöùóï+ùó¶ùó†ùó¶
‚ø£ùü≥50=ùóñùóµùóÆùó∫ùóÆùó±ùóÆùòÄ ùó∂ùóπùó∂ùó∫ùó∂ùòÅùóÆùó±ùóÆùòÄ +ùüÆùü±ùóöùóï+ùó¶ùó†ùó¶
‚ø§ùü≠050=ùóñùóµùóÆùó∫ùóÆùó±ùóÆùòÄ ùó∂ùóπùó∂ùó∫ùó∂ùòÅùóÆùó±ùóÆùòÄ +ùü∞ùüÆùóöùóï+ùó¶ùó†ùó¶

`,
    pagamento: `üí≥ FORMAS/ PAGAMENTOS :‚§µ
- üì≤ ùóò-ùó†ùó¢ùóüùóî: 868440408:
- *JOSE TOMAS*
- üì≤ ùó†-ùó£ùóòùó¶ùóî 850189315:
- *JOSE TOM√ÅS*

üì© Envie o seu comprovantivo no grupo, juntamente com o n√∫mero que vai receber¬†os¬†dados.`
},'120363022366545020@g.us': {
        nome: 'Megas VIP',
        boasVindas: `üéâ *BOAS-VINDAS AO MEGAS VIP!*

üëã Ol√° @NOME, seja bem-vindo ao melhor grupo de internet!

ü§ñ *SISTEMA 100% AUTOM√ÅTICO - SEM DEMORAS!*
‚ö° Envie seu comprovante e receba instantaneamente
üèÜ Sistema mais r√°pido de Mo√ßambique
üìä Ranking di√°rio com pr√™mios especiais

üí∞ *COMANDOS:*
‚Ä¢ *tabela* - Ver pre√ßos VIP
‚Ä¢ *pagamento* - Formas de pagamento
‚Ä¢ *.ranking* - Ver seu ranking

üéÅ *B√îNUS DE REFER√äNCIA:*
Indique amigos e ganhe MB extras!
Use: *.meucodigo* para seu c√≥digo

üöÄ *VANTAGENS EXCLUSIVAS:*
‚úÖ Processamento em tempo real
‚úÖ Suporte 24/7
‚úÖ Pre√ßos especiais
‚úÖ Sem taxas escondidas

Bem-vindo √† fam√≠lia VIP! üî•`,
        tabela: `üö®üì¢MEGABYTES DA VODACOMüì¢üö®

üì¶PACOTE DI√ÅRIOüì¶

üõú512MB = 10MT
üõú768MB = 16MT
üõú1024MB = 18MT
üõú1280MB = 26MT
üõú2048MB = 36MT
üõú3072MB = 54MT
üõú4096MB = 72MT
üõú5120MB = 90MT
üõú6144MB = 108MB
üõú7168MB = 126MB
üõú8192MB = 144MB
üõú9216MB = 162MB
üõú10240MB = 180MT

PACOTE SEMANALüõíüì¶
‚ö† Vai receber 100MB por dia durante 6 dias, totalizando +0.6GB. ‚ö†

üõú2.0GB = 65MT
üõú3.0GB = 85MT
üõú5.0GB = 130MT
üõú7.0GB = 175MT 
üõú10.0GB = 265MT
üõú14.0GB = 362MT
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üö®Para pacote MENSAL √© s√≥ entrar em contato com o n√∫mero abaixo üëáüëáüö®

https://wa.me/258865627840?text=%20Quero%20pacote%20mensal?%20
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üö®Para pacote ILIMITADO √© s√≥ entrar em contato com o n√∫mero abaixo üëáüëáüö®
https://wa.me/258865627840?text=%20Quero%20pacote%20ilimitado?%20
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

FORMA DE PAGAMENTO:
üí≥üí∏
M-Pesa: 853529033 üì±
- Erc√≠lio Uanela 
e-Mola: 865627840 üì±
- Alexandre Uanela 

Adquira j√° os teus megas com seguran√ßa, confian√ßa¬†e¬†rapidez!üö®üî•
`,

        pagamento: `FORMAS DE PAGAMENTOüí∞üí∂

üìå M-PESA: 853529033 
   Nome: Erc√≠lio Uanela 

üìå E-MOLA: 865627840 
    Nome: Alexandre Uanela  

üìÆ Ap√≥s a transfer√™ncia enviei o comprovante em forma do c√≥pia junto com seu n√∫mero.
 
> 1. üö®N√£o mande comprovativo em formato de imagem üì∏üö®

> 2.  üö® N√£o mande valor que n√£o t√™m na tabelaüö®

üöÄ O futuro √© agora!¬†Vamos?¬†üî•üõí
`
    },
    '120363023150137820@g.us': {
        nome: 'NET VODACOM ACESS√çVEL',
        tabela: `üö®üì± INTERNET VODACOM COM OS MELHORES PRE√áOS!
Mega Promo√ß√£o da NET DA VODACOM ACESS√çVEL ‚Äî Conecte-se j√°! üöÄ

üìÖ PACOTES DI√ÅRIOS (24h de validade)

‚úÖ 1GB - 17MT
‚úÖ 2GB - 34MT
‚úÖ 3GB - 51MT
‚úÖ 4GB - 68MT
‚úÖ 5GB - 85MT
‚úÖ 6GB - 102MT
‚úÖ 7GB - 119MT
‚úÖ 8GB - 136MT
‚úÖ 9GB - 153MT
‚úÖ 10GB - 170MT


üìÖ PACOTES SEMANAIS 
‚ö† Vai receber 100MB por dia durante 7 dias, totalizando +0.7GB

‚úÖ 2GB ‚Äì 55MT
‚úÖ 3GB ‚Äì 75MT
‚úÖ 5GB ‚Äì 130MT
‚úÖ 10GB ‚Äì 220MT



üìÖ PACOTES MENSAIS 
‚ö† N√£o deve ter txuna cr√©dito ‚ö†

‚úÖ 5GB ‚Äì 165MT
‚úÖ 10GB ‚Äì 280MT
‚úÖ 20GB ‚Äì 480MT
‚úÖ 30GB ‚Äì 760MT
‚úÖ 50GB ‚Äì 960MT
‚úÖ 100GB ‚Äì 1940MT
‚úÖ 200GB ‚Äì 3420MT


üì¶ Compra r√°pida. Entrega garantida. Atendimento¬†VIP!¬†üíé‚ú®

üåü TUDO TOP ILIMITADO üåü
üìûüí¨ J√Å PODES FALAR SEM LIMITE E NAVEGAR COM A MELHOR INTERNET üåêüî•

üìÖ MENSAL (30 DIAS) üìÖ

üí∞ 450MT ‚Äî üìû Chamadas Ilimitadas + üí¨ SMS Ilimitadas + üì∂ 11GB
üí∞ 550MT ‚Äî üìû Chamadas Ilimitadas + üí¨ SMS Ilimitadas + üì∂ 15GB
üí∞ 750MT ‚Äî üìû Chamadas Ilimitadas + üí¨ SMS Ilimitadas + üì∂ 21GB
üí∞ 1100MT ‚Äî üìû Chamadas Ilimitadas + üí¨ SMS Ilimitadas + üì∂ 33GB
üí∞ 1350MT ‚Äî üìû Chamadas Ilimitadas + üí¨ SMS Ilimitadas + üì∂ 50GB
üí∞ 2300MT ‚Äî üìû Chamadas Ilimitadas + üí¨ SMS Ilimitadas¬†+¬†üì∂¬†100GB

`,
        pagamento: `üí∞ M√©todo de Pagamento
Envie o valor para um dos n√∫meros abaixo:
üì≤ 858891101 ‚Äî Isac Lurdes Raul Vilanculo
üì≤ 866291101 ‚Äî Isac Lurdes Raul Vilanculo



üìå Ap√≥s o pagamento:
üì∏ Envie o comprovativo ( screenshot ) no grupo.
üì±Informe ( junto com ) o n√∫mero que receber√° os megas.

üî• Promo√ß√£o ativa! Aproveite enquanto¬†puder¬†üöÄ
`
    }
};

// === FUN√á√ÉO GOOGLE SHEETS ===

// Fun√ß√£o para retry autom√°tico
async function tentarComRetry(funcao, maxTentativas = 3, delay = 2000) {
    for (let tentativa = 1; tentativa <= maxTentativas; tentativa++) {
        try {
            return await funcao();
        } catch (error) {
            console.log(`‚ö†Ô∏è Tentativa ${tentativa}/${maxTentativas} falhou: ${error.message}`);
            
            if (tentativa === maxTentativas) {
                throw error; // √öltima tentativa, propagar erro
            }
            
            // Aguardar antes da pr√≥xima tentativa
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
}
async function enviarParaGoogleSheets(referencia, valor, numero, grupoId, grupoNome, autorMensagem) {
    // Formato igual ao Bot Atacado: transacao j√° concatenada
    const transacaoFormatada = `${referencia}|${valor}|${numero}`;
    
    const dados = {
        transacao: transacaoFormatada,  // Formato concatenado igual ao Bot Atacado
        grupo_id: grupoId,
        sender: 'WhatsApp-Bot',  // Identificar origem
        message: `Dados enviados pelo Bot: ${transacaoFormatada}`,
        timestamp: new Date().toISOString()
    };
    
    try {
        console.log(`üìä Enviando para Google Sheets: ${referencia}`);
        console.log(`üîç Dados enviados:`, JSON.stringify(dados, null, 2));
        console.log(`üîó URL destino:`, GOOGLE_SHEETS_CONFIG.scriptUrl);
        
       const response = await axios.post(GOOGLE_SHEETS_CONFIG.scriptUrl, dados, {
    timeout: GOOGLE_SHEETS_CONFIG.timeout,
    headers: {
        'Content-Type': 'application/json',
        'X-Bot-Source': 'WhatsApp-Bot'
    },
    // Configura√ß√£o de retry
    validateStatus: function (status) {
        return status < 500; // Resolve apenas se status < 500
    }
});
        
        // Google Apps Script agora retorna JSON
        const responseData = response.data;
        console.log(`üì• Resposta Google Sheets:`, JSON.stringify(responseData, null, 2));

        // Verificar se √© uma resposta JSON v√°lida
        if (typeof responseData === 'object') {
            if (responseData.success) {
                console.log(`‚úÖ Google Sheets: Dados enviados!`);
                return { sucesso: true, referencia: responseData.referencia, duplicado: false };
            } else if (responseData.duplicado) {
                console.log(`‚ö†Ô∏è Google Sheets: Pedido duplicado detectado - ${responseData.referencia} (Status: ${responseData.status_existente})`);
                return {
                    sucesso: false,
                    duplicado: true,
                    referencia: responseData.referencia,
                    status_existente: responseData.status_existente,
                    message: responseData.message
                };
            } else {
                throw new Error(responseData.message || 'Erro desconhecido');
            }
        } else {
            // Fallback para compatibilidade com resposta em texto
            const responseText = String(responseData);
            if (responseText.includes('Sucesso!')) {
                console.log(`‚úÖ Google Sheets: Dados enviados!`);
                return { sucesso: true, row: 'N/A', duplicado: false };
            } else if (responseText.includes('Erro:')) {
                throw new Error(responseText);
            } else {
                throw new Error(`Resposta inesperada: ${responseText}`);
            }
        }
        
    } catch (error) {
        console.error(`‚ùå Erro Google Sheets [${grupoNome}]: ${error.message}`);
        return { sucesso: false, erro: error.message };
    }
}

// === FUN√á√ÉO PRINCIPAL PARA TASKER ===
async function enviarParaTasker(referencia, valor, numero, grupoId, autorMensagem) {
    const grupoNome = getConfiguracaoGrupo(grupoId)?.nome || 'Desconhecido';
    const timestamp = new Date().toLocaleString('pt-BR');
    const linhaCompleta = `${referencia}|${valor}|${numero}`;
    
    console.log(`üìä ENVIANDO PARA GOOGLE SHEETS [${grupoNome}]: ${linhaCompleta}`);
    
    // Cache da transa√ß√£o
    const transacaoKey = `${grupoId}_${Date.now()}_${numero}`;
    cacheTransacoes.set(transacaoKey, {
        dados: linhaCompleta,
        grupo_id: grupoId,
        grupo: grupoNome,
        autor: autorMensagem,
        timestamp: timestamp,
        enviado: false,
        metodo: 'pendente'
    });

    // === TENTAR GOOGLE SHEETS PRIMEIRO ===
    const resultado = await enviarParaGoogleSheets(referencia, valor, numero, grupoId, grupoNome, autorMensagem);

    if (resultado.sucesso) {
        // Atualizar cache
        if (cacheTransacoes.has(transacaoKey)) {
            const transacao = cacheTransacoes.get(transacaoKey);
            transacao.enviado = true;
            transacao.metodo = 'google_sheets';
            transacao.row = resultado.row;
        }
        console.log(`‚úÖ [${grupoNome}] Enviado para Google Sheets! Row: ${resultado.row}`);

        // === REGISTRAR COMPRA PENDENTE NO SISTEMA DE COMPRAS ===
        if (sistemaCompras) {
            // Extrair apenas o n√∫mero do autorMensagem (remover @c.us se houver)
            const numeroRemetente = autorMensagem.replace('@c.us', '');
            console.log(`üîç DEBUG COMPRA: autorMensagem="${autorMensagem}" | numeroRemetente="${numeroRemetente}" | numero="${numero}"`);
            await sistemaCompras.registrarCompraPendente(referencia, numero, valor, numeroRemetente, grupoId);
        }
    } else if (resultado.duplicado) {
        // Marcar como duplicado no cache
        if (cacheTransacoes.has(transacaoKey)) {
            cacheTransacoes.get(transacaoKey).status = 'duplicado';
        }
        console.log(`üõë [${grupoNome}] Pedido duplicado detectado: ${referencia}`);

        // Retornar informa√ß√µes do duplicado para o bot processar
        return {
            duplicado: true,
            referencia: resultado.referencia,
            status_existente: resultado.status_existente,
            message: resultado.message
        };
    } else {
        // Fallback para WhatsApp se Google Sheets falhar
        console.log(`üîÑ [${grupoNome}] Google Sheets falhou, usando WhatsApp backup...`);
        enviarViaWhatsAppTasker(linhaCompleta, grupoNome, autorMensagem);
        if (cacheTransacoes.has(transacaoKey)) {
            cacheTransacoes.get(transacaoKey).metodo = 'whatsapp_backup';
        }
    }
    
    // === BACKUP REMOVIDO - OTIMIZA√á√ÉO ===
    // N√£o salva mais arquivos .txt desnecess√°rios
    
    // Cache j√° auto-limpa automaticamente
    
    return linhaCompleta;
}

function enviarViaWhatsAppTasker(linhaCompleta, grupoNome, autorMensagem) {
    const item = {
        conteudo: linhaCompleta, // Apenas: referencia|valor|numero
        autor: autorMensagem,
        grupo: grupoNome,
        timestamp: Date.now(),
        id: Date.now() + Math.random(),
        tipo: 'tasker_data_backup'
    };

    filaMensagens.push(item);
    console.log(`üì± WhatsApp Backup ‚Üí Tasker: ${linhaCompleta}`);

    if (!processandoFila) {
        processarFila();
    }
}

// === FUN√á√ÉO REMOVIDA PARA OTIMIZA√á√ÉO ===
// N√£o salva mais arquivos .txt desnecess√°rios
// async function salvarArquivoTasker() - REMOVIDA

function obterDadosTasker() {
    return Array.from(cacheTransacoes.values());
}

function obterDadosTaskerHoje() {
    const hoje = new Date().toDateString();
    return Array.from(cacheTransacoes.values()).filter(item => {
        const dataItem = new Date(item.timestamp).toDateString();
        return dataItem === hoje;
    });
}

// === FUN√á√ïES PARA TASKER - SISTEMA DE PACOTES ===
function obterDadosPacotesTasker() {
    if (!sistemaPacotes) return [];
    
    const clientes = Object.values(sistemaPacotes.clientesAtivos);
    return clientes.map(cliente => ({
        numero: cliente.numero,
        referenciaOriginal: cliente.referenciaOriginal,
        tipoPacote: cliente.tipoPacote,
        diasRestantes: cliente.diasRestantes,
        proximaRenovacao: cliente.proximaRenovacao,
        status: cliente.status,
        grupoId: cliente.grupoId
    }));
}

function obterRenovacoesPendentesTasker() {
    if (!sistemaPacotes) return [];
    
    const agora = new Date();
    const proximas6h = new Date(agora.getTime() + (6 * 60 * 60 * 1000));
    
    const clientes = Object.values(sistemaPacotes.clientesAtivos);
    return clientes.filter(cliente => {
        const proximaRenovacao = new Date(cliente.proximaRenovacao);
        return proximaRenovacao <= proximas6h && cliente.diasRestantes > 0;
    }).map(cliente => ({
        numero: cliente.numero,
        referenciaOriginal: cliente.referenciaOriginal,
        tipoPacote: cliente.tipoPacote,
        proximaRenovacao: cliente.proximaRenovacao,
        diasRestantes: cliente.diasRestantes
    }));
}

// === COMANDOS CUSTOMIZADOS - FUN√á√ïES ===

async function carregarComandosCustomizados() {
    try {
        const data = await fs.readFile(ARQUIVO_COMANDOS, 'utf8');
        comandosCustomizados = JSON.parse(data);
        console.log(`üìù Comandos customizados carregados: ${Object.keys(comandosCustomizados).length} grupos`);
    } catch (error) {
        comandosCustomizados = {};
        console.log('üìù Arquivo de comandos n√£o existe, criando estrutura vazia');
    }
}

async function salvarComandosCustomizados() {
    try {
        await fs.writeFile(ARQUIVO_COMANDOS, JSON.stringify(comandosCustomizados));
        console.log('‚úÖ Comandos customizados salvos');
    } catch (error) {
        console.error('‚ùå Erro ao salvar comandos:', error);
    }
}

function parsearComandoCustomizado(texto) {
    // Regex para capturar: .addcomando Nome_do_comando(resposta)
    const regex = /^\.addcomando\s+(\w+)\s*\((.+)\)$/s;
    const match = texto.match(regex);
    
    if (match) {
        return {
            nome: match[1].toLowerCase(),
            resposta: match[2].trim()
        };
    }
    return null;
}

async function adicionarComandoCustomizado(chatId, nomeComando, resposta, autorId) {
    if (!comandosCustomizados[chatId]) {
        comandosCustomizados[chatId] = {};
    }
    
    comandosCustomizados[chatId][nomeComando] = {
        resposta: resposta,
        criadoPor: autorId,
        criadoEm: new Date().toISOString()
    };
    
    await salvarComandosCustomizados();
    console.log(`‚úÖ Comando '${nomeComando}' adicionado ao grupo ${chatId}`);
}

async function removerComandoCustomizado(chatId, nomeComando) {
    if (comandosCustomizados[chatId] && comandosCustomizados[chatId][nomeComando]) {
        delete comandosCustomizados[chatId][nomeComando];
        
        // Se n√£o h√° mais comandos no grupo, remove a entrada do grupo
        if (Object.keys(comandosCustomizados[chatId]).length === 0) {
            delete comandosCustomizados[chatId];
        }
        
        await salvarComandosCustomizados();
        console.log(`üóëÔ∏è Comando '${nomeComando}' removido do grupo ${chatId}`);
        return true;
    }
    return false;
}

function executarComandoCustomizado(chatId, comando) {
    if (comandosCustomizados[chatId] && comandosCustomizados[chatId][comando]) {
        return comandosCustomizados[chatId][comando].resposta;
    }
    return null;
}

// === FUN√á√ïES AUXILIARES ===

function detectarPerguntaPorNumero(mensagem) {
    const texto = mensagem.toLowerCase();
    
    const padroes = [
        /qual\s+(√©\s+)?(o\s+)?n√∫mero/i,
        /n√∫mero\s+(de\s+)?(contato|suporte|atendimento)/i,
        /como\s+(falar|contactar|entrar em contacto)/i,
        /preciso\s+(de\s+)?(ajuda|suporte|n√∫mero)/i,
        /onde\s+(posso\s+)?falar/i,
        /tem\s+(n√∫mero|contacto|suporte)/i,
        /quero\s+falar\s+com/i,
        /atendimento/i,
        /suporte/i,
        /admin/i,
        /administrador/i,
        /respons√°vel/i,
        /quem\s+(√©\s+)?respons√°vel/i,
        /como\s+contactar/i,
        /n√∫mero\s+do\s+admin/i
    ];
    
    return padroes.some(padrao => padrao.test(texto));
}

function isAdministrador(numero) {
    return ADMINISTRADORES_GLOBAIS.includes(numero);
}

function isGrupoMonitorado(chatId) {
    return CONFIGURACAO_GRUPOS.hasOwnProperty(chatId);
}

function getConfiguracaoGrupo(chatId) {
    return CONFIGURACAO_GRUPOS[chatId] || null;
}

// Fun√ß√£o para resolver ID interno (@lid) para n√∫mero real (@c.us)
function resolverIdReal(participantId, adminsEncontrados) {
    // Se j√° √© @c.us, retorna como est√°
    if (participantId.endsWith('@c.us')) {
        return participantId;
    }
    
    // Se tem mapeamento conhecido, usa ele
    if (MAPEAMENTO_IDS[participantId]) {
        return MAPEAMENTO_IDS[participantId];
    }
    
    // Se √© @lid, tenta encontrar correspond√™ncia nos admins
    if (participantId.endsWith('@lid')) {
        // Para agora, retorna o pr√≥prio ID para permitir compara√ß√£o direta
        return participantId;
    }
    
    return participantId;
}

async function isAdminGrupo(chatId, participantId) {
    try {
        console.log(`üîç Verificando admin: chatId=${chatId}, participantId=${participantId}`);
        
        if (adminCache[chatId] && adminCache[chatId].timestamp > Date.now() - 300000) {
            const { admins, mapeamentoLidToCus } = adminCache[chatId];
            console.log(`üìã Usando cache...`);
            
            // Usar mapeamento para verificar se √© admin
            const isAdmin = verificarAdminComMapeamento(participantId, admins, mapeamentoLidToCus);
            console.log(`‚úÖ Cache - ${participantId} √© admin? ${isAdmin}`);
            return isAdmin;
        }

        console.log(`üîÑ Cache expirado/inexistente, buscando admins do grupo...`);
        const chat = await client.getChatById(chatId);
        const participants = await chat.participants;
        const admins = participants.filter(p => p.isAdmin || p.isSuperAdmin);
        
        console.log(`üë• Participantes do grupo: ${participants.length}`);
        // console.log(`üëë Admins (@c.us): ${admins.map(a => a.id._serialized).join(', ')}`);
        
        const participantesLid = participants.filter(p => p.id._serialized.endsWith('@lid'));
        const participantesCus = participants.filter(p => p.id._serialized.endsWith('@c.us'));
        
        console.log(`üîç Participantes @lid: ${participantesLid.map(p => p.id._serialized).join(', ')}`);
        console.log(`üîç Participantes @c.us: ${participantesCus.map(p => p.id._serialized).join(', ')}`);
        // console.log(`üéØ Procurando por: ${participantId}`);
        
        // ESTRAT√âGIA ADICIONAL: Verificar se o participantId espec√≠fico tem flag de admin
        let adminDireto = false;
        const participanteEspecifico = participants.find(p => p.id._serialized === participantId);
        if (participanteEspecifico) {
            adminDireto = participanteEspecifico.isAdmin || participanteEspecifico.isSuperAdmin;
            // console.log(`üéØ Participante ${participantId} encontrado! isAdmin: ${participanteEspecifico.isAdmin}, isSuperAdmin: ${participanteEspecifico.isSuperAdmin}`);
        } else {
            console.log(`‚ö†Ô∏è Participante ${participantId} N√ÉO encontrado na lista de participantes!`);
        }
        
        // CRIAR MAPEAMENTO AUTOM√ÅTICO
        const mapeamentoLidToCus = criarMapeamentoAutomatico(participants, admins);
        
        // Adicionar detec√ß√£o direta se encontrada
        if (adminDireto) {
            mapeamentoLidToCus[participantId] = 'ADMIN_DIRETO';
            console.log(`‚úÖ Adicionado ${participantId} como ADMIN_DIRETO no mapeamento!`);
        }
        
        // MAPEAMENTO DIRETO POR N√öMERO: Se o participantId for @lid e houver admin @c.us com mesmo n√∫mero
        if (participantId.endsWith('@lid')) {
            const numeroBase = participantId.split('@')[0];
            const adminPorNumero = admins.find(admin => {
                return admin.id._serialized.split('@')[0] === numeroBase;
            });
            
            if (adminPorNumero && !mapeamentoLidToCus[participantId]) {
                mapeamentoLidToCus[participantId] = adminPorNumero.id._serialized;
                // console.log(`üéØ MAPEAMENTO DIRETO: ${participantId} -> ${adminPorNumero.id._serialized}`);
            }
        }
        
        console.log(`üó∫Ô∏è Mapeamento criado:`, mapeamentoLidToCus);
        
        // Salvar cache com mapeamento
        adminCache[chatId] = {
            admins: admins,
            mapeamentoLidToCus: mapeamentoLidToCus,
            timestamp: Date.now()
        };

        // ESTRAT√âGIA FINAL: Se n√£o encontrou o participante na lista, tentar abordagem alternativa
        if (!participanteEspecifico && participantId.endsWith('@lid')) {
            console.log(`üîÑ Tentativa alternativa: Buscando informa√ß√µes sobre ${participantId}...`);
            try {
                // Tentar obter informa√ß√µes do contato diretamente
                const contact = await client.getContactById(participantId);
                console.log(`üìû Info do contato:`, {
                    id: contact.id._serialized,
                    number: contact.number,
                    pushname: contact.pushname,
                    name: contact.name,
                    isUser: contact.isUser
                });
                
                // ESTRAT√âGIA 1: Comparar por n√∫mero real do contato
                if (contact.number) {
                    console.log(`üîç Procurando admin com n√∫mero real: ${contact.number}`);
                    
                    const adminPorNumeroReal = admins.find(admin => {
                        const numeroAdmin = admin.id._serialized.split('@')[0];
                        // Remover c√≥digo de pa√≠s e comparar
                        const numeroLimpoAdmin = numeroAdmin.replace(/^258/, '');
                        const numeroLimpoContato = contact.number.replace(/^258/, '').replace(/^/, '');
                        
                        console.log(`   üîç Comparando "${numeroLimpoContato}" com admin "${numeroLimpoAdmin}"`);
                        return numeroLimpoAdmin === numeroLimpoContato || 
                               numeroAdmin === contact.number ||
                               numeroAdmin.endsWith(contact.number) ||
                               contact.number.endsWith(numeroLimpoAdmin);
                    });
                    
                    if (adminPorNumeroReal) {
                        mapeamentoLidToCus[participantId] = adminPorNumeroReal.id._serialized;
                        console.log(`‚úÖ SUCESSO! Mapeado por n√∫mero real: ${participantId} -> ${adminPorNumeroReal.id._serialized}`);
                    } else {
                        console.log(`‚ùå Nenhum admin encontrado com n√∫mero real ${contact.number}`);
                    }
                }
                
                // ESTRAT√âGIA 2: Comparar com admins por n√∫mero base do ID (fallback)
                if (!mapeamentoLidToCus[participantId]) {
                    const numeroBase = participantId.split('@')[0];
                    console.log(`üîç Fallback - Procurando admin com n√∫mero base: ${numeroBase}`);
                    
                    const adminEncontrado = admins.find(admin => {
                        const numeroAdmin = admin.id._serialized.split('@')[0];
                        console.log(`   üîç Comparando ${numeroBase} com admin ${numeroAdmin}`);
                        return numeroAdmin === numeroBase;
                    });
                    
                    if (adminEncontrado) {
                        mapeamentoLidToCus[participantId] = adminEncontrado.id._serialized;
                        console.log(`‚úÖ SUCESSO! Mapeado por n√∫mero base: ${participantId} -> ${adminEncontrado.id._serialized}`);
                    } else {
                        console.log(`‚ùå Nenhum admin encontrado com n√∫mero ${numeroBase}`);
                        console.log(`üìã Admins dispon√≠veis: ${admins.map(a => a.id._serialized.split('@')[0]).join(', ')}`);
                    }
                }
                
            } catch (err) {
                console.log(`‚ö†Ô∏è Erro ao buscar contato: ${err.message}`);
            }
        }
        
        // Verificar se √© admin usando mapeamento
        const isAdmin = verificarAdminComMapeamento(participantId, admins, mapeamentoLidToCus);
        console.log(`‚úÖ Resultado: ${participantId} √© admin? ${isAdmin}`);
        return isAdmin;
    } catch (error) {
        console.error('‚ùå Erro ao verificar admin do grupo:', error);
        return false;
    }
}

// Criar mapeamento autom√°tico entre IDs @lid e @c.us
function criarMapeamentoAutomatico(participants, admins) {
    const mapeamento = {};
    
    // Para cada participante @lid, tentar encontrar correspond√™ncia com admin @c.us
    const participantesLid = participants.filter(p => p.id._serialized.endsWith('@lid'));
    const adminsIds = admins.map(a => a.id._serialized);
    
    console.log(`üîç Tentando mapear ${participantesLid.length} IDs @lid para ${adminsIds.length} admins @c.us...`);
    
    // Debug detalhado dos participantes
    if (participantesLid.length === 0) {
        console.log(`‚ö†Ô∏è ATEN√á√ÉO: Nenhum participante @lid encontrado!`);
        console.log(`üìã Todos participantes:`, participants.map(p => ({
            id: p.id._serialized,
            isAdmin: p.isAdmin,
            isSuperAdmin: p.isSuperAdmin,
            pushname: p.pushname
        })));
    }
    
    participantesLid.forEach(participante => {
        const lidId = participante.id._serialized;
        console.log(`üîç Analisando ${lidId}: isAdmin=${participante.isAdmin}, isSuperAdmin=${participante.isSuperAdmin}, nome=${participante.pushname}`);
        
        // Estrat√©gia 1: Verificar se o pr√≥prio participante @lid tem flag de admin
        if (participante.isAdmin || participante.isSuperAdmin) {
            console.log(`‚úÖ ${lidId} tem flag de admin direto!`);
            mapeamento[lidId] = 'ADMIN_DIRETO'; // Marcador especial
            return;
        }
        
        // Estrat√©gia 2: Matching por nome (se dispon√≠vel)
        if (participante.pushname) {
            const adminCorrespondente = admins.find(admin => 
                admin.pushname && admin.pushname === participante.pushname
            );
            if (adminCorrespondente) {
                mapeamento[lidId] = adminCorrespondente.id._serialized;
                // console.log(`üéØ Mapeado por nome: ${lidId} -> ${adminCorrespondente.id._serialized}`);
                return;
            } else {
                console.log(`‚ùå Nenhum admin encontrado com nome "${participante.pushname}"`);
            }
        } else {
            console.log(`‚ö†Ô∏è ${lidId} n√£o tem nome dispon√≠vel para matching`);
        }
    });
    
    return mapeamento;
}

// Verificar se √© admin usando o mapeamento
function verificarAdminComMapeamento(participantId, admins, mapeamento) {
    const adminsIds = admins.map(a => a.id._serialized);
    
    // 1. Verifica√ß√£o direta (caso seja @c.us)
    if (adminsIds.includes(participantId)) {
        console.log(`‚úÖ ${participantId} √© admin direto (@c.us)`);
        return true;
    }
    
    // 2. Verifica√ß√£o via mapeamento (caso seja @lid)
    if (mapeamento[participantId]) {
        if (mapeamento[participantId] === 'ADMIN_DIRETO') {
            console.log(`‚úÖ ${participantId} √© admin direto (@lid com flag)`);
            return true;
        } else if (adminsIds.includes(mapeamento[participantId])) {
            console.log(`‚úÖ ${participantId} mapeado para admin ${mapeamento[participantId]}`);
            return true;
        }
    }
    
    console.log(`‚ùå ${participantId} n√£o √© admin`);
    return false;
}

// Fun√ß√£o para verificar se um ID corresponde a um admin
function verificarSeEhAdmin(participantId, admins, todosParticipantes) {
    console.log(`üîç Procurando ${participantId} entre ${admins.length} admins...`);
    
    // 1. Verifica√ß√£o direta por ID
    const adminDireto = admins.find(admin => admin.id._serialized === participantId);
    if (adminDireto) {
        console.log(`‚úÖ Encontrado por ID direto: ${adminDireto.id._serialized}`);
        return true;
    }
    
    // 2. Para IDs @lid, tentar encontrar correspond√™ncia por pushname ou outras caracter√≠sticas
    if (participantId.endsWith('@lid')) {
        console.log(`üîç ${participantId} √© ID @lid, procurando correspond√™ncia...`);
        
        // Buscar o participante pelo ID @lid
        const participante = todosParticipantes.find(p => p.id._serialized === participantId);
        if (participante) {
            console.log(`üì± Participante @lid encontrado:`, {
                id: participante.id._serialized,
                pushname: participante.pushname || 'N/A',
                isAdmin: participante.isAdmin || false,
                isSuperAdmin: participante.isSuperAdmin || false
            });
            
            // VERIFICA√á√ÉO DIRETA: Se o pr√≥prio participante @lid tem flag de admin
            if (participante.isAdmin || participante.isSuperAdmin) {
                console.log(`‚úÖ O pr√≥prio participante @lid TEM flag de admin!`);
                return true;
            }
            
            // Verificar se existe admin com mesmo pushname ou n√∫mero base
            const adminCorrespondente = admins.find(admin => {
                // Tentar matching por pushname se dispon√≠vel
                if (participante.pushname && admin.pushname && 
                    participante.pushname === admin.pushname) {
                    return true;
                }
                return false;
            });
            
            if (adminCorrespondente) {
                console.log(`‚úÖ Encontrado admin correspondente por pushname: ${adminCorrespondente.id._serialized}`);
                return true;
            }
        } else {
            console.log(`‚ùå Participante @lid ${participantId} n√£o encontrado na lista de participantes`);
        }
    }
    
    console.log(`‚ùå ${participantId} n√£o √© admin do grupo`);
    return false;
}

function contemConteudoSuspeito(mensagem) {
    const texto = mensagem.toLowerCase();
    const temLink = /(?:https?:\/\/|www\.|\.com|\.net|\.org|\.br|\.mz|bit\.ly|tinyurl|t\.me|wa\.me|whatsapp\.com|telegram\.me|link|url)/i.test(texto);
    
    return {
        temLink: MODERACAO_CONFIG.detectarLinks && temLink,
        suspeito: MODERACAO_CONFIG.detectarLinks && temLink
    };
}

async function deletarMensagem(message) {
    try {
        await message.delete(true);
        console.log(`üóëÔ∏è Mensagem deletada`);
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao deletar mensagem:', error);
        return false;
    }
}

async function removerParticipante(chatId, participantId, motivo) {
    try {
        const chat = await client.getChatById(chatId);
        await chat.removeParticipants([participantId]);
        console.log(`üö´ Participante removido: ${participantId} - ${motivo}`);
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao remover participante:', error);
        return false;
    }
}

async function aplicarModeracao(message, motivoDeteccao) {
    const chatId = message.from;
    const authorId = message.author || message.from;
    
    try {
        if (!MODERACAO_CONFIG.ativado[chatId]) {
            return;
        }

        if (MODERACAO_CONFIG.excecoes.includes(authorId) || isAdministrador(authorId)) {
            return;
        }

        const isAdmin = await isAdminGrupo(chatId, authorId);
        if (isAdmin) {
            return;
        }

        console.log(`üö® MODERA√á√ÉO: ${motivoDeteccao}`);

        if (MODERACAO_CONFIG.apagarMensagem) {
            await deletarMensagem(message);
        }

        if (MODERACAO_CONFIG.removerUsuario) {
            await removerParticipante(chatId, authorId, motivoDeteccao);
        }

    } catch (error) {
        console.error('‚ùå Erro durante modera√ß√£o:', error);
    }
}

// === DETEC√á√ÉO DE GRUPOS ===
async function logGrupoInfo(chatId, evento = 'detectado') {
    try {
        const chat = await client.getChatById(chatId);
        const isGrupoMonitorado = CONFIGURACAO_GRUPOS.hasOwnProperty(chatId);
        
        console.log(`\nüîç ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
        console.log(`üìã GRUPO ${evento.toUpperCase()}`);
        console.log(`üîç ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
        console.log(`üìõ Nome: ${chat.name}`);
        console.log(`üÜî ID: ${chatId}`);
        console.log(`üë• Participantes: ${chat.participants ? chat.participants.length : 'N/A'}`);
        console.log(`üìä Monitorado: ${isGrupoMonitorado ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
        console.log(`‚è∞ Data: ${new Date().toLocaleString('pt-BR')}`);
        
        if (!isGrupoMonitorado) {
            console.log(`\nüîß PARA ADICIONAR ESTE GRUPO:`);
            console.log(`üìù Copie este c√≥digo para CONFIGURACAO_GRUPOS:`);
            console.log(`\n'${chatId}': {`);
            console.log(`    nome: '${chat.name}',`);
            console.log(`    tabela: \`SUA_TABELA_AQUI\`,`);
            console.log(`    pagamento: \`SUAS_FORMAS_DE_PAGAMENTO_AQUI\``);
            console.log(`},\n`);
        }
        
        console.log(`üîç ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`);
        
        return {
            id: chatId,
            nome: chat.name,
            participantes: chat.participants ? chat.participants.length : 0,
            monitorado: isGrupoMonitorado
        };
        
    } catch (error) {
        console.error(`‚ùå Erro ao obter informa√ß√µes do grupo ${chatId}:`, error);
        return null;
    }
}

// === HIST√ìRICO DE COMPRADORES ===

async function carregarHistorico() {
    try {
        const data = await fs.readFile(ARQUIVO_HISTORICO, 'utf8');
        historicoCompradores = JSON.parse(data);
        console.log('üìä Hist√≥rico carregado!');
    } catch (error) {
        console.log('üìä Criando novo hist√≥rico...');
        historicoCompradores = {};
    }
}

// === SALVAMENTO DE HIST√ìRICO OTIMIZADO ===
let salvamentoHistoricoPendente = false;
let timeoutHistorico = null;

async function salvarHistorico() {
    if (salvamentoHistoricoPendente) return;
    salvamentoHistoricoPendente = true;

    try {
        await fs.writeFile(ARQUIVO_HISTORICO, JSON.stringify(historicoCompradores));
    } catch (error) {
        console.error('‚ùå Erro ao salvar hist√≥rico:', error);
    } finally {
        salvamentoHistoricoPendente = false;
    }
}

function agendarSalvamentoHistorico() {
    if (timeoutHistorico) {
        clearTimeout(timeoutHistorico);
    }

    timeoutHistorico = setTimeout(async () => {
        agendarSalvamentoHistorico();
        timeoutHistorico = null;
    }, 3000); // 3 segundos para hist√≥rico
}

async function registrarComprador(grupoId, numeroComprador, nomeContato, valorTransferencia) {
    const agora = new Date();
    const timestamp = agora.toISOString();

    if (!historicoCompradores[grupoId]) {
        historicoCompradores[grupoId] = {
            nomeGrupo: getConfiguracaoGrupo(grupoId)?.nome || 'Grupo Desconhecido',
            compradores: {}
        };
    }

    if (!historicoCompradores[grupoId].compradores[numeroComprador]) {
        historicoCompradores[grupoId].compradores[numeroComprador] = {
            primeiraCompra: timestamp,
            ultimaCompra: timestamp,
            totalCompras: 1,
            nomeContato: nomeContato,
            historico: []
        };
    } else {
        historicoCompradores[grupoId].compradores[numeroComprador].ultimaCompra = timestamp;
        historicoCompradores[grupoId].compradores[numeroComprador].totalCompras++;
        historicoCompradores[grupoId].compradores[numeroComprador].nomeContato = nomeContato;
    }

    historicoCompradores[grupoId].compradores[numeroComprador].historico.push({
        data: timestamp,
        valor: valorTransferencia
    });

    if (historicoCompradores[grupoId].compradores[numeroComprador].historico.length > 10) {
        historicoCompradores[grupoId].compradores[numeroComprador].historico =
            historicoCompradores[grupoId].compradores[numeroComprador].historico.slice(-10);
    }

    agendarSalvamentoHistorico();
    console.log(`üí∞ Comprador registrado: ${nomeContato} (${numeroComprador}) - ${valorTransferencia}MT`);
}

// === FILA DE MENSAGENS ===

function adicionarNaFila(mensagem, autor, nomeGrupo, timestamp) {
    const item = {
        conteudo: mensagem,
        autor: autor,
        grupo: nomeGrupo,
        timestamp: timestamp,
        id: Date.now() + Math.random()
    };

    filaMensagens.push(item);
    console.log(`üì• Adicionado √† fila: ${filaMensagens.length} mensagens`);

    if (!processandoFila) {
        processarFila();
    }
}

async function processarFila() {
    if (processandoFila || filaMensagens.length === 0) {
        return;
    }

    processandoFila = true;
    console.log(`üöÄ Processando ${filaMensagens.length} mensagens...`);

    while (filaMensagens.length > 0) {
        const item = filaMensagens.shift();

        try {
            await client.sendMessage(ENCAMINHAMENTO_CONFIG.numeroDestino, item.conteudo);
            console.log(`‚úÖ Encaminhado: ${item.conteudo.substring(0, 50)}...`);

            if (filaMensagens.length > 0) {
                await new Promise(resolve => setTimeout(resolve, ENCAMINHAMENTO_CONFIG.intervaloSegundos * 1000));
            }

        } catch (error) {
            console.error(`‚ùå Erro ao encaminhar:`, error);
            filaMensagens.unshift(item);
            await new Promise(resolve => setTimeout(resolve, 10000));
        }
    }

    processandoFila = false;
    console.log(`üéâ Fila processada!`);
}

// === EVENTOS DO BOT ===

client.on('qr', (qr) => {
    console.log('üì± QR Code gerado - Escaneie o QR Code:');
    qrcode.generate(qr, { small: true });
});

client.on('authenticated', () => {
    console.log('üîê Cliente autenticado com sucesso!');
});

client.on('auth_failure', (msg) => {
    console.error('‚ùå Falha na autentica√ß√£o:', msg);
});

client.on('loading_screen', (percent, message) => {
    console.log('‚è≥ Carregando WhatsApp...', percent + '%', message);
});

client.on('ready', async () => {
    console.log('‚úÖ Bot conectado e pronto!');
    console.log('üß† IA WhatsApp ativa!');
    console.log('üìä Google Sheets configurado!');
    console.log(`üîó URL: ${GOOGLE_SHEETS_CONFIG.scriptUrl}`);
    console.log('ü§ñ Bot Retalho - L√≥gica simples igual ao Bot Atacado!');

    // === INICIALIZAR SISTEMA DE RETRY SILENCIOSO ===
    await carregarPagamentosPendentes();
    console.log('üîÑ Sistema de Retry Silencioso ATIVADO!');
    
    // === INICIALIZAR SISTEMA DE PACOTES AP√ìS WhatsApp CONECTAR ===
    if (process.env.SISTEMA_PACOTES_ENABLED === 'true') {
        sistemaPacotes = new SistemaPacotes();
        console.log('üì¶ Sistema de Pacotes Autom√°ticos ATIVADO');
    } else {
        console.log('üì¶ Sistema de Pacotes Autom√°ticos DESABILITADO (.env)');
    }
    
    // === INICIALIZAR SISTEMA DE COMPRAS ===
    sistemaCompras = new SistemaCompras();
    console.log('üõí Sistema de Registro de Compras ATIVADO');
    
    // Carregar dados de refer√™ncia
    await carregarDadosReferencia();
    
    await carregarHistorico();
    
    console.log('\nü§ñ Monitorando grupos:');
    Object.keys(CONFIGURACAO_GRUPOS).forEach(grupoId => {
        const config = CONFIGURACAO_GRUPOS[grupoId];
        console.log(`   üìã ${config.nome} (${grupoId})`);
    });
    
    console.log('\nüîß Comandos admin: .ia .stats .sheets .test_sheets .test_grupo .grupos_status .grupos .grupo_atual .addcomando .comandos .delcomando .test_vision .ranking .inativos .semcompra .resetranking .bonus .setboasvindas .getboasvindas .testboasvindas .testreferencia');
    
    // Iniciar monitoramento autom√°tico de novos membros
    await iniciarMonitoramentoMembros();
});

client.on('group-join', async (notification) => {
    try {
        console.log('üîç EVENT group-join disparado!');
        console.log('üìä Tipo de notifica√ß√£o:', notification.type); // 'add' ou 'invite'
        console.log('‚è∞ Timestamp:', new Date(notification.timestamp * 1000));

        const chatId = notification.chatId;
        const addedParticipants = notification.recipientIds || [];
        const addedBy = notification.author; // QUEM ADICIONOU OS NOVOS MEMBROS
        const botInfo = client.info;

        console.log(`üìç ChatId: ${chatId}`);
        console.log(`üë• Participantes adicionados: ${addedParticipants.join(', ')}`);
        console.log(`üë§ Adicionado por (ID): ${addedBy || 'INDEFINIDO'}`);

        // USAR M√âTODOS DA DOCUMENTA√á√ÉO PARA OBTER DETALHES REAIS
        let nomeAdicionador = 'INDEFINIDO';
        let nomesAdicionados = [];

        try {
            // Obter detalhes de quem adicionou
            if (addedBy) {
                const contact = await notification.getContact();
                nomeAdicionador = contact.pushname || contact.name || addedBy;
                console.log(`üë§ Adicionado por (Nome Real): ${nomeAdicionador}`);
            }

            // Obter detalhes de quem foi adicionado
            const recipients = await notification.getRecipients();
            nomesAdicionados = recipients.map(r => r.pushname || r.name || r.id._serialized);
            console.log(`üë• Novos membros (Nomes): ${nomesAdicionados.join(', ')}`);

            // Obter detalhes do grupo
            const chat = await notification.getChat();
            console.log(`üè¢ Grupo: ${chat.name}`);

        } catch (error) {
            console.log(`‚ö†Ô∏è Erro ao obter detalhes dos contatos:`, error.message);
        }

        console.log(`ü§ñ Bot ID: ${botInfo?.wid?._serialized || 'INDEFINIDO'}`);

        if (botInfo && addedParticipants.includes(botInfo.wid._serialized)) {
            console.log(`\nü§ñ BOT ADICIONADO A UM NOVO GRUPO!`);
            await logGrupoInfo(chatId, 'BOT ADICIONADO');

            setTimeout(async () => {
                try {
                    const isMonitorado = CONFIGURACAO_GRUPOS.hasOwnProperty(chatId);
                    const mensagem = isMonitorado ?
                        `ü§ñ *BOT ATIVO E CONFIGURADO!*\n\nEste grupo est√° monitorado e o sistema autom√°tico j√° est√° funcionando.\n\nüìã Digite: *tabela* (ver pre√ßos)\nüí≥ Digite: *pagamento* (ver formas)` :
                        `ü§ñ *BOT CONECTADO!*\n\n‚öôÔ∏è Este grupo ainda n√£o est√° configurado.\nüîß Contacte o administrador para ativa√ß√£o.\n\nüìù ID do grupo copiado no console do servidor.`;

                    await client.sendMessage(chatId, mensagem);
                    console.log(`‚úÖ Mensagem de status enviada`);
                } catch (error) {
                    console.error('‚ùå Erro ao enviar mensagem de status:', error);
                }
            }, 3000);
        } else {
            // NOVOS MEMBROS (N√ÉO-BOT) ENTRARAM NO GRUPO
            console.log('üë• Processando novos membros...');

            const configGrupo = getConfiguracaoGrupo(chatId);
            console.log(`üè¢ Grupo configurado: ${configGrupo ? configGrupo.nome : 'N√ÉO CONFIGURADO'}`);
            console.log(`üë§ Adicionado por: ${addedBy || 'INDEFINIDO'}`);

            if (configGrupo && addedBy) {
                console.log(`‚úÖ Condi√ß√µes atendidas! Processando ${addedParticipants.length} membro(s)...`);
                console.log(`üìù Tipo de adi√ß√£o: ${notification.type} (add=admin adicionou, invite=entrou via link)`);

                // Processar cada novo membro
                for (let i = 0; i < addedParticipants.length; i++) {
                    const participantId = addedParticipants[i];
                    const nomeParticipante = nomesAdicionados[i] || participantId;

                    try {
                        console.log(`üëã PROCESSANDO VIA EVENT: ${nomeParticipante} (${participantId})`);
                        console.log(`üë§ Adicionado por: ${nomeAdicionador} (${addedBy})`);
                        console.log(`üè¢ No grupo: ${configGrupo.nome}`);

                        // Marcar como processado via event para evitar processamento duplicado
                        const membroKey = `${chatId}_${participantId}`;
                        membrosProcessadosViaEvent.add(membroKey);

                        // SISTEMA AUTOM√ÅTICO DESATIVADO - Novo membro deve usar c√≥digo manual
                        console.log(`üì¢ Sistema autom√°tico desativado - ${nomeParticipante} deve usar c√≥digo do convidador`);

                        /* SISTEMA AUTOM√ÅTICO COMENTADO - USU√ÅRIO PREFERIU M√âTODO MANUAL
                        if (notification.type === 'add') {
                            console.log(`üîó Criando refer√™ncia autom√°tica (admin adicionou)...`);
                            const resultado = await criarReferenciaAutomatica(addedBy, participantId, chatId);
                            console.log(`üîó Resultado da cria√ß√£o: ${resultado ? 'SUCESSO' : 'FALHOU'}`);
                        } else if (notification.type === 'invite') {
                            console.log(`üìé Membro entrou via link de convite - n√£o criando refer√™ncia autom√°tica`);
                        } else {
                            console.log(`‚ùì Tipo de entrada desconhecido: ${notification.type}`);
                        }
                        */

                        // Aguardar um pouco para evitar spam
                        setTimeout(async () => {
                            try {
                                await enviarBoasVindas(chatId, participantId);
                            } catch (error) {
                                console.error(`‚ùå Erro ao enviar boas-vindas para ${participantId}:`, error);
                            }
                        }, 2000 + (Math.random() * 3000));

                    } catch (error) {
                        console.error(`‚ùå Erro ao processar novo membro ${participantId}:`, error);
                        console.error(`‚ùå Stack trace:`, error.stack);
                    }
                }
            } else {
                if (!configGrupo) {
                    console.log(`‚ùå Grupo ${chatId} n√£o est√° configurado no sistema`);
                }
                if (!addedBy) {
                    console.log(`‚ùå N√£o foi poss√≠vel identificar quem adicionou os membros`);
                }
            }
        }
    } catch (error) {
        console.error('‚ùå Erro no evento group-join:', error);
    }
});

client.on('message', async (message) => {
    try {
        const isPrivado = !message.from.endsWith('@g.us');
        const autorMensagem = message.author || message.from;
        const isAdmin = isAdministrador(autorMensagem);
        
        // DEBUG DETALHADO DA MENSAGEM
        if (message.body.startsWith('.addcomando') || message.body.startsWith('.comandos') || message.body.startsWith('.delcomando')) {
            console.log(`üîç DEBUG MENSAGEM ADMIN:`);
            console.log(`   üì± message.from: ${message.from}`);
            console.log(`   üë§ message.author: ${message.author}`);
            console.log(`   üÜî autorMensagem: ${autorMensagem}`);
            
            try {
                const contact = await message.getContact();
                console.log(`   üìû Contact info:`, {
                    id: contact.id._serialized,
                    number: contact.number,
                    pushname: contact.pushname,
                    name: contact.name,
                    isMyContact: contact.isMyContact
                });
            } catch (err) {
                console.log(`   ‚ö†Ô∏è Erro ao obter contato: ${err.message}`);
            }
        }
        
        console.log(`üîç Debug: Verificando admin para ${autorMensagem}, resultado: ${isAdmin}`);

        // === COMANDOS ADMINISTRATIVOS ===
        // Verificar se √© admin global OU admin do grupo
        let isAdminDoGrupo = false;
        
        // S√≥ verificar admin do grupo se for mensagem de grupo
        if (message.from.endsWith('@g.us')) {
            isAdminDoGrupo = await isAdminGrupo(message.from, autorMensagem);
            console.log(`üîç Debug admin grupo: ${autorMensagem} √© admin do grupo? ${isAdminDoGrupo}`);
        }
        
        const isAdminQualquer = isAdmin || isAdminDoGrupo;
        console.log(`üîç Debug final: isAdminQualquer = ${isAdminQualquer} (global: ${isAdmin}, grupo: ${isAdminDoGrupo})`);
        
        if (isAdminQualquer) {
            const comando = message.body.toLowerCase().trim();

            if (comando === '.ia') {
                const statusIA = ia.getStatusDetalhado();
                await message.reply(statusIA);
                console.log(`üß† Comando .ia executado`);
                return;
            }

            // === COMANDO DEBUG MENSAGENS DE SISTEMA ===
            if (comando === '.debug') {
                try {
                    const chat = await client.getChatById(message.from);
                    const mensagens = await chat.fetchMessages({ limit: 20 });

                    let debugInfo = `üîç *DEBUG MENSAGENS (√∫ltimas 20)*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

                    mensagens.forEach((msg, index) => {
                        const timestamp = new Date(msg.timestamp * 1000).toLocaleString();
                        debugInfo += `${index + 1}. *Tipo:* ${msg.type}\n`;
                        debugInfo += `   *Timestamp:* ${timestamp}\n`;
                        debugInfo += `   *Author:* ${msg.author || 'Sistema'}\n`;
                        debugInfo += `   *Body:* "${msg.body || 'N/A'}"\n\n`;
                    });

                    await message.reply(debugInfo);
                    console.log(`üîç Comando .debug executado`);
                } catch (error) {
                    await message.reply(`‚ùå Erro no debug: ${error.message}`);
                }
                return;
            }

            if (comando === '.retry') {
                const pendenciasAtivas = Object.values(pagamentosPendentes);
                let statusRetry = `üîÑ *STATUS RETRY SILENCIOSO*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

                if (pendenciasAtivas.length === 0) {
                    statusRetry += `‚úÖ Nenhum pagamento pendente\n`;
                    statusRetry += `‚èπÔ∏è Timer: ${timerRetryPagamentos ? 'ATIVO' : 'PARADO'}\n`;
                } else {
                    statusRetry += `‚è≥ Pagamentos pendentes: ${pendenciasAtivas.length}\n\n`;

                    pendenciasAtivas.forEach((pendencia, index) => {
                        const tempoRestante = Math.max(0, Math.floor((pendencia.expira - Date.now()) / 60000));
                        const tempoDecorrido = Math.floor((Date.now() - pendencia.timestamp) / 60000);

                        statusRetry += `${index + 1}. ${pendencia.referencia}\n`;
                        statusRetry += `   üí∞ Valor: ${pendencia.valorComprovante}MT\n`;
                        statusRetry += `   üîÑ Tentativas: ${pendencia.tentativas}\n`;
                        statusRetry += `   ‚è∞ H√° ${tempoDecorrido}min (${tempoRestante}min restantes)\n\n`;
                    });

                    statusRetry += `üîÑ Timer: ${timerRetryPagamentos ? 'ATIVO' : 'PARADO'}\n`;
                    statusRetry += `‚è±Ô∏è Pr√≥xima verifica√ß√£o: ${RETRY_INTERVAL/1000}s\n`;
                }

                await message.reply(statusRetry);
                console.log(`üîÑ Comando .retry executado`);
                return;
            }

            // === COMANDO CANCELAR REFER√äNCIA AUTOM√ÅTICA ===
            if (comando.startsWith('.cancelar ')) {
                const codigo = comando.replace('.cancelar ', '').trim().toUpperCase();

                if (!codigo) {
                    await message.reply('‚ùå Use: .cancelar CODIGO\nExemplo: .cancelar ABC123');
                    return;
                }

                // Verificar se o c√≥digo existe
                const clienteId = codigosReferencia[codigo];
                if (!clienteId) {
                    await message.reply(`‚ùå C√≥digo de refer√™ncia *${codigo}* n√£o encontrado.`);
                    return;
                }

                const referencia = referenciasClientes[clienteId];
                if (!referencia) {
                    await message.reply(`‚ùå Dados da refer√™ncia *${codigo}* n√£o encontrados.`);
                    return;
                }

                // Verificar se quem est√° cancelando √© o convidador
                const autorMensagem = message.author || message.from;
                if (referencia.convidadoPor !== autorMensagem) {
                    await message.reply(`‚ùå Apenas *${referencia.nomeConvidador}* pode cancelar esta refer√™ncia.`);
                    return;
                }

                // Verificar se √© uma refer√™ncia autom√°tica
                const metodosAutomaticos = ['AUTO_INTELIGENTE', 'AUTO_ANALISE_MENSAGENS'];
                if (!metodosAutomaticos.includes(referencia.metodoDeteccao)) {
                    await message.reply(`‚ùå Apenas refer√™ncias criadas automaticamente podem ser canceladas.\nPara refer√™ncias manuais, contacte o administrador.`);
                    return;
                }

                // Verificar se j√° teve atividade (compras)
                if (referencia.comprasRealizadas > 0) {
                    await message.reply(`‚ùå N√£o √© poss√≠vel cancelar - cliente j√° realizou ${referencia.comprasRealizadas} compra(s).\nContacte o administrador se necess√°rio.`);
                    return;
                }

                // Cancelar a refer√™ncia
                delete referenciasClientes[clienteId];
                delete codigosReferencia[codigo];

                const mensagemCancelamento = `‚úÖ *REFER√äNCIA CANCELADA*

üéØ **C√≥digo:** ${codigo}
üë§ **Cliente:** ${referencia.nomeConvidado}
üìÖ **Cancelado em:** ${new Date().toLocaleDateString('pt-PT')}

üí° A refer√™ncia foi removida do sistema.`;

                await message.reply(mensagemCancelamento);
                console.log(`üóëÔ∏è Refer√™ncia autom√°tica cancelada: ${codigo} por ${referencia.nomeConvidador}`);
                return;
            }

            if (comando === '.stats') {
                let stats = `üìä *ESTAT√çSTICAS*\n‚ö† NB: V√°lido apenas para Vodacom‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                
                Object.keys(CONFIGURACAO_GRUPOS).forEach(grupoId => {
                    const config = CONFIGURACAO_GRUPOS[grupoId];
                    const dados = historicoCompradores[grupoId];
                    const totalCompradores = dados ? Object.keys(dados.compradores || {}).length : 0;
                    
                    if (totalCompradores > 0) {
                        stats += `üè¢ *${config.nome}*\n`;
                        stats += `üë• ${totalCompradores} compradores\n\n`;
                    }
                });
                
                await message.reply(stats);
                return;
            }

            if (comando === '.bonus_stats') {
                let stats = `üéÅ *ESTAT√çSTICAS DO SISTEMA DE REFER√äNCIAS*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                
                // Estat√≠sticas gerais
                const totalCodigos = Object.keys(codigosReferencia).length;
                const totalReferencias = Object.keys(referenciasClientes).length;
                const totalUsuariosComBonus = Object.keys(bonusSaldos).length;
                const totalSaques = Object.keys(pedidosSaque).length;
                
                stats += `üìä **RESUMO GERAL:**\n`;
                stats += `   ‚Ä¢ C√≥digos gerados: ${totalCodigos}\n`;
                stats += `   ‚Ä¢ Refer√™ncias ativas: ${totalReferencias}\n`;
                stats += `   ‚Ä¢ Usu√°rios com b√¥nus: ${totalUsuariosComBonus}\n`;
                stats += `   ‚Ä¢ Saques solicitados: ${totalSaques}\n\n`;
                
                // Top convidadores
                const topConvidadores = Object.values(bonusSaldos)
                    .map(dados => ({
                        saldo: dados.saldo,
                        referencias: Object.keys(dados.detalhesReferencias || {}).length,
                        dados: dados
                    }))
                    .sort((a, b) => b.saldo - a.saldo)
                    .slice(0, 5);
                
                if (topConvidadores.length > 0) {
                    stats += `üèÜ **TOP 5 CONVIDADORES:**\n`;
                    topConvidadores.forEach((item, index) => {
                        const saldoGB = (item.saldo / 1024).toFixed(2);
                        stats += `   ${index + 1}. ${item.saldo}MB (${saldoGB}GB) - ${item.referencias} refer√™ncias\n`;
                    });
                    stats += `\n`;
                }
                
                // Estat√≠sticas de compras
                let totalComprasBonus = 0;
                let totalBonusDistribuido = 0;
                
                Object.values(bonusSaldos).forEach(saldo => {
                    if (saldo.detalhesReferencias) {
                        Object.values(saldo.detalhesReferencias).forEach(ref => {
                            totalComprasBonus += ref.compras || 0;
                            totalBonusDistribuido += ref.bonusGanho || 0;
                        });
                    }
                });
                
                stats += `üí∞ **B√îNUS DISTRIBU√çDOS:**\n`;
                stats += `   ‚Ä¢ Total de compras que geraram b√¥nus: ${totalComprasBonus}\n`;
                stats += `   ‚Ä¢ Total de MB distribu√≠dos: ${totalBonusDistribuido}MB\n`;
                stats += `   ‚Ä¢ Equivalente em GB: ${(totalBonusDistribuido / 1024).toFixed(2)}GB\n\n`;
                
                // Saques pendentes
                const saquesPendentes = Object.values(pedidosSaque).filter(p => p.status === 'pendente');
                if (saquesPendentes.length > 0) {
                    stats += `‚è≥ **SAQUES PENDENTES:** ${saquesPendentes.length}\n`;
                    const totalPendente = saquesPendentes.reduce((sum, p) => sum + p.quantidade, 0);
                    stats += `   ‚Ä¢ Valor total: ${totalPendente}MB (${(totalPendente/1024).toFixed(2)}GB)\n\n`;
                }
                
                stats += `üìà **SISTEMA DE REFER√äNCIAS ATIVO E FUNCIONANDO!**`;
                
                await message.reply(stats);
                return;
            }

            // === COMANDOS DO SISTEMA DE PACOTES ===
            if (sistemaPacotes) {
                
                // .pacote DIAS REF NUMERO - Criar pacote
                if (comando.startsWith('.pacote ')) {
                    console.log(`üîß DEBUG: Comando .pacote detectado!`);
                    console.log(`üîß DEBUG: sistemaPacotes = ${sistemaPacotes ? 'INICIALIZADO' : 'NULL'}`);
                    console.log(`üîß DEBUG: SISTEMA_PACOTES_ENABLED = ${process.env.SISTEMA_PACOTES_ENABLED}`);
                    
                    if (!sistemaPacotes) {
                        await message.reply(`‚ùå *SISTEMA DE PACOTES DESABILITADO*\n\nO sistema de pacotes autom√°ticos n√£o est√° ativo neste servidor.\n\nVerifique as configura√ß√µes de ambiente.`);
                        return;
                    }
                    const partes = message.body.trim().split(' ');
                    
                    if (partes.length < 4) {
                        await message.reply(`‚ùå *USO INCORRETO*\n\n‚úÖ **Formato correto:**\n*.pacote DIAS REF NUMERO*\n\nüìù **Exemplos:**\n‚Ä¢ *.pacote 3 ABC123 845123456*\n‚Ä¢ *.pacote 30 XYZ789 847654321*\n\nüì¶ **Tipos dispon√≠veis:**\n‚Ä¢ 3 - Pacote de 3 dias (300MB)\n‚Ä¢ 5 - Pacote de 5 dias (500MB)\n‚Ä¢ 15 - Pacote de 15 dias (1.5GB)\n‚Ä¢ 30 - Pacote de 30 dias (3GB)`);
                        return;
                    }
                    
                    const [, diasPacote, referencia, numero] = partes;
                    const grupoId = message.from;
                    
                    console.log(`üì¶ COMANDO PACOTE: Dias=${diasPacote}, Ref=${referencia}, Numero=${numero}`);
                    
                    const resultado = await sistemaPacotes.processarComprovante(referencia, numero, grupoId, diasPacote);
                    
                    if (resultado.sucesso) {
                        await message.reply(resultado.mensagem);
                    } else {
                        await message.reply(`‚ùå **ERRO AO CRIAR PACOTE**\n\n‚ö†Ô∏è ${resultado.erro}\n\nüí° **Verificar:**\n‚Ä¢ Dias v√°lidos (3, 5, 15, 30)\n‚Ä¢ Refer√™ncia n√£o est√° duplicada`);
                    }
                    return;
                }
                
                // .pacotes_ativos - Listar clientes com pacotes ativos (do grupo atual)
                if (comando === '.pacotes_ativos') {
                    const lista = sistemaPacotes.listarClientesAtivos(message.from);
                    await message.reply(lista);
                    return;
                }
                
                // .pacotes_stats - Estat√≠sticas do sistema de pacotes
                if (comando === '.pacotes_stats') {
                    const stats = sistemaPacotes.obterEstatisticas();
                    await message.reply(stats);
                    return;
                }

                // .pacotes_todos - Listar pacotes de TODOS os grupos (apenas admins globais)
                if (comando === '.pacotes_todos') {
                    if (!isAdministrador(autorMensagem)) {
                        await message.reply('‚ùå *Acesso negado!* Apenas administradores globais podem ver pacotes de todos os grupos.');
                        return;
                    }
                    const lista = sistemaPacotes.listarClientesAtivos(null); // null = todos os grupos
                    await message.reply(lista);
                    return;
                }
                
                // .cancelar_pacote NUMERO REF - Cancelar pacote
                if (comando.startsWith('.cancelar_pacote ')) {
                    const partes = message.body.trim().split(' ');
                    
                    if (partes.length < 3) {
                        await message.reply(`‚ùå *USO INCORRETO*\n\n‚úÖ **Formato correto:**\n*.cancelar_pacote NUMERO REFERENCIA*\n\nüìù **Exemplo:**\n‚Ä¢ *.cancelar_pacote 845123456 ABC123*`);
                        return;
                    }
                    
                    const [, numero, referencia] = partes;
                    const resultado = sistemaPacotes.cancelarPacote(numero, referencia);
                    await message.reply(resultado);
                    return;
                }

                // .validade NUMERO - Verificar validade do pacote (comando para CLIENTES)
                if (comando.startsWith('.validade ')) {
                    const partes = message.body.trim().split(' ');
                    
                    if (partes.length < 2) {
                        await message.reply(`‚ùå *USO INCORRETO*\n\n‚úÖ **Formato correto:**\n*.validade NUMERO*\n\nüìù **Exemplo:**\n‚Ä¢ *.validade 845123456*\n\nüí° Digite seu n√∫mero para verificar a validade do seu pacote de 100MB di√°rios.`);
                        return;
                    }
                    
                    const numero = partes[1];
                    const resultado = sistemaPacotes.verificarValidadePacote(numero);
                    
                    await message.reply(resultado);
                    return;
                }
                
                // .sistema_pacotes - Status do sistema
                if (comando === '.sistema_pacotes') {
                    const status = sistemaPacotes.getStatus();
                    let resposta = `üì¶ *STATUS DO SISTEMA DE PACOTES*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                    resposta += `üü¢ **Status:** ${status.ativo ? 'ATIVO' : 'INATIVO'}\n`;
                    resposta += `üë• **Clientes ativos:** ${status.clientesAtivos}\n`;
                    resposta += `‚è±Ô∏è **Verifica√ß√£o:** ${status.intervalVerificacao/60000} min\n`;
                    resposta += `üì¶ **Tipos dispon√≠veis:** ${status.tiposPacotes.join(', ')}\n`;
                    resposta += `üìä **Hist√≥rico:** ${status.historicoSize} registros\n\n`;
                    resposta += `üîß **Comandos Administrativos:**\n`;
                    resposta += `‚Ä¢ *.pacote DIAS REF NUMERO* - Criar pacote\n`;
                    resposta += `‚Ä¢ *.pacotes_ativos* - Listar ativos\n`;
                    resposta += `‚Ä¢ *.pacotes_stats* - Estat√≠sticas\n`;
                    resposta += `‚Ä¢ *.cancelar_pacote NUMERO REF* - Cancelar\n\n`;
                    resposta += `üë§ **Comando para Clientes:**\n`;
                    resposta += `‚Ä¢ *.validade NUMERO* - Verificar validade do pacote\n\n`;
                    resposta += `‚ö° *Sistema funcionando automaticamente!*`;
                    
                    await message.reply(resposta);
                    return;
                }
            }

            // === COMANDOS DO SISTEMA DE COMPRAS ===
            if (sistemaCompras) {
                // .ranking - Mostrar ranking completo de compradores
                if (comando === '.ranking') {
                    try {
                        const ranking = await sistemaCompras.obterRankingCompletoGrupo(message.from);
                        
                        if (ranking.length === 0) {
                            await message.reply(`üìä *RANKING DE COMPRADORES*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüö´ Nenhum comprador registrado hoje.`);
                            return;
                        }
                        
                        let mensagem = `üìä *RANKING DE COMPRADORES*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                        let mentions = [];
                        
                        for (let i = 0; i < ranking.length; i++) {
                            const item = ranking[i];
                            const contactId = item.numero + '@c.us';
                            
                            // Obter informa√ß√µes do contato
                            try {
                                const contact = await client.getContactById(contactId);
                                
                                // Prioridade: nome salvo > nome do perfil > n√∫mero
                                const nomeExibicao = contact.name || contact.pushname || item.numero;
                                const numeroLimpo = contact.id.user; // N√∫mero sem @ e sem +
                                
                                const posicaoEmoji = i === 0 ? 'ü•á' : i === 1 ? 'ü•à' : i === 2 ? 'ü•â' : `${item.posicao}¬∫`;
                                const megasFormatados = item.megas >= 1024 ? 
                                    `${(item.megas/1024).toFixed(1)}GB` : `${item.megas}MB`;
                                
                                mensagem += `${posicaoEmoji} @${numeroLimpo}\n`;
                                mensagem += `   üíæ ${megasFormatados} no grupo (${item.compras}x)\n`;
                                mensagem += `   üìä Total: ${item.megasTotal >= 1024 ? (item.megasTotal/1024).toFixed(1)+'GB' : item.megasTotal+'MB'}\n\n`;
                                
                                mentions.push(contactId);
                            } catch (error) {
                                // Se n√£o conseguir obter o contato, usar apenas o n√∫mero
                                const posicaoEmoji = i === 0 ? 'ü•á' : i === 1 ? 'ü•à' : i === 2 ? 'ü•â' : `${item.posicao}¬∫`;
                                const megasFormatados = item.megas >= 1024 ? 
                                    `${(item.megas/1024).toFixed(1)}GB` : `${item.megas}MB`;
                                
                                mensagem += `${posicaoEmoji} @${item.numero}\n`;
                                mensagem += `   üíæ ${megasFormatados} no grupo (${item.compras}x)\n`;
                                mensagem += `   üìä Total: ${item.megasTotal >= 1024 ? (item.megasTotal/1024).toFixed(1)+'GB' : item.megasTotal+'MB'}\n\n`;
                                
                                mentions.push(contactId);
                            }
                        }
                        
                        mensagem += `üèÜ *Total de compradores no grupo: ${ranking.length}*`;
                        
                        await client.sendMessage(message.from, mensagem, { mentions: mentions });
                        return;
                    } catch (error) {
                        console.error('‚ùå Erro ao obter ranking:', error);
                        await message.reply(`‚ùå *ERRO*\n\nN√£o foi poss√≠vel obter o ranking de compradores.\n\n‚ö†Ô∏è Erro: ${error.message}`);
                        return;
                    }
                }
                
                // .inativos - Mostrar compradores inativos (mais de 10 dias sem comprar)
                if (comando === '.inativos') {
                    try {
                        const inativos = await sistemaCompras.obterInativos();
                        
                        if (inativos.length === 0) {
                            await message.reply(`üò¥ *COMPRADORES INATIVOS*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüéâ Todos os compradores est√£o ativos!\nNingu√©m est√° h√° mais de 10 dias sem comprar.`);
                            return;
                        }
                        
                        let mensagem = `üò¥ *COMPRADORES INATIVOS*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
                        mensagem += `‚è∞ Mais de 10 dias sem comprar\n\n`;
                        let mentions = [];
                        
                        for (let i = 0; i < Math.min(inativos.length, 20); i++) {
                            const item = inativos[i];
                            const contactId = item.numero + '@c.us';
                            
                            // Obter informa√ß√µes do contato
                            try {
                                const contact = await client.getContactById(contactId);
                                
                                // Prioridade: nome salvo > nome do perfil > n√∫mero
                                const nomeExibicao = contact.name || contact.pushname || item.numero;
                                const numeroLimpo = contact.id.user; // N√∫mero sem @ e sem +
                                
                                const totalFormatado = item.megasTotal >= 1024 ? 
                                    `${(item.megasTotal/1024).toFixed(1)}GB` : `${item.megasTotal}MB`;
                                
                                mensagem += `üë§ @${numeroLimpo}\n`;
                                mensagem += `   ‚è∞ ${item.diasSemComprar} dias sem comprar\n`;
                                mensagem += `   üìä Total: ${item.totalCompras}x compras (${totalFormatado})\n\n`;
                                
                                mentions.push(contactId);
                            } catch (error) {
                                // Se n√£o conseguir obter o contato, usar apenas o n√∫mero
                                const totalFormatado = item.megasTotal >= 1024 ? 
                                    `${(item.megasTotal/1024).toFixed(1)}GB` : `${item.megasTotal}MB`;
                                
                                mensagem += `üë§ @${item.numero}\n`;
                                mensagem += `   ‚è∞ ${item.diasSemComprar} dias sem comprar\n`;
                                mensagem += `   üìä Total: ${item.totalCompras}x compras (${totalFormatado})\n\n`;
                                
                                mentions.push(contactId);
                            }
                        }
                        
                        if (inativos.length > 20) {
                            mensagem += `... e mais ${inativos.length - 20} compradores inativos\n\n`;
                        }
                        
                        mensagem += `üò¥ *Total de inativos: ${inativos.length}*`;
                        
                        await client.sendMessage(message.from, mensagem, { mentions: mentions });
                        return;
                    } catch (error) {
                        console.error('‚ùå Erro ao obter inativos:', error);
                        await message.reply(`‚ùå *ERRO*\n\nN√£o foi poss√≠vel obter a lista de inativos.\n\n‚ö†Ô∏è Erro: ${error.message}`);
                        return;
                    }
                }
                
                // .semcompra - Mostrar usu√°rios que nunca compraram
                if (comando === '.semcompra') {
                    try {
                        const semCompra = await sistemaCompras.obterSemCompra();
                        
                        if (semCompra.length === 0) {
                            await message.reply(`üÜï *USU√ÅRIOS SEM COMPRAS*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n‚ú® Todos os usu√°rios registrados j√° fizeram pelo menos uma compra!`);
                            return;
                        }
                        
                        let mensagem = `üÜï *USU√ÅRIOS SEM COMPRAS*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
                        mensagem += `üë• Nunca fizeram compras\n\n`;
                        let mentions = [];
                        
                        for (let i = 0; i < Math.min(semCompra.length, 30); i++) {
                            const item = semCompra[i];
                            const contactId = item.numero + '@c.us';
                            
                            // Obter informa√ß√µes do contato
                            try {
                                const contact = await client.getContactById(contactId);
                                
                                // Prioridade: nome salvo > nome do perfil > n√∫mero
                                const nomeExibicao = contact.name || contact.pushname || item.numero;
                                const numeroLimpo = contact.id.user; // N√∫mero sem @ e sem +
                                
                                mensagem += `üë§ @${numeroLimpo}\n`;
                                mensagem += `   üìÖ Registrado: ${new Date(item.primeiraCompra).toLocaleDateString('pt-BR')}\n`;
                                mensagem += `   üí∞ Compras: ${item.totalCompras} (${item.megasTotal}MB)\n\n`;
                                
                                mentions.push(contactId);
                            } catch (error) {
                                // Se n√£o conseguir obter o contato, usar apenas o n√∫mero
                                mensagem += `üë§ @${item.numero}\n`;
                                mensagem += `   üìÖ Registrado: ${new Date(item.primeiraCompra).toLocaleDateString('pt-BR')}\n`;
                                mensagem += `   üí∞ Compras: ${item.totalCompras} (${item.megasTotal}MB)\n\n`;
                                
                                mentions.push(contactId);
                            }
                        }
                        
                        if (semCompra.length > 30) {
                            mensagem += `... e mais ${semCompra.length - 30} usu√°rios sem compras\n\n`;
                        }
                        
                        mensagem += `üÜï *Total sem compras: ${semCompra.length}*\n\n`;
                        mensagem += `üí° *Dica:* Considere campanhas de incentivo para estes usu√°rios!`;
                        
                        await client.sendMessage(message.from, mensagem, { mentions: mentions });
                        return;
                    } catch (error) {
                        console.error('‚ùå Erro ao obter sem compra:', error);
                        await message.reply(`‚ùå *ERRO*\n\nN√£o foi poss√≠vel obter a lista de usu√°rios sem compras.\n\n‚ö†Ô∏è Erro: ${error.message}`);
                        return;
                    }
                }

                // .resetranking - Reset manual do ranking di√°rio (ADMIN APENAS)
                if (comando === '.resetranking') {
                    try {
                        // Verificar permiss√£o de admin
                        const admins = ['258861645968', '258123456789', '258852118624']; // Lista de admins
                        if (!admins.includes(remetente)) {
                            return; // Falha silenciosa para seguran√ßa
                        }

                        console.log(`üîÑ RESET: Admin ${remetente} solicitou reset do ranking di√°rio`);

                        // Executar reset atrav√©s do sistema de compras
                        const resultado = await sistemaCompras.resetarRankingGrupo(message.from);

                        if (resultado.success) {
                            let resposta = `üîÑ *RANKING RESETADO*\n\n`;
                            resposta += `‚úÖ *Status:* ${resultado.message}\n`;
                            resposta += `üë• *Clientes afetados:* ${resultado.clientesResetados}\n`;
                            resposta += `üìÖ *Data do reset:* ${new Date(resultado.dataReset).toLocaleString('pt-BR')}\n`;
                            resposta += `üëë *Executado por:* Administrador\n\n`;
                            resposta += `üí° *Pr√≥ximos passos:*\n`;
                            resposta += `‚Ä¢ Use .ranking para verificar novo estado\n`;
                            resposta += `‚Ä¢ Novos comprovantes come√ßar√£o nova contagem`;

                            await message.reply(resposta);
                        } else {
                            await message.reply(`‚ùå *ERRO NO RESET*\n\n‚ö†Ô∏è ${resultado.message}\n\nüí° Contate o suporte t√©cnico se o problema persistir`);
                        }

                    } catch (error) {
                        console.error('‚ùå Erro no comando .resetranking:', error);
                        await message.reply(`‚ùå *ERRO INTERNO*\n\n‚ö†Ô∏è N√£o foi poss√≠vel resetar o ranking\n\nüìù Erro: ${error.message}`);
                    }
                    return;
                }
                
                // .setboasvindas - Definir mensagem de boas-vindas personalizada (ADMIN APENAS)
                if (comando.startsWith('.setboasvindas ')) {
                    if (!isAdmin) {
                        await message.reply('‚ùå Apenas administradores podem usar este comando!');
                        return;
                    }
                    
                    try {
                        // Extrair a nova mensagem
                        const novaMensagem = message.body.substring('.setboasvindas '.length).trim();
                        
                        if (novaMensagem.length === 0) {
                            await message.reply(`‚ùå *ERRO*\n\nUso: .setboasvindas [mensagem]\n\nüìù *Placeholder dispon√≠vel:*\n@NOME - ser√° substitu√≠do pelo nome do novo membro\n\n*Exemplo:*\n.setboasvindas üéâ Bem-vindo @NOME! Nosso sistema √© 100% autom√°tico!`);
                            return;
                        }
                        
                        if (novaMensagem.length > 2000) {
                            await message.reply(`‚ùå *MENSAGEM MUITO LONGA*\n\nM√°ximo: 2000 caracteres\nAtual: ${novaMensagem.length} caracteres`);
                            return;
                        }
                        
                        // Salvar no arquivo (simula√ß√£o - na pr√°tica voc√™ salvaria em BD)
                        console.log(`üîß ADMIN ${remetente} definiu nova mensagem de boas-vindas para grupo ${message.from}`);
                        
                        const resposta = `‚úÖ *MENSAGEM DE BOAS-VINDAS ATUALIZADA*\n\n` +
                                        `üë§ *Admin:* ${message._data.notifyName || 'Admin'}\n` +
                                        `üì± *Grupo:* ${message.from}\n` +
                                        `üìù *Caracteres:* ${novaMensagem.length}/2000\n\n` +
                                        `üìã *Pr√©via da mensagem:*\n` +
                                        `${novaMensagem.substring(0, 200)}${novaMensagem.length > 200 ? '...' : ''}\n\n` +
                                        `‚úÖ A nova mensagem ser√° usada para pr√≥ximos membros!\n` +
                                        `üí° Use .testboasvindas para testar`;
                        
                        await message.reply(resposta);
                        
                    } catch (error) {
                        console.error('‚ùå Erro no comando .setboasvindas:', error);
                        await message.reply(`‚ùå *ERRO*\n\nN√£o foi poss√≠vel atualizar a mensagem\n\nüìù Erro: ${error.message}`);
                    }
                    return;
                }
                
                // .getboasvindas - Ver mensagem atual de boas-vindas (ADMIN APENAS)
                if (comando === '.getboasvindas') {
                    if (!isAdmin) {
                        await message.reply('‚ùå Apenas administradores podem usar este comando!');
                        return;
                    }
                    
                    try {
                        const configGrupo = getConfiguracaoGrupo(message.from);
                        if (!configGrupo) {
                            await message.reply('‚ùå Este grupo n√£o est√° configurado!');
                            return;
                        }
                        
                        const mensagemAtual = configGrupo.boasVindas || 'Mensagem padr√£o (n√£o personalizada)';
                        
                        const resposta = `üìã *MENSAGEM DE BOAS-VINDAS ATUAL*\n\n` +
                                        `üì± *Grupo:* ${configGrupo.nome}\n` +
                                        `üìù *Caracteres:* ${mensagemAtual.length}/2000\n\n` +
                                        `üìã *Mensagem:*\n${mensagemAtual}\n\n` +
                                        `üí° Use .setboasvindas para alterar\n` +
                                        `üß™ Use .testboasvindas para testar`;
                        
                        await message.reply(resposta);
                        
                    } catch (error) {
                        console.error('‚ùå Erro no comando .getboasvindas:', error);
                        await message.reply(`‚ùå *ERRO*\n\nN√£o foi poss√≠vel obter a mensagem\n\nüìù Erro: ${error.message}`);
                    }
                    return;
                }
                
                // .testboasvindas - Testar mensagem de boas-vindas (ADMIN APENAS)
                if (comando === '.testboasvindas') {
                    if (!isAdmin) {
                        await message.reply('‚ùå Apenas administradores podem usar este comando!');
                        return;
                    }

                    try {
                        await message.reply('üß™ *TESTE DE BOAS-VINDAS*\n\nEnviando mensagem de teste...');

                        // Enviar boas-vindas para o pr√≥prio admin como teste
                        setTimeout(async () => {
                            await enviarBoasVindas(message.from, autorMensagem);
                        }, 1000);

                    } catch (error) {
                        console.error('‚ùå Erro no comando .testboasvindas:', error);
                        await message.reply(`‚ùå *ERRO*\n\nN√£o foi poss√≠vel testar a mensagem\n\nüìù Erro: ${error.message}`);
                    }
                    return;
                }

                // .testreferencia - Testar sistema de refer√™ncia autom√°tica (ADMIN APENAS)
                if (comando === '.testreferencia') {
                    if (!isAdmin) {
                        await message.reply('‚ùå Apenas administradores podem usar este comando!');
                        return;
                    }

                    try {
                        await message.reply('üß™ *TESTE DE REFER√äNCIA AUTOM√ÅTICA*\n\nTestando cria√ß√£o de refer√™ncia autom√°tica...');

                        // Simular cria√ß√£o de refer√™ncia autom√°tica usando o admin como convidador e um ID fict√≠cio como convidado
                        const convidadorTest = autorMensagem;
                        const convidadoTest = '258000000000@c.us'; // ID fict√≠cio para teste
                        const grupoTest = message.from;

                        setTimeout(async () => {
                            try {
                                const resultado = await criarReferenciaAutomatica(convidadorTest, convidadoTest, grupoTest);

                                if (resultado) {
                                    await message.reply(
                                        `‚úÖ *TESTE DE REFER√äNCIA - SUCESSO!*\n\n` +
                                        `üéØ **Resultado do teste:**\n` +
                                        `üë§ Convidador: ${await obterNomeContato(convidadorTest)}\n` +
                                        `üë• Convidado: ${convidadoTest.replace('@c.us', '')}\n` +
                                        `üîó C√≥digo gerado: ${resultado.codigo}\n` +
                                        `ü§ñ Sistema: ${resultado.automatico ? 'Autom√°tico' : 'Manual'}\n\n` +
                                        `üìã **Status:**\n` +
                                        `‚úÖ Refer√™ncia criada com sucesso\n` +
                                        `‚úÖ Notifica√ß√£o enviada\n` +
                                        `‚úÖ Dados salvos\n\n` +
                                        `üí° *Sistema de refer√™ncia autom√°tica est√° funcionando!*`
                                    );
                                } else {
                                    await message.reply(
                                        `‚ùå *TESTE DE REFER√äNCIA - FALHOU!*\n\n` +
                                        `‚ö†Ô∏è A cria√ß√£o de refer√™ncia autom√°tica falhou.\n` +
                                        `üìù Verifique os logs para mais detalhes.`
                                    );
                                }
                            } catch (error) {
                                await message.reply(
                                    `‚ùå *ERRO NO TESTE DE REFER√äNCIA*\n\n` +
                                    `üö® Erro: ${error.message}\n\n` +
                                    `üìù Verifique a implementa√ß√£o da fun√ß√£o criarReferenciaAutomatica`
                                );
                            }
                        }, 1000);

                    } catch (error) {
                        console.error('‚ùå Erro no comando .testreferencia:', error);
                        await message.reply(`‚ùå *ERRO*\n\nN√£o foi poss√≠vel executar o teste\n\nüìù Erro: ${error.message}`);
                    }
                    return;
                }
                
                // .bonus NUMERO QUANTIDADE - Dar b√¥nus manual (ADMIN APENAS)
                if (comando.startsWith('.bonus ')) {
                    try {
                        console.log(`üîç Debug .bonus: autorMensagem = ${autorMensagem}`);
                        // Verificar permiss√£o de admin
                        const admins = ['258861645968', '258123456789', '258852118624']; // Lista de admins
                        const numeroAdmin = autorMensagem.replace('@c.us', '');
                        if (!admins.includes(numeroAdmin)) {
                            console.log(`‚ùå Admin n√£o autorizado: ${autorMensagem} (${numeroAdmin})`);
                            return; // Falha silenciosa para seguran√ßa
                        }

                        const parametros = comando.split(' ');
                        if (parametros.length < 3) {
                            await message.reply(`‚ùå *FORMATO INCORRETO*\n\n‚úÖ Use: *.bonus @usuario QUANTIDADE* ou *.bonus NUMERO QUANTIDADE*\nExemplos:\n‚Ä¢ *.bonus @258123456789 500MB*\n‚Ä¢ *.bonus 258123456789 500MB*`);
                            return;
                        }

                        let numeroDestino = parametros[1];
                        const quantidadeStr = parametros[2].toUpperCase();

                        // Verificar se √© men√ß√£o ou n√∫mero direto
                        if (numeroDestino.startsWith('@')) {
                            // Remover @ e verificar se tem men√ß√µes na mensagem
                            const numeroMencao = numeroDestino.substring(1);
                            if (message.mentionedIds && message.mentionedIds.length > 0) {
                                // Usar a primeira men√ß√£o encontrada
                                const mencaoId = message.mentionedIds[0];
                                numeroDestino = mencaoId.replace('@c.us', '');
                            } else {
                                // Tentar usar o n√∫mero ap√≥s @
                                numeroDestino = numeroMencao;
                            }
                        }

                        // Validar n√∫mero - aceitar 9 d√≠gitos (848715208) ou 12 d√≠gitos (258848715208)
                        if (!/^\d{9}$/.test(numeroDestino) && !/^\d{12}$/.test(numeroDestino)) {
                            await message.reply(`‚ùå *N√öMERO INV√ÅLIDO*\n\n‚úÖ Use formato:\n‚Ä¢ *.bonus @848715208 500MB* (9 d√≠gitos)\n‚Ä¢ *.bonus @258848715208 500MB* (12 d√≠gitos)\n‚Ä¢ *.bonus 848715208 500MB* (n√∫mero direto)`);
                            return;
                        }
                        
                        // Converter para formato completo se necess√°rio (adicionar 258 no in√≠cio)
                        if (numeroDestino.length === 9) {
                            numeroDestino = '258' + numeroDestino;
                        }

                        // Converter quantidade para MB
                        let quantidadeMB;
                        if (quantidadeStr.endsWith('GB')) {
                            const gb = parseFloat(quantidadeStr.replace('GB', ''));
                            if (isNaN(gb) || gb <= 0) {
                                await message.reply(`‚ùå Quantidade inv√°lida: *${quantidadeStr}*`);
                                return;
                            }
                            quantidadeMB = Math.round(gb * 1024);
                        } else if (quantidadeStr.endsWith('MB')) {
                            quantidadeMB = parseInt(quantidadeStr.replace('MB', ''));
                            if (isNaN(quantidadeMB) || quantidadeMB <= 0) {
                                await message.reply(`‚ùå Quantidade inv√°lida: *${quantidadeStr}*`);
                                return;
                            }
                        } else {
                            await message.reply(`‚ùå *FORMATO INV√ÅLIDO*\n\n‚úÖ Use: MB ou GB\nExemplos: 500MB, 1.5GB, 2GB`);
                            return;
                        }

                        const participantId = numeroDestino + '@c.us';
                        
                        // Inicializar saldo se n√£o existir
                        if (!bonusSaldos[participantId]) {
                            bonusSaldos[participantId] = {
                                saldo: 0,
                                detalhesReferencias: {},
                                historicoSaques: [],
                                totalReferencias: 0,
                                bonusAdmin: []
                            };
                        }

                        // Adicionar b√¥nus
                        bonusSaldos[participantId].saldo += quantidadeMB;
                        
                        // Registrar hist√≥rico de b√¥nus admin
                        if (!bonusSaldos[participantId].bonusAdmin) {
                            bonusSaldos[participantId].bonusAdmin = [];
                        }
                        
                        bonusSaldos[participantId].bonusAdmin.push({
                            quantidade: quantidadeMB,
                            data: new Date().toISOString(),
                            admin: autorMensagem,
                            motivo: 'B√¥nus administrativo'
                        });

                        // Sistema de cache otimizado - sem salvamento em arquivos

                        const quantidadeFormatada = quantidadeMB >= 1024 ? `${(quantidadeMB/1024).toFixed(2)}GB` : `${quantidadeMB}MB`;
                        const novoSaldo = bonusSaldos[participantId].saldo;
                        const novoSaldoFormatado = novoSaldo >= 1024 ? `${(novoSaldo/1024).toFixed(2)}GB` : `${novoSaldo}MB`;

                        console.log(`üéÅ ADMIN BONUS: ${autorMensagem} deu ${quantidadeFormatada} para ${numeroDestino}`);

                        // Notificar o usu√°rio que recebeu o b√¥nus
                        try {
                            await client.sendMessage(message.from, 
                                `üéÅ *B√îNUS ADMINISTRATIVO!*\n\n` +
                                `üíé @${numeroDestino}, recebeste *${quantidadeFormatada}* de b√¥nus!\n\n` +
                                `üë®‚Äçüíº *Ofertado por:* Administrador\n` +
                                `üí∞ *Novo saldo:* ${novoSaldoFormatado}\n\n` +
                                `${novoSaldo >= 1024 ? 'üöÄ *J√° podes sacar!* Use: *.sacar*' : 'üí° *Continua a acumular para sacar!*'}`, {
                                mentions: [participantId]
                            });
                        } catch (notificationError) {
                            console.error('‚ùå Erro ao enviar notifica√ß√£o de b√¥nus admin:', notificationError);
                        }

                        await message.reply(
                            `‚úÖ *B√îNUS ADMINISTRATIVO CONCEDIDO*\n\n` +
                            `üë§ Benefici√°rio: ${numeroDestino}\n` +
                            `üéÅ B√¥nus concedido: ${quantidadeFormatada}\n` +
                            `üí∞ Novo saldo: ${novoSaldoFormatado}\n` +
                            `üëë Concedido por: Administrador\n` +
                            `üìÖ Data: ${new Date().toLocaleString('pt-BR')}\n\n` +
                            `üí° *O usu√°rio foi notificado automaticamente*`
                        );
                        
                        return;
                    } catch (error) {
                        console.error('‚ùå Erro no comando .bonus:', error);
                        await message.reply(`‚ùå *ERRO INTERNO*\n\n‚ö†Ô∏è N√£o foi poss√≠vel conceder b√¥nus\n\nüìù Erro: ${error.message}`);
                        return;
                    }
                }
            }

            // === COMANDOS GOOGLE SHEETS ===
            if (comando === '.test_sheets') {
                console.log(`üß™ Testando Google Sheets...`);
                
                const resultado = await enviarParaGoogleSheets('TEST123', '99', '842223344', 'test_group', 'Teste Admin', 'TestUser');
                
                if (resultado.sucesso) {
                    await message.reply(`‚úÖ *Google Sheets funcionando!*\n\nüìä URL: ${GOOGLE_SHEETS_CONFIG.scriptUrl}\nüìù Row: ${resultado.row}\nüéâ Dados enviados com sucesso!`);
                } else {
                    await message.reply(`‚ùå *Google Sheets com problema!*\n\nüìä URL: ${GOOGLE_SHEETS_CONFIG.scriptUrl}\n‚ö†Ô∏è Erro: ${resultado.erro}\n\nüîß *Verifique:*\n‚Ä¢ Script publicado corretamente\n‚Ä¢ Permiss√µes do Google Sheets\n‚Ä¢ Internet funcionando`);
                }
                return;
            }

            if (comando === '.test_vision') {
                const visionStatus = ia.googleVisionEnabled;
                let resposta = `üîç *TESTE GOOGLE VISION*\n‚ö† NB: V√°lido apenas para Vodacom‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                
                if (visionStatus) {
                    resposta += `‚úÖ **Google Vision: ATIVO**\n`;
                    resposta += `üîß **Configura√ß√£o:**\n`;
                    resposta += `   ‚Ä¢ Timeout: ${ia.googleVisionTimeout}ms\n`;
                    resposta += `   ‚Ä¢ Fallback: GPT-4 Vision\n\n`;
                    resposta += `üìù **Para testar:**\n`;
                    resposta += `1. Envie uma imagem de comprovante\n`;
                    resposta += `2. Verifique nos logs qual m√©todo foi usado\n`;
                    resposta += `3. Google Vision ser√° tentado primeiro\n`;
                    resposta += `4. GPT-4 Vision como fallback\n\n`;
                    resposta += `üìä **Vantagens do m√©todo h√≠brido:**\n`;
                    resposta += `   ‚úÖ Maior precis√£o OCR\n`;
                    resposta += `   ‚úÖ Menor custo\n`;
                    resposta += `   ‚úÖ Mais r√°pido\n`;
                    resposta += `   ‚úÖ Sistema redundante`;
                } else {
                    resposta += `‚ùå **Google Vision: DESABILITADO**\n\n`;
                    resposta += `üîß **Para ativar:**\n`;
                    resposta += `1. Configure GOOGLE_APPLICATION_CREDENTIALS no .env\n`;
                    resposta += `2. Ou configure GOOGLE_VISION_API_KEY\n`;
                    resposta += `3. Defina GOOGLE_VISION_ENABLED=true\n\n`;
                    resposta += `üß† **Atualmente usando:**\n`;
                    resposta += `   ‚Ä¢ GPT-4 Vision apenas\n`;
                    resposta += `   ‚Ä¢ Funciona normalmente\n`;
                    resposta += `   ‚Ä¢ Sem redund√¢ncia`;
                }
                
                await message.reply(resposta);
                return;
            }

            // === COMANDO PARA ADICIONAR COMANDOS CUSTOMIZADOS ===
            if (message.body.startsWith('.addcomando ')) {
                const comandoParsado = parsearComandoCustomizado(message.body);
                
                if (!comandoParsado) {
                    await message.reply(`‚ùå *Sintaxe incorreta!*\n\n‚úÖ *Sintaxe correta:*\n\`.addcomando NomeComando(Sua resposta aqui)\`\n\nüìù *Exemplo:*\n\`.addcomando horario(Funcionamos de 8h √†s 18h)\`\n\n‚ö†Ô∏è *Importante:*\n‚Ä¢ Nome sem espa√ßos\n‚Ä¢ Resposta entre par√™nteses\n‚Ä¢ Pode usar quebras de linha`);
                    return;
                }
                
                try {
                    await adicionarComandoCustomizado(
                        message.from,
                        comandoParsado.nome,
                        comandoParsado.resposta,
                        message.author || message.from
                    );
                    
                    await message.reply(`‚úÖ *Comando criado com sucesso!*\n\nüîß **Comando:** \`${comandoParsado.nome}\`\nüìù **Resposta:** ${comandoParsado.resposta.substring(0, 100)}${comandoParsado.resposta.length > 100 ? '...' : ''}\n\nüí° **Para usar:** Digite apenas \`${comandoParsado.nome}\``);
                    console.log(`‚úÖ Admin ${message.author || message.from} criou comando '${comandoParsado.nome}' no grupo ${message.from}`);
                } catch (error) {
                    await message.reply(`‚ùå **Erro ao criar comando**\n\nTente novamente ou contacte o desenvolvedor.`);
                    console.error('‚ùå Erro ao adicionar comando customizado:', error);
                }
                return;
            }

            // === COMANDO PARA LISTAR COMANDOS CUSTOMIZADOS ===
            if (comando === '.comandos') {
                const grupoId = message.from;
                const comandosGrupo = comandosCustomizados[grupoId];
                
                if (!comandosGrupo || Object.keys(comandosGrupo).length === 0) {
                    await message.reply('üìã *Nenhum comando customizado criado ainda*\n\nüí° **Para criar:** `.addcomando nome(resposta)`');
                    return;
                }
                
                let listaComandos = 'üìã *COMANDOS CUSTOMIZADOS*\n‚ö† NB: V√°lido apenas para Vodacom‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';
                
                Object.keys(comandosGrupo).forEach(nome => {
                    const cmd = comandosGrupo[nome];
                    const preview = cmd.resposta.length > 50 ? 
                        cmd.resposta.substring(0, 50) + '...' : 
                        cmd.resposta;
                    
                    listaComandos += `üîß **${nome}**\nüìù ${preview}\n\n`;
                });
                
                listaComandos += `üìä **Total:** ${Object.keys(comandosGrupo).length} comando(s)`;
                
                await message.reply(listaComandos);
                return;
            }

            // === COMANDO PARA REMOVER COMANDOS CUSTOMIZADOS ===
            if (message.body.startsWith('.delcomando ')) {
                const nomeComando = message.body.replace('.delcomando ', '').trim().toLowerCase();
                
                if (!nomeComando) {
                    await message.reply(`‚ùå *Nome do comando √© obrigat√≥rio!*\n\n‚úÖ *Sintaxe:* \`.delcomando nomecomando\`\n\nüìù *Para ver comandos:* \`.comandos\``);
                    return;
                }
                
                try {
                    const removido = await removerComandoCustomizado(message.from, nomeComando);
                    
                    if (removido) {
                        await message.reply(`‚úÖ *Comando removido!*\n\nüóëÔ∏è **Comando:** \`${nomeComando}\`\n\nüìù **Para ver restantes:** \`.comandos\``);
                        console.log(`‚úÖ Admin ${message.author || message.from} removeu comando '${nomeComando}' do grupo ${message.from}`);
                    } else {
                        await message.reply(`‚ùå *Comando n√£o encontrado!*\n\nüîç **Comando:** \`${nomeComando}\`\nüìù **Ver comandos:** \`.comandos\``);
                    }
                } catch (error) {
                    await message.reply(`‚ùå **Erro ao remover comando**\n\nTente novamente ou contacte o desenvolvedor.`);
                    console.error('‚ùå Erro ao remover comando customizado:', error);
                }
                return;
            }

            if (comando === '.test_grupo') {
                const grupoAtual = message.from;
                const configGrupo = getConfiguracaoGrupo(grupoAtual);
                
                if (!configGrupo) {
                    await message.reply('‚ùå Este grupo n√£o est√° configurado!');
                    return;
                }
                
                console.log(`üß™ Testando Google Sheets para grupo: ${configGrupo.nome}`);
                
                const resultado = await enviarParaGoogleSheets('TEST999', '88', '847777777', grupoAtual, configGrupo.nome, 'TestAdmin');
                
                if (resultado.sucesso) {
                    await message.reply(`‚úÖ *Teste enviado para ${configGrupo.nome}!*\n\nüìä Row: ${resultado.row}\nüîç O celular deste grupo deve processar em at√© 30 segundos.\n\nüì± *Grupo ID:* \`${grupoAtual}\``);
                } else {
                    await message.reply(`‚ùå *Erro no teste:* ${resultado.erro}`);
                }
                return;
            }

            if (comando === '.grupos_status') {
                let resposta = `üìä *STATUS DOS GRUPOS*\n‚ö† NB: V√°lido apenas para Vodacom‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                
                for (const [grupoId, config] of Object.entries(CONFIGURACAO_GRUPOS)) {
                    const dadosGrupo = Array.from(cacheTransacoes.values()).filter(d => d.grupo_id === grupoId);
                    const hoje = dadosGrupo.filter(d => {
                        const dataItem = new Date(d.timestamp).toDateString();
                        return dataItem === new Date().toDateString();
                    });
                    
                    resposta += `üè¢ *${config.nome}*\n`;
                    resposta += `   üìà Total: ${dadosGrupo.length}\n`;
                    resposta += `   üìÖ Hoje: ${hoje.length}\n`;
                    resposta += `   üìä Sheets: ${dadosGrupo.filter(d => d.metodo === 'google_sheets').length}\n`;
                    resposta += `   üì± Backup: ${dadosGrupo.filter(d => d.metodo === 'whatsapp_backup').length}\n`;
                    resposta += `   üÜî ID: \`${grupoId}\`\n\n`;
                }
                
                await message.reply(resposta);
                return;
            }

            if (comando === '.sheets') {
                const dados = obterDadosTasker();
                const hoje = obterDadosTaskerHoje();
                const sheets = dados.filter(d => d.metodo === 'google_sheets').length;
                const whatsapp = dados.filter(d => d.metodo === 'whatsapp_backup').length;
                
                let resposta = `üìä *GOOGLE SHEETS STATUS*\n‚ö† NB: V√°lido apenas para Vodacom‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                resposta += `üìà Total enviado: ${dados.length}\n`;
                resposta += `üìÖ Hoje: ${hoje.length}\n`;
                resposta += `üìä Via Google Sheets: ${sheets}\n`;
                resposta += `üì± Via WhatsApp: ${whatsapp}\n`;
                resposta += `üì± Fila atual: ${filaMensagens.length}\n\n`;
                
                if (dados.length > 0) {
                    resposta += `üìã *√öltimos 5 enviados:*\n`;
                    dados.slice(-5).forEach((item, index) => {
                        const metodo = item.metodo === 'google_sheets' ? 'üìä' : 'üì±';
                        resposta += `${index + 1}. ${metodo} ${item.dados} (${item.grupo})\n`;
                    });
                }
                
                await message.reply(resposta);
                return;
            }

            if (comando.startsWith('.clear_grupo ')) {
                const nomeGrupo = comando.replace('.clear_grupo ', '');
                const antes = cacheTransacoes.size;

                // Remover transa√ß√µes do grupo espec√≠fico
                for (const [key, value] of cacheTransacoes.entries()) {
                    if (value.grupo && value.grupo.toLowerCase().includes(nomeGrupo.toLowerCase())) {
                        cacheTransacoes.delete(key);
                    }
                }

                const removidos = antes - cacheTransacoes.size;
                await message.reply(`üóëÔ∏è *${removidos} registros do grupo "${nomeGrupo}" removidos!*`);
                return;
            }

            if (comando === '.clear_sheets') {
                cacheTransacoes.clear();
                await message.reply('üóëÔ∏è *Cache de transa√ß√µes limpo!*');
                return;
            }

            // === COMANDOS TASKER - SISTEMA DE PACOTES ===
            
            // DEBUG: Verificar status do sistema de pacotes
            if (comando === '.debug_pacotes') {
                let resposta = `üîß *DEBUG SISTEMA PACOTES*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                resposta += `üîå SISTEMA_PACOTES_ENABLED: ${process.env.SISTEMA_PACOTES_ENABLED}\n`;
                resposta += `üì¶ sistemaPacotes: ${sistemaPacotes ? 'INICIALIZADO' : 'NULL'}\n`;
                resposta += `üë§ isAdminQualquer: ${isAdminQualquer}\n`;
                resposta += `üìù Comando original: "${message.body}"\n`;
                resposta += `üÜî Grupo ID: ${message.from}\n`;
                
                if (sistemaPacotes) {
                    resposta += `\n‚úÖ Sistema de Pacotes est√° ATIVO e funcionando!`;
                } else {
                    resposta += `\n‚ùå Sistema de Pacotes est√° DESABILITADO ou falhou ao inicializar!`;
                }
                
                await message.reply(resposta);
                return;
            }
            
            if (comando === '.pacotes_tasker') {
                const dadosPacotes = obterDadosPacotesTasker();
                
                if (dadosPacotes.length === 0) {
                    await message.reply(`üì¶ *DADOS TASKER - PACOTES*\n\n‚ùå Nenhum cliente com pacote ativo para o Tasker.`);
                    return;
                }
                
                let resposta = `üì¶ *DADOS TASKER - PACOTES* (${dadosPacotes.length})\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                
                dadosPacotes.forEach((cliente, index) => {
                    const proximaRenovacao = new Date(cliente.proximaRenovacao);
                    resposta += `${index + 1}. **${cliente.numero}**\n`;
                    resposta += `   üìã Ref: ${cliente.referenciaOriginal}\n`;
                    resposta += `   üì¶ Tipo: ${cliente.tipoPacote}\n`;
                    resposta += `   üìÖ Dias restantes: ${cliente.diasRestantes}\n`;
                    resposta += `   ‚è∞ Pr√≥xima: ${proximaRenovacao.toLocaleString('pt-BR')}\n\n`;
                });
                
                resposta += `üí° *O Tasker pode acessar estes dados via fun√ß√£o do bot para processar renova√ß√µes automaticamente.*`;
                
                await message.reply(resposta);
                return;
            }
            
            if (comando === '.renovacoes_tasker') {
                const renovacoesPendentes = obterRenovacoesPendentesTasker();
                
                if (renovacoesPendentes.length === 0) {
                    await message.reply(`üîÑ *RENOVA√á√ïES TASKER*\n\n‚úÖ Nenhuma renova√ß√£o pendente nas pr√≥ximas 6 horas.`);
                    return;
                }
                
                let resposta = `üîÑ *RENOVA√á√ïES TASKER* (${renovacoesPendentes.length})\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                
                renovacoesPendentes.forEach((cliente, index) => {
                    const proximaRenovacao = new Date(cliente.proximaRenovacao);
                    
                    resposta += `${index + 1}. **${cliente.numero}**\n`;
                    resposta += `   üìã Ref: ${cliente.referenciaOriginal}\n`;
                    resposta += `   üì¶ Tipo: ${cliente.tipoPacote}\n`;
                    resposta += `   üìÖ Dias restantes: ${cliente.diasRestantes}\n`;
                    resposta += `   ‚è∞ Pr√≥xima renova√ß√£o: ${proximaRenovacao.toLocaleString('pt-BR')}\n\n`;
                });
                
                resposta += `üí° *Hor√°rios j√° calculados com 2h de antecipa√ß√£o em rela√ß√£o ao dia anterior.*`;
                
                await message.reply(resposta);
                return;
            }

            // === COMANDOS DO SISTEMA DE COMPRAS ===
            
            if (comando === '.compras_stats') {
                if (!sistemaCompras) {
                    await message.reply('‚ùå Sistema de compras n√£o est√° ativo!');
                    return;
                }
                
                const estatisticas = await sistemaCompras.obterEstatisticas();
                
                let resposta = `üõí *ESTAT√çSTICAS DE COMPRAS*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                resposta += `üìä Total de compradores: ${estatisticas.totalCompradores}\n`;
                resposta += `üìÖ Compradores hoje: ${estatisticas.compradoresHoje}\n`;
                resposta += `‚è≥ Compras pendentes: ${estatisticas.comprasPendentes}\n`;
                resposta += `üíæ Total de megas hoje: ${estatisticas.totalMegasHoje >= 1024 ? (estatisticas.totalMegasHoje/1024).toFixed(1) + ' GB' : estatisticas.totalMegasHoje + ' MB'}\n\n`;
                
                if (estatisticas.ranking.length > 0) {
                    resposta += `üèÜ *TOP 5 RANKING HOJE:*\n`;
                    estatisticas.ranking.slice(0, 5).forEach((cliente, index) => {
                        const megasFormatados = cliente.megasHoje >= 1024 ? `${(cliente.megasHoje/1024).toFixed(1)} GB` : `${cliente.megasHoje} MB`;
                        resposta += `${index + 1}¬∫ ${cliente.numero} - ${megasFormatados} (${cliente.comprasHoje}x)\n`;
                    });
                }
                
                await message.reply(resposta);
                return;
            }
            
            
            if (comando.startsWith('.comprador ')) {
                if (!sistemaCompras) {
                    await message.reply('‚ùå Sistema de compras n√£o est√° ativo!');
                    return;
                }
                
                const numero = comando.replace('.comprador ', '').trim();
                
                if (!/^\d{9}$/.test(numero)) {
                    await message.reply('‚ùå Use: *.comprador 849123456*');
                    return;
                }
                
                const cliente = sistemaCompras.historicoCompradores[numero];
                
                if (!cliente) {
                    await message.reply(`‚ùå Cliente *${numero}* n√£o encontrado no sistema de compras.`);
                    return;
                }
                
                const posicao = await sistemaCompras.obterPosicaoCliente(numero);
                const megasHojeFormatados = cliente.megasHoje >= 1024 ? `${(cliente.megasHoje/1024).toFixed(1)} GB` : `${cliente.megasHoje} MB`;
                const megasTotalFormatados = cliente.megasTotal >= 1024 ? `${(cliente.megasTotal/1024).toFixed(1)} GB` : `${cliente.megasTotal} MB`;
                
                let resposta = `üë§ *PERFIL DO COMPRADOR*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                resposta += `üì± **N√∫mero:** ${numero}\n`;
                resposta += `üèÜ **Posi√ß√£o hoje:** ${posicao.posicao}¬∫ lugar\n`;
                resposta += `üìä **Hoje:** ${megasHojeFormatados} (${cliente.comprasHoje} compras)\n`;
                resposta += `üíé **Total geral:** ${megasTotalFormatados} (${cliente.totalCompras} compras)\n`;
                resposta += `üìÖ **Primeira compra:** ${new Date(cliente.primeiraCompra).toLocaleDateString('pt-BR')}\n`;
                resposta += `‚è∞ **√öltima compra:** ${new Date(cliente.ultimaCompra).toLocaleDateString('pt-BR')}\n`;
                
                await message.reply(resposta);
                return;
            }

            // === NOVOS COMANDOS PARA DETEC√á√ÉO DE GRUPOS ===
            if (comando === '.grupos') {
                try {
                    let resposta = `üìã *GRUPOS DETECTADOS*\n‚ö† NB: V√°lido apenas para Vodacom‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                    
                    const chats = await client.getChats();
                    const grupos = chats.filter(chat => chat.isGroup);
                    
                    resposta += `üìä Total de grupos: ${grupos.length}\n\n`;
                    
                    for (const grupo of grupos) {
                        const isMonitorado = CONFIGURACAO_GRUPOS.hasOwnProperty(grupo.id._serialized);
                        const status = isMonitorado ? '‚úÖ' : '‚ùå';
                        
                        resposta += `${status} *${grupo.name}*\n`;
                        resposta += `   üÜî \`${grupo.id._serialized}\`\n`;
                        resposta += `   üë• ${grupo.participants.length} membros\n\n`;
                    }
                    
                    resposta += `\nüîß *Para adicionar grupo:*\nCopie ID e adicione em CONFIGURACAO_GRUPOS`;
                    
                    await message.reply(resposta);
                    
                    console.log(`\nüìã COMANDO .grupos executado - ${grupos.length} grupos encontrados`);
                    grupos.forEach(grupo => {
                        const isMonitorado = CONFIGURACAO_GRUPOS.hasOwnProperty(grupo.id._serialized);
                        console.log(`${isMonitorado ? '‚úÖ' : '‚ùå'} ${grupo.name}: ${grupo.id._serialized}`);
                    });
                    
                } catch (error) {
                    console.error('‚ùå Erro ao listar grupos:', error);
                    await message.reply('‚ùå Erro ao obter lista de grupos');
                }
                return;
            }

            if (comando === '.grupo_atual') {
                if (!message.from.endsWith('@g.us')) {
                    await message.reply('‚ùå Use este comando em um grupo!');
                    return;
                }
                
                await logGrupoInfo(message.from, 'COMANDO .grupo_atual');
                
                const configGrupo = getConfiguracaoGrupo(message.from);
                const status = configGrupo ? '‚úÖ CONFIGURADO' : '‚ùå N√ÉO CONFIGURADO';
                
                await message.reply(
                    `üìã *INFORMA√á√ïES DESTE GRUPO*\n\n` +
                    `üÜî ID: \`${message.from}\`\n` +
                    `üìä Status: ${status}\n\n` +
                    `${configGrupo ? `üè¢ Nome: ${configGrupo.nome}` : 'üîß Precisa ser configurado'}\n\n` +
                    `üìù Verifique o console para detalhes completos`
                );
                return;
            }
        }

        // === FUN√á√ÉO PARA DETECTAR INTEN√á√ÉO DE .MEUCODIGO ===
        async function detectarIntencaoMeuCodigo(texto) {
            // Primeiro, verifica√ß√£o b√°sica por padr√µes (sem IA - economia)
            const textoLimpo = texto.toLowerCase().trim();

            // Padr√µes mais comuns (com e sem espa√ßos)
            const padroesDiretos = [
                // Vers√µes sem espa√ßo
                'meucodigo',
                'meuc√≥digo',
                '.meucodigo',
                '.meuc√≥digo',

                // Vers√µes com espa√ßo
                'meu codigo',
                'meu c√≥digo',
                '.meu codigo',
                '.meu c√≥digo',

                // Outras varia√ß√µes
                'meu codigo de referencia',
                'meu c√≥digo de refer√™ncia',
                'ver meu codigo',
                'ver meu c√≥digo',
                'qual meu codigo',
                'qual meu c√≥digo',
                'qual o meu codigo',
                'qual o meu c√≥digo',
                'como ver meu codigo',
                'como ver meu c√≥digo',
                'minha referencia',
                'minha refer√™ncia',
                'codigo meu',
                'c√≥digo meu',
                'codigo pessoal',
                'c√≥digo pessoal',
                'meu referencia',
                'meu refer√™ncia'
            ];

            // Verifica√ß√£o direta (mais r√°pido)
            for (const padrao of padroesDiretos) {
                if (textoLimpo.includes(padrao)) {
                    console.log(`üéØ DETECTADO: "${texto}" ‚Üí padr√£o "${padrao}"`);
                    return true;
                }
            }

            // Se n√£o encontrou padr√£o direto, usar IA apenas em casos espec√≠ficos
            if (texto.includes('codigo') || texto.includes('c√≥digo') ||
                texto.includes('referencia') || texto.includes('refer√™ncia') ||
                texto.includes('meu') || texto.includes('ver')) {

                try {
                    // Usar IA apenas quando necess√°rio (economia de tokens)
                    const prompt = `Responda apenas SIM ou N√ÉO. O usu√°rio quer ver/gerar seu c√≥digo de refer√™ncia?
Texto: "${texto}"

Contexto: comando normal √© ".meucodigo" mas aceitar varia√ß√µes como "meu codigo", ".meu codigo", "ver meu c√≥digo", etc.`;

                    const resposta = await ia.obterResposta(prompt, { maxTokens: 10 });
                    const resultado = resposta.toLowerCase().includes('sim');

                    if (resultado) {
                        console.log(`üß† IA DETECTOU: "${texto}" ‚Üí comando meucodigo`);
                    }

                    return resultado;
                } catch (error) {
                    console.error('‚ùå Erro na detec√ß√£o IA:', error);
                    return false;
                }
            }

            return false;
        }

        // === FUN√á√ÉO PARA DETECTAR INTEN√á√ÉO DE COMPRA ===
        async function detectarIntencaoCompra(texto) {
            // Verifica√ß√£o b√°sica por padr√µes (sem IA - economia m√°xima)
            const textoLimpo = texto.toLowerCase().trim();

            // Excluir comandos espec√≠ficos conhecidos
            const comandosExcluir = [
                'tabela',
                'pagamento',
                '.ranking',
                '.meucodigo',
                '.convite',
                '.cancelar',
                '.debug',
                '.ia',
                '.retry'
            ];

            // Se a mensagem √© exatamente um comando, n√£o detectar como inten√ß√£o de compra
            for (const comando of comandosExcluir) {
                if (textoLimpo === comando || textoLimpo.startsWith(comando + ' ')) {
                    return false;
                }
            }

            // Padr√µes diretos de inten√ß√£o de compra (EXPANDIDOS)
            const padroesCompra = [
                // Palavras simples e diretas
                'posso',
                'quero',
                'preciso',
                'vou',
                'vendo',
                'compro',
                'pago',
                'transferi',
                'enviei',
                'mandei',
                'fiz',

                // Frases sobre pagamento
                'posso pagar',
                'pode pagar',
                'posso comprar',
                'pode comprar',
                'quero comprar',
                'quero pagar',
                'preciso pagar',
                'vou pagar',
                'vou comprar',
                'como pagar',
                'como comprar',
                'onde pagar',
                'posso fazer',
                'como fa√ßo',

                // Frases sobre disponibilidade
                'tem megas',
                'tem mega',
                'tem internet',
                'tem saldo',
                'tem dados',
                'tem pacote',
                'tem pacotes',
                'tem wifi',
                'tem net',
                'quero megas',
                'quero mega',
                'quero internet',
                'quero dados',
                'quero net',
                'preciso de megas',
                'preciso de mega',
                'preciso de internet',
                'preciso de dados',
                'preciso de net',

                // Sobre admins/atendimento
                'admin disponivel',
                'admin dispon√≠vel',
                'adm disponivel',
                'adm dispon√≠vel',
                'tem alguem',
                'tem algu√©m',
                'algu√©m a√≠',
                'alguem ai',
                'tem admin',
                'tem adm',
                'pode atender',
                'algu√©m pode',
                'alguem pode',
                'quem pode',
                'dispon√≠vel',
                'disponivel',
                'atende',
                'atendimento',

                // Perguntas diretas por admin (muito comuns)
                'adm?',
                'admin?',
                'adm ?',
                'admin ?',
                'tem adm?',
                'tem admin?',
                'cad√™ admin',
                'cad√™ adm',
                'onde admin',
                'onde adm',
                'admin a√≠',
                'adm a√≠',
                'admin ai',
                'adm ai',

                // Sobre pre√ßos
                'quanto custa',
                'qual pre√ßo',
                'qual o pre√ßo',
                'pre√ßo',
                'quanto √©',
                'quanto fica',
                'valor',
                'custo',
                'custa',
                'quanto vale',
                'qual valor',

                // Formas de pagamento
                'formas de pagamento',
                'forma de pagamento',
                'como pago',
                'aceita',
                'recebe',
                'mpesa',
                'emola',
                'mkesh',
                'transfer√™ncia',
                'transferencia',
                'cart√£o',
                'cartao',
                'dinheiro',

                // Sauda√ß√µes com inten√ß√£o
                'boa tarde',
                'bom dia',
                'boa noite',
                'ol√°',
                'ola',
                'oi',
                'hey',
                'ei',
                'salve',

                // Express√µes casuais
                'e a√≠',
                'e ai',
                'beleza',
                'tudo bem',
                'como est√°',
                'como esta',
                't√° a√≠',
                'ta ai',
                'est√° a√≠',
                'esta ai'
            ];

            // Verifica√ß√£o direta (mais r√°pido, sem IA)
            for (const padrao of padroesCompra) {
                if (textoLimpo.includes(padrao)) {
                    console.log(`üõí COMPRA DETECTADA: "${texto}" ‚Üí padr√£o "${padrao}"`);
                    return true;
                }
            }

            // Verifica√ß√£o adicional para palavras muito simples (apenas se mensagem for curta)
            if (textoLimpo.length <= 20) {
                const palavrasSimples = ['megas', 'mega', 'internet', 'dados', 'net', 'wifi', 'saldo'];
                for (const palavra of palavrasSimples) {
                    if (textoLimpo === palavra) {
                        console.log(`üõí PALAVRA SIMPLES DETECTADA: "${texto}" ‚Üí "${palavra}"`);
                        return true;
                    }
                }
            }

            return false; // Sem usar IA para economia m√°xima
        }

        // === DETEC√á√ÉO INTELIGENTE DE .MEUCODIGO (QUALQUER FORMATO) ===
        if (message.type === 'chat' && await detectarIntencaoMeuCodigo(message.body)) {
            const remetente = message.author || message.from;
            let codigo = null;

            // Verificar se j√° tem c√≥digo
            for (const [cod, dados] of Object.entries(codigosReferencia)) {
                if (dados.dono === remetente) {
                    codigo = cod;
                    break;
                }
            }

            // Se n√£o tem, criar novo
            if (!codigo) {
                codigo = gerarCodigoReferencia(remetente);
                codigosReferencia[codigo] = {
                    dono: remetente,
                    nome: message._data.notifyName || 'N/A',
                    criado: new Date().toISOString(),
                    ativo: true
                };
                // Sistema de cache otimizado - sem salvamento em arquivos
            }

            await message.reply(
                `üéÅ *SEU C√ìDIGO DE REFER√äNCIA*\n\n` +
                `üìã C√≥digo: *${codigo}*\n\n` +
                `üéØ *Como usar:*\n` +
                `1. Convide amigos para o grupo\n` +
                `2. Pe√ßa para eles digitarem:\n` +
                `   *.convite ${codigo}*\n\n` +
                `üí∞ *Ganhe 200MB* a cada compra deles!\n` +
                `üéâ *Primeiras 5 compras* = 1GB cada\n\n` +
                `üöÄ Sem limite de amigos que pode convidar!`
            );
            console.log(`üéÅ C√≥digo de refer√™ncia enviado: ${codigo} para ${remetente}`);
            return;
        }

        // === COMANDOS DE REFER√äNCIA E B√îNUS (TODOS USU√ÅRIOS) ===
        if (message.type === 'chat' && message.body.startsWith('.')) {
            const comando = message.body.toLowerCase().trim();
            const remetente = message.author || message.from;

            // === OUTROS COMANDOS COM PONTO ===

            // .convite CODIGO - Registrar refer√™ncia
            if (comando.startsWith('.convite ')) {
                const codigo = comando.split(' ')[1]?.toUpperCase();
                
                if (!codigo) {
                    await message.reply('‚ùå Use: *.convite CODIGO*\nExemplo: *.convite AB12CD*');
                    return;
                }
                
                // Verificar se c√≥digo existe
                if (!codigosReferencia[codigo]) {
                    await message.reply(`‚ùå C√≥digo *${codigo}* n√£o encontrado!\n\nüí° Pe√ßa para quem te convidou verificar o c√≥digo com *.meucodigo*`);
                    return;
                }
                
                // Verificar se j√° tem refer√™ncia
                if (referenciasClientes[remetente]) {
                    await message.reply(`‚ö†Ô∏è Voc√™ j√° foi convidado por algu√©m!\n\nN√£o √© poss√≠vel usar outro c√≥digo de refer√™ncia.`);
                    return;
                }
                
                // Verificar se n√£o est√° tentando usar pr√≥prio c√≥digo
                if (codigosReferencia[codigo].dono === remetente) {
                    await message.reply('‚ùå N√£o podes usar teu pr√≥prio c√≥digo de refer√™ncia! üòÖ');
                    return;
                }

                // NOVA VALIDA√á√ÉO: Verificar se √© eleg√≠vel (entrou nos √∫ltimos 5 dias)
                if (!isElegivelParaCodigo(remetente, message.from)) {
                    await message.reply(
                        `‚è≥ *C√ìDIGO EXPIRADO PARA SEU PERFIL*\n\n` +
                        `‚ùå C√≥digos de refer√™ncia s√≥ funcionam para membros que entraram no grupo nos √∫ltimos 5 dias.\n\n` +
                        `ü§î *Por que isso acontece?*\n` +
                        `‚Ä¢ Sistema anti-abuse\n` +
                        `‚Ä¢ Incentiva convites genu√≠nos\n` +
                        `‚Ä¢ Protege economia do grupo\n\n` +
                        `üí° *Solu√ß√£o:* Voc√™ ainda pode gerar seu pr√≥prio c√≥digo com *.meucodigo* e convidar outros!`
                    );
                    return;
                }
                
                // Registrar refer√™ncia
                referenciasClientes[remetente] = {
                    convidadoPor: codigosReferencia[codigo].dono,
                    codigo: codigo,
                    dataRegistro: new Date().toISOString(),
                    comprasRealizadas: 0
                };
                
                // Sistema de cache otimizado - sem salvamento em arquivos
                
                const convidadorId = codigosReferencia[codigo].dono;
                const nomeConvidador = codigosReferencia[codigo].nome;
                
                await client.sendMessage(message.from, 
                    `‚úÖ *C√ìDIGO APLICADO COM SUCESSO!*\n\n` +
                    `üéâ @${convidadorId.replace('@c.us', '')} te convidou - registrado!\n\n` +
                    `üíé *Benef√≠cios:*\n` +
                    `‚Ä¢ Nas tuas pr√≥ximas 5 compras, @${convidadorId.replace('@c.us', '')} ganha 200MB cada\n` +
                    `‚Ä¢ Tu recebes teus megas normalmente\n` +
                    `‚Ä¢ Ajudas um amigo a ganhar b√¥nus!\n\n` +
                    `üöÄ *Pr√≥ximo passo:* Faz tua primeira compra!`, {
                    mentions: [convidadorId]
                });
                return;
            }

            // .bonus - Ver saldo de b√¥nus
            if (comando === '.bonus' || comando === '.saldo') {
                const saldo = bonusSaldos[remetente];
                
                if (!saldo || saldo.saldo === 0) {
                    await message.reply(
                        `üí∞ *TEU SALDO DE B√îNUS*\n\n` +
                        `üéÅ Total acumulado: *0MB*\n` +
                        `üìä Refer√™ncias ativas: *0 pessoas*\n\n` +
                        `üöÄ *Como ganhar b√¥nus:*\n` +
                        `1. Gera teu c√≥digo com *.meucodigo*\n` +
                        `2. Convida amigos para o grupo\n` +
                        `3. Eles usam *.convite TEUCODIGO*\n` +
                        `4. A cada compra deles, ganhas 200MB\n` +
                        `5. Com 1GB+ podes sacar com *.sacar*`
                    );
                    return;
                }
                
                const saldoGB = (saldo.saldo / 1024).toFixed(2);
                const podeSacar = saldo.saldo >= 1024;
                const referenciasAtivas = Object.keys(saldo.detalhesReferencias || {}).length;
                
                let detalhes = '';
                if (saldo.detalhesReferencias) {
                    Object.entries(saldo.detalhesReferencias).forEach(([cliente, dados]) => {
                        const nome = dados.nome || 'Cliente';
                        detalhes += `‚Ä¢ ${nome}: ${dados.compras}/5 compras (${dados.bonusGanho}MB ganhos)\n`;
                    });
                }
                
                await message.reply(
                    `üí∞ *TEU SALDO DE B√îNUS*\n\n` +
                    `üéÅ Total acumulado: *${saldo.saldo}MB* (${saldoGB}GB)\n` +
                    `üìä Refer√™ncias ativas: *${referenciasAtivas} pessoas*\n` +
                    `üí° M√≠nimo para saque: 1GB (1024MB)\n\n` +
                    `${detalhes ? `üë• *Detalhes das refer√™ncias:*\n${detalhes}\n` : ''}` +
                    `${podeSacar ? 'üöÄ *Pronto para sacar!*\nUse: *.sacar 1GB 845123456*' : '‚è≥ Incentiva teus convidados a comprar!'}`
                );
                return;
            }

            // .sacar QUANTIDADE NUMERO - Solicitar saque
            if (comando.startsWith('.sacar ')) {
                const partes = comando.split(' ');
                if (partes.length < 3) {
                    await message.reply(
                        `‚ùå *FORMATO INCORRETO*\n\n` +
                        `‚úÖ Use: *.sacar QUANTIDADE NUMERO*\n\n` +
                        `üìã *Exemplos:*\n` +
                        `‚Ä¢ *.sacar 1GB 845123456*\n` +
                        `‚Ä¢ *.sacar 2048MB 847654321*\n` +
                        `‚Ä¢ *.sacar 1.5GB 843210987*`
                    );
                    return;
                }
                
                const quantidadeStr = partes[1].toUpperCase();
                const numeroDestino = partes[2];
                
                // Validar n√∫mero
                if (!/^8[0-9]{8}$/.test(numeroDestino)) {
                    await message.reply(`‚ùå N√∫mero inv√°lido: *${numeroDestino}*\n\n‚úÖ Use formato: 8XXXXXXXX`);
                    return;
                }
                
                // Converter quantidade para MB
                let quantidadeMB = 0;
                if (quantidadeStr.endsWith('GB')) {
                    const gb = parseFloat(quantidadeStr.replace('GB', ''));
                    quantidadeMB = gb * 1024;
                } else if (quantidadeStr.endsWith('MB')) {
                    quantidadeMB = parseInt(quantidadeStr.replace('MB', ''));
                } else {
                    await message.reply(`‚ùå Formato inv√°lido: *${quantidadeStr}*\n\n‚úÖ Use: 1GB, 1.5GB, 1024MB, etc.`);
                    return;
                }
                
                // Verificar saldo
                const saldo = bonusSaldos[remetente];
                if (!saldo || saldo.saldo < quantidadeMB) {
                    const saldoAtual = saldo ? saldo.saldo : 0;
                    await message.reply(
                        `‚ùå *SALDO INSUFICIENTE*\n\n` +
                        `üí∞ Teu saldo: ${saldoAtual}MB\n` +
                        `üéØ Solicitado: ${quantidadeMB}MB\n\n` +
                        `üí° Precisas de mais ${quantidadeMB - saldoAtual}MB\n` +
                        `üöÄ Convida mais amigos para ganhar b√¥nus!`
                    );
                    return;
                }
                
                // Verificar m√≠nimo
                if (quantidadeMB < 1024) {
                    await message.reply(`‚ùå Valor m√≠nimo para saque: *1GB (1024MB)*\n\nüéØ Solicitado: ${quantidadeMB}MB`);
                    return;
                }
                
                // Gerar refer√™ncia do pedido
                const agora = new Date();
                const referenciaSaque = `SAQ${agora.getFullYear().toString().slice(-2)}${String(agora.getMonth() + 1).padStart(2, '0')}${String(agora.getDate()).padStart(2, '0')}${String(Object.keys(pedidosSaque).length + 1).padStart(3, '0')}`;
                
                // Criar pedido
                const pedido = {
                    referencia: referenciaSaque,
                    cliente: remetente,
                    nomeCliente: message._data.notifyName || 'N/A',
                    quantidade: quantidadeMB,
                    numeroDestino: numeroDestino,
                    dataSolicitacao: agora.toISOString(),
                    status: 'pendente',
                    grupo: message.from
                };
                
                // Salvar pedido
                pedidosSaque[referenciaSaque] = pedido;
                
                // Debitar do saldo
                bonusSaldos[remetente].saldo -= quantidadeMB;
                bonusSaldos[remetente].historicoSaques = bonusSaldos[remetente].historicoSaques || [];
                bonusSaldos[remetente].historicoSaques.push({
                    referencia: referenciaSaque,
                    quantidade: quantidadeMB,
                    data: agora.toISOString()
                });
                
                // Sistema de cache otimizado - sem salvamento em arquivos
                
                // Enviar para Tasker
                try {
                    await enviarParaTasker(referenciaSaque, quantidadeMB, numeroDestino, message.from, `SAQUE_BONUS_${message._data.notifyName || 'Cliente'}`);
                } catch (error) {
                    console.error('‚ùå Erro ao enviar saque para Tasker:', error);
                }
                
                const quantidadeFormatada = quantidadeMB >= 1024 ? `${(quantidadeMB/1024).toFixed(2)}GB` : `${quantidadeMB}MB`;
                const novoSaldo = bonusSaldos[remetente].saldo;
                
                await message.reply(
                    `‚úÖ *SOLICITA√á√ÉO DE SAQUE CRIADA*\n\n` +
                    `üë§ Cliente: ${message._data.notifyName || 'N/A'}\n` +
                    `üì± N√∫mero: ${numeroDestino}\n` +
                    `üíé Quantidade: ${quantidadeFormatada}\n` +
                    `üîñ Refer√™ncia: *${referenciaSaque}*\n` +
                    `‚è∞ Processamento: at√© 24h\n\n` +
                    `üí∞ *Novo saldo:* ${novoSaldo}MB\n\n` +
                    `‚úÖ Pedido enviado para processamento!\n` +
                    `üéâ Obrigado por usar nosso sistema de refer√™ncias!`
                );
                return;
            }
        }

        // === DETEC√á√ÉO DE GRUPOS N√ÉO CONFIGURADOS ===
        if (message.from.endsWith('@g.us') && !isGrupoMonitorado(message.from) && !message.fromMe) {
            if (!gruposLogados.has(message.from)) {
                await logGrupoInfo(message.from, 'MENSAGEM RECEBIDA');
                gruposLogados.add(message.from);
                
                // Limpar cache a cada 50 grupos para evitar memory leak
                if (gruposLogados.size > 50) {
                    gruposLogados.clear();
                }
            }
        }

        // === PROCESSAMENTO DE GRUPOS ===
        if (!message.from.endsWith('@g.us') || !isGrupoMonitorado(message.from)) {
            return;
        }

        const configGrupo = getConfiguracaoGrupo(message.from);
        if (!configGrupo || message.fromMe) {
            return;
        }

        // === DETEC√á√ÉO DE NOVOS MEMBROS (ALTERNATIVO) ===
        await detectarNovoMembro(message.from, autorMensagem, configGrupo);

        // === MODERA√á√ÉO ===
        if (message.type === 'chat') {
            // Verificar se √© um comando administrativo antes da modera√ß√£o
            const isComandoAdmin = message.body.startsWith('.') && (
                message.body.startsWith('.addcomando ') ||
                message.body.startsWith('.delcomando ') ||
                message.body.startsWith('.comandos') ||
                message.body.startsWith('.ia') ||
                message.body.startsWith('.stats') ||
                message.body.startsWith('.sheets') ||
                message.body.startsWith('.test_') ||
                message.body.startsWith('.grupos') ||
                message.body.startsWith('.clear_') ||
                message.body.startsWith('.ranking') ||
                message.body.startsWith('.inativos') ||
                message.body.startsWith('.semcompra') ||
                message.body.startsWith('.resetranking')
            );

            // Verificar se √© admin executando comando
            const autorModeracaoMsg = message.author || message.from;
            const isAdminExecutando = await isAdminGrupo(message.from, autorModeracaoMsg) || isAdministrador(autorModeracaoMsg);

            // Pular modera√ß√£o para comandos administrativos executados por admins
            if (!isComandoAdmin || !isAdminExecutando) {
                const analise = contemConteudoSuspeito(message.body);
                
                if (analise.suspeito) {
                    console.log(`üö® Conte√∫do suspeito detectado`);
                    await aplicarModeracao(message, "Link detectado");
                    return;
                }
            }
        }

        // === PROCESSAMENTO DE IMAGENS DESATIVADO ===
        if (message.type === 'image') {
            console.log(`üì∏ Imagem recebida - Processamento desativado`);

            await message.reply(
                '‚ùå Processamento de imagens desativado\n' +
                'üìÑ Solicitamos que o comprovante seja enviado em formato de texto.\n\n' +
                '‚ÑπÔ∏è Esta medida foi adotada para garantir que o sistema funcione de forma mais r√°pida, est√°vel e com menos falhas.'
            );
            return;
        }

        if (message.type !== 'chat') {
            return;
        }

        // Comandos de tabela e pagamento
        if (/tabela/i.test(message.body)) {
            await safeReply(message, client, configGrupo.tabela);
            return;
        }

        if (/pagamento/i.test(message.body)) {
            await safeReply(message, client, configGrupo.pagamento);
            return;
        }

        // === DETEC√á√ÉO DE PERGUNTA POR N√öMERO (N√ÉO-ADMIN) ===
        if (!isAdmin && detectarPerguntaPorNumero(message.body)) {
            console.log(`üì± Pergunta por n√∫mero detectada de n√£o-admin`);
            await message.reply(
                `üì± *Para solicitar n√∫mero ou suporte:*\n\n` +
                `üí≥ *Primeiro fa√ßa o pagamento:*\n\n` +
                `${configGrupo.pagamento}\n\n` +
                `üìù *Depois envie:*\n` +
                `‚Ä¢ Comprovante de pagamento\n` +
                `‚Ä¢ N√∫mero que vai receber os megas\n\n` +
                `ü§ñ *Sistema autom√°tico 24/7!*`
            );
            return;
        }

        // === VERIFICAR COMANDOS CUSTOMIZADOS ===
        const textoMensagem = message.body.trim().toLowerCase();
        const respostaComando = executarComandoCustomizado(message.from, textoMensagem);
        
        if (respostaComando) {
            await message.reply(respostaComando);
            console.log(`üéØ Comando customizado '${textoMensagem}' executado no grupo ${message.from}`);
            return;
        }

        // === MONITORAMENTO DE CONFIRMA√á√ïES DO BOT SECUND√ÅRIO ===
        if (sistemaCompras && message.body.includes('‚úÖ') && message.body.includes('Transa√ß√£o Conclu√≠da Com Sucesso')) {
            // Extrair refer√™ncia do padr√£o: "üîñ *Refer√™ncia:* CI22H8QJSDQ"
            const regexReferencia = /üîñ\s*\*?Refer√™ncia:\*?\s*([A-Za-z0-9._-]+)/i;
            const matchReferencia = message.body.match(regexReferencia);
            
            // Extrair n√∫mero do padr√£o: "üì± *N√∫mero:* 842362318"
            const regexNumero = /üì±\s*\*?N√∫mero:\*?\s*(\d{9})/i;
            const matchNumero = message.body.match(regexNumero);
            
            if (matchReferencia && matchNumero) {
                const referenciaConfirmada = matchReferencia[1]; // Manter case original
                const numeroConfirmado = matchNumero[1];
                console.log(`üõí CONFIRMA√á√ÉO BOT: Detectada transa√ß√£o conclu√≠da - Ref: ${referenciaConfirmada} | N√∫mero: ${numeroConfirmado}`);
                console.log(`üîç CONFIRMA√á√ÉO BOT: Tipo detectado: ${/emola|e-mola/i.test(message.body) ? 'EMOLA' : /mpesa|m-pesa/i.test(message.body) ? 'MPESA' : 'DESCONHECIDO'}`);
                
                // Processar confirma√ß√£o
                const resultadoConfirmacao = await sistemaCompras.processarConfirmacao(referenciaConfirmada, numeroConfirmado);
                
                if (resultadoConfirmacao) {
                    console.log(`‚úÖ COMPRAS: Confirma√ß√£o processada - ${resultadoConfirmacao.numero} | ${resultadoConfirmacao.megas}MB`);
                    
                    // Enviar mensagem de parabeniza√ß√£o com men√ß√£o clic√°vel
                    if (resultadoConfirmacao.mensagem && resultadoConfirmacao.contactId) {
                        try {
                            // Obter nome do contato para substituir o placeholder
                            const contact = await client.getContactById(resultadoConfirmacao.contactId);
                            
                            // Prioridade: nome salvo > pushname (nome do perfil) > name > n√∫mero
                            const nomeExibicao = contact.name || contact.pushname || contact.number;
                            const numeroLimpo = contact.id.user; // N√∫mero sem @ e sem +
                            
                            // Substituir placeholder pelo n√∫mero (formato correto para men√ß√µes click√°veis)
                            const mensagemFinal = resultadoConfirmacao.mensagem.replace('@NOME_PLACEHOLDER', `@${numeroLimpo}`);
                            
                            // Enviar com men√ß√£o clic√°vel
                            await client.sendMessage(message.from, mensagemFinal, { 
                                mentions: [resultadoConfirmacao.contactId] 
                            });
                        } catch (error) {
                            console.error('‚ùå Erro ao enviar parabeniza√ß√£o com men√ß√£o:', error);
                            // Fallback: enviar sem men√ß√£o clic√°vel
                            const mensagemFallback = resultadoConfirmacao.mensagem.replace('@NOME_PLACEHOLDER', `@${resultadoConfirmacao.numeroComprador}`);
                            await message.reply(mensagemFallback);
                        }
                    }
                } else {
                    console.log(`‚ö†Ô∏è COMPRAS: Confirma√ß√£o ${referenciaConfirmada} n√£o encontrada ou j√° processada`);
                }
                return;
            }
        }

        // === PROCESSAMENTO COM IA (L√ìGICA SIMPLES IGUAL AO BOT ATACADO) ===
        const remetente = message.author || message.from;
        const resultadoIA = await ia.processarMensagemBot(message.body, remetente, 'texto', configGrupo);
        
        if (resultadoIA.erro) {
            console.error(`‚ùå Erro na IA:`, resultadoIA.mensagem);
            return;
        }

        if (resultadoIA.sucesso) {
            
            if (resultadoIA.tipo === 'comprovante_recebido' || resultadoIA.tipo === 'comprovante_imagem_recebido') {
                const metodoInfo = resultadoIA.metodo ? ` (${resultadoIA.metodo})` : '';
                await message.reply(
                    `‚úÖ *Comprovante processado${metodoInfo}!*\n\n` +
                    `üí∞ Refer√™ncia: ${resultadoIA.referencia}\n` +
                    `üìä Megas: ${resultadoIA.megas}\n\n` +
                    `üì± *Envie UM n√∫mero que vai receber ${resultadoIA.megas}!*`
                );
                return;
                
            } else if (resultadoIA.tipo === 'numero_processado_com_aviso') {
                const dadosCompletos = resultadoIA.dadosCompletos;
                const [referencia, megas, numero] = dadosCompletos.split('|');
                const nomeContato = message._data.notifyName || 'N/A';
                const autorMensagem = message.author || 'Desconhecido';

                // === VERIFICA√á√ÉO DE VALOR MUITO BAIXO ===
                if (megas === 'VALOR_MUITO_BAIXO') {
                    console.log(`‚ùå VALOR MUITO BAIXO: ${referencia} - valor abaixo do pacote m√≠nimo`);

                    const configGrupo = getConfiguracaoGrupo(message.from);
                    const precos = ia.extrairPrecosTabela(configGrupo.tabela);
                    const menorPreco = Math.min(...precos.map(p => p.preco));

                    await message.reply(
                        `‚ùå *Valor muito baixo*\n\n` +
                        `üí≥ O valor transferido est√° abaixo do pacote m√≠nimo dispon√≠vel.\n\n` +
                        `üìã *Pacote mais barato:* ${menorPreco}MT\n\n` +
                        `üí° *Para ver todos os pacotes:* digite "tabela"`
                    );
                    return;
                }

                // PROCESSAR B√îNUS DE REFER√äNCIA
                const bonusInfo = await processarBonusCompra(remetente, megas);

                // VERIFICAR PAGAMENTO ANTES DE ENVIAR PARA PLANILHA
                // Usar o valor real do comprovante (n√£o o valor calculado dos megas)
                const valorComprovante = resultadoIA.valorComprovante || megas;
                const pagamentoConfirmado = await verificarPagamentoIndividual(referencia, valorComprovante);

                if (!pagamentoConfirmado) {
                    console.log(`‚ùå REVENDEDORES: Pagamento n√£o confirmado para texto - ${referencia} (${valorComprovante}MT)`);

                    // Adicionar √† fila de retry silencioso
                    await adicionarPagamentoPendente(referencia, valorComprovante, dadosCompletos, message, resultadoIA);

                    await message.reply(
                        `‚è≥ *AGUARDANDO MENSAGEM DE CONFIRMA√á√ÉO*\n\n` +
                        `üí∞ Refer√™ncia: ${referencia}\n` +
                        `üìä Megas: ${megas} MB\n` +
                        `üì± N√∫mero: ${numero}\n` +
                        `üí≥ Valor: ${valorComprovante}MT\n\n` +
                        `üì® A mensagem de confirma√ß√£o ainda n√£o foi recebida no sistema.\n` +
                        `üîÑ Verifica√ß√£o autom√°tica ativa - voc√™ ser√° notificado quando confirmado!\n` +
                        `‚è∞ ${new Date().toLocaleString('pt-BR')}`
                    );
                    return;
                }

                console.log(`‚úÖ REVENDEDORES: Pagamento confirmado para texto! Processando...`);

                const resultadoEnvio = await enviarParaTasker(referencia, megas, numero, message.from, autorMensagem);

                // Verificar se √© pedido duplicado
                if (resultadoEnvio && resultadoEnvio.duplicado) {
                    const statusTexto = resultadoEnvio.status_existente === 'PROCESSADO' ? 'j√° foi processado' : 'est√° pendente na fila';
                    await message.reply(
                        `‚ö†Ô∏è *PEDIDO DUPLICADO DETECTADO*\n\n` +
                        `üí∞ Refer√™ncia: ${referencia}\n` +
                        `üìä Megas: ${megas} MB\n` +
                        `üì± N√∫mero: ${numero}\n\n` +
                        `‚ùå Este pedido ${statusTexto}.\n` +
                        `üìù Status: ${resultadoEnvio.status_existente}\n\n` +
                        `‚è∞ ${new Date().toLocaleString('pt-BR')}`
                    );
                    return;
                }

                await registrarComprador(message.from, numero, nomeContato, megas);
                
                if (message.from === ENCAMINHAMENTO_CONFIG.grupoOrigem) {
                    const timestampMensagem = new Date().toLocaleString('pt-BR');
                    adicionarNaFila(dadosCompletos, autorMensagem, configGrupo.nome, timestampMensagem);
                }
                
                // Enviar mensagem normal + aviso da tabela
                await message.reply(
                    `‚úÖ *Pedido Recebido!*\n\n` +
                    `üí∞ Refer√™ncia: ${referencia}\n` +
                    `üìä Megas: ${megas} MB\n` +
                    `üì± N√∫mero: ${numero}\n\n` +
                    `${resultadoIA.avisoTabela}`
                );
                return;
                
            } else if (resultadoIA.tipo === 'numero_processado') {
                const dadosCompletos = resultadoIA.dadosCompletos;
                const [referencia, megas, numero] = dadosCompletos.split('|');
                const nomeContato = message._data.notifyName || 'N/A';
                const autorMensagem = message.author || 'Desconhecido';

                // === VERIFICA√á√ÉO DE VALOR MUITO BAIXO ===
                if (megas === 'VALOR_MUITO_BAIXO') {
                    console.log(`‚ùå VALOR MUITO BAIXO: ${referencia} - valor abaixo do pacote m√≠nimo`);

                    const configGrupo = getConfiguracaoGrupo(message.from);
                    const precos = ia.extrairPrecosTabela(configGrupo.tabela);
                    const menorPreco = Math.min(...precos.map(p => p.preco));

                    await message.reply(
                        `‚ùå *Valor muito baixo*\n\n` +
                        `üí≥ O valor transferido est√° abaixo do pacote m√≠nimo dispon√≠vel.\n\n` +
                        `üìã *Pacote mais barato:* ${menorPreco}MT\n\n` +
                        `üí° *Para ver todos os pacotes:* digite "tabela"`
                    );
                    return;
                }

                // PROCESSAR B√îNUS DE REFER√äNCIA
                const bonusInfo = await processarBonusCompra(remetente, megas);

                // VERIFICAR PAGAMENTO ANTES DE ENVIAR PARA PLANILHA
                // Usar o valor real do comprovante (n√£o o valor calculado dos megas)
                const valorComprovante = resultadoIA.valorComprovante || megas;
                const pagamentoConfirmado = await verificarPagamentoIndividual(referencia, valorComprovante);

                if (!pagamentoConfirmado) {
                    console.log(`‚ùå REVENDEDORES: Pagamento n√£o confirmado para texto - ${referencia} (${valorComprovante}MT)`);

                    // Adicionar √† fila de retry silencioso
                    await adicionarPagamentoPendente(referencia, valorComprovante, dadosCompletos, message, resultadoIA);

                    await message.reply(
                        `‚è≥ *AGUARDANDO MENSAGEM DE CONFIRMA√á√ÉO*\n\n` +
                        `üí∞ Refer√™ncia: ${referencia}\n` +
                        `üìä Megas: ${megas} MB\n` +
                        `üì± N√∫mero: ${numero}\n` +
                        `üí≥ Valor: ${valorComprovante}MT\n\n` +
                        `üì® A mensagem de confirma√ß√£o ainda n√£o foi recebida no sistema.\n` +
                        `üîÑ Verifica√ß√£o autom√°tica ativa - voc√™ ser√° notificado quando confirmado!\n` +
                        `‚è∞ ${new Date().toLocaleString('pt-BR')}`
                    );
                    return;
                }

                console.log(`‚úÖ REVENDEDORES: Pagamento confirmado para texto! Processando...`);

                const resultadoEnvio = await enviarParaTasker(referencia, megas, numero, message.from, autorMensagem);

                // Verificar se √© pedido duplicado
                if (resultadoEnvio && resultadoEnvio.duplicado) {
                    const statusTexto = resultadoEnvio.status_existente === 'PROCESSADO' ? 'j√° foi processado' : 'est√° pendente na fila';
                    await message.reply(
                        `‚ö†Ô∏è *PEDIDO DUPLICADO DETECTADO*\n\n` +
                        `üí∞ Refer√™ncia: ${referencia}\n` +
                        `üìä Megas: ${megas} MB\n` +
                        `üì± N√∫mero: ${numero}\n\n` +
                        `‚ùå Este pedido ${statusTexto}.\n` +
                        `üìù Status: ${resultadoEnvio.status_existente}\n\n` +
                        `‚è∞ ${new Date().toLocaleString('pt-BR')}`
                    );
                    return;
                }

                await registrarComprador(message.from, numero, nomeContato, megas);
                
                if (message.from === ENCAMINHAMENTO_CONFIG.grupoOrigem) {
                    const timestampMensagem = new Date().toLocaleString('pt-BR');
                    adicionarNaFila(dadosCompletos, autorMensagem, configGrupo.nome, timestampMensagem);
                }
                
                await message.reply(
                    `‚úÖ *Pedido Recebido!*\n\n` +
                    `üí∞ Refer√™ncia: ${referencia}\n` +
                    `üìä Megas: ${megas}\n` +
                    `üì± N√∫mero: ${numero}\n\n` +
                    `_‚è≥Processando... Aguarde enquanto o Sistema executa a transfer√™ncia_`
                );
                return;
            }
        }

        // === TRATAMENTO DE ERROS ===
        if (resultadoIA.tipo === 'numeros_sem_comprovante') {
            await message.reply(
                `üì± *N√∫mero detectado*\n\n` +
                `‚ùå N√£o encontrei seu comprovante.\n\n` +
                `üìù Envie primeiro o comprovante de pagamento.`
            );
            return;
        }

        // === DETEC√á√ÉO DE INTEN√á√ÉO DE COMPRA (√öLTIMA VERIFICA√á√ÉO) ===
        // S√≥ executa se nenhum comando espec√≠fico foi processado
        if (await detectarIntencaoCompra(message.body)) {
            console.log(`üõí Inten√ß√£o de compra detectada de ${message.author || message.from}`);
            await safeReply(message, client, 'Estou √° disposi√ß√£o, para te atender com flexibilidade.');
            return;
        }

    } catch (error) {
        console.error('‚ùå Erro ao processar mensagem:', error);
    }
});

client.on('disconnected', (reason) => {
    console.log('‚ùå Bot desconectado:', reason);
});

// Capturar erros n√£o tratados
process.on('unhandledRejection', (reason, promise) => {
    if (reason.message && reason.message.includes('Execution context was destroyed')) {
        console.log('‚ö†Ô∏è Contexto do Puppeteer reiniciado, continuando...');
    } else {
        console.error('‚ùå Promise rejeitada:', reason);
    }
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Erro n√£o capturado:', error.message);
});

// === INICIALIZA√á√ÉO ===
(async function inicializar() {
    console.log('üöÄ Iniciando bot...');
    await carregarComandosCustomizados();
    console.log('üîß Comandos carregados, inicializando cliente WhatsApp...');
    
    try {
        client.initialize();
        console.log('üì± Cliente WhatsApp inicializado, aguardando conex√£o...');
    } catch (error) {
        console.error('‚ùå Erro ao inicializar cliente:', error);
    }
})();

// Salvar hist√≥rico a cada 10 minutos (otimizado - era 5min)
setInterval(salvarHistorico, 10 * 60 * 1000);

// Limpar cache de transa√ß√µes a cada 2 horas (otimizado)
setInterval(() => {
    if (cacheTransacoes.size > 200) {
        const keys = Array.from(cacheTransacoes.keys());
        const oldKeys = keys.slice(0, keys.length - 100);
        oldKeys.forEach(key => cacheTransacoes.delete(key));
        console.log('üóëÔ∏è Cache antigo de transa√ß√µes removido');
    }
}, 2 * 60 * 60 * 1000);

// === CACHE DESNECESS√ÅRIO REMOVIDO ===
// Arquivos .json dos pacotes removidos para otimiza√ß√£o
// Dados dispon√≠veis via comandos quando necess√°rio

// Limpar cache de grupos logados a cada 4 horas (otimizado - era 2h)
setInterval(() => {
    gruposLogados.clear();
    console.log('üóëÔ∏è Cache de grupos detectados limpo');
}, 4 * 60 * 60 * 1000);

// Limpar cache de membros processados a cada 6 horas (evita crescimento infinito)
setInterval(() => {
    membrosProcessadosViaEvent.clear();
    console.log('üóëÔ∏è Cache de membros processados via event limpo');
}, 6 * 60 * 60 * 1000);

// === LIMPEZA OTIMIZADA DE CACHE WHATSAPP ===
setInterval(async () => {
    try {
        console.log('üßπ Executando limpeza de cache WhatsApp...');

        // For√ßar garbage collection se dispon√≠vel
        if (global.gc) {
            global.gc();
            console.log('üóëÔ∏è Garbage collection executado');
        }

        // Limpar cache do whatsapp-web.js (se aplic√°vel)
        if (client && client.pupPage) {
            await client.pupPage.evaluate(() => {
                // Limpar localStorage e sessionStorage
                try {
                    localStorage.clear();
                    sessionStorage.clear();
                    console.log('Cache do navegador limpo');
                } catch (e) {
                    console.log('Erro ao limpar cache do navegador:', e.message);
                }
            });
        }

        console.log('‚úÖ Limpeza de cache conclu√≠da');
    } catch (error) {
        console.error('‚ùå Erro na limpeza de cache:', error.message);
    }
}, 6 * 60 * 60 * 1000); // A cada 6 horas

// === SISTEMA DE MENSAGENS AUTOM√ÅTICAS DE INCENTIVO ===
let mensagensEnviadas = new Set(); // Cache para evitar spam
let contadorMensagensHoje = 0;
const MAX_MENSAGENS_DIA = 20; // M√°ximo 20 mensagens por dia

setInterval(async () => {
    try {
        // Resetar contador di√°rio √† meia-noite
        const agora = new Date();
        if (agora.getHours() === 0 && agora.getMinutes() === 0) {
            contadorMensagensHoje = 0;
            mensagensEnviadas.clear();
            console.log('üîÑ Contador de mensagens autom√°ticas resetado');
        }

        // Verificar limite di√°rio
        if (contadorMensagensHoje >= MAX_MENSAGENS_DIA) {
            return; // N√£o enviar mais mensagens hoje
        }

        // Verificar se cliente est√° conectado
        if (!client || !client.getState || client.getState() !== 'CONNECTED') {
            return;
        }

        // Obter todos os grupos configurados
        const grupos = Object.keys(configGrupos || {});
        if (grupos.length === 0) {
            return;
        }

        // Selecionar grupo aleat√≥rio
        const grupoId = grupos[Math.floor(Math.random() * grupos.length)];
        const configGrupo = getConfiguracaoGrupo(grupoId);

        if (!configGrupo || !configGrupo.ativo) {
            return;
        }

        // Verificar se j√° enviou mensagem neste grupo nas √∫ltimas 2 horas
        const chaveCache = `${grupoId}_${new Date().toISOString().split('T')[0]}_${Math.floor(Date.now() / (2 * 60 * 60 * 1000))}`;
        if (mensagensEnviadas.has(chaveCache)) {
            return; // J√° enviou neste grupo nas √∫ltimas 2 horas
        }

        // Verificar se √© hor√°rio comercial (8h-22h)
        const hora = agora.getHours();
        if (hora < 8 || hora > 22) {
            return; // N√£o enviar fora do hor√°rio comercial
        }

        // Mensagem de incentivo
        const mensagemIncentivo = `üíé *GANHE AT√â 5GB GRATUITOS!* üíé

üéØ *Como funciona:*
üîë 1. Gere seu c√≥digo com *.meucodigo*
üë• 2. Convide amigos para o grupo
üí∞ 3. Eles usam *.convite SEUC√ìDIGO*
üéÅ 4. Voc√™ ganha *200MB* por cada compra deles!

‚ú® *Primeiras 5 compras* de cada amigo = *1GB cada*
üöÄ *Sem limite* de amigos que pode convidar!

üì± Digite *.meucodigo* agora e comece a ganhar!

‚è∞ *Oferta limitada - aproveite!*`;

        // Enviar mensagem
        await client.sendMessage(grupoId, mensagemIncentivo);

        // Registrar envio
        mensagensEnviadas.add(chaveCache);
        contadorMensagensHoje++;

        console.log(`üì¢ Mensagem autom√°tica enviada para ${configGrupo.nome} (${contadorMensagensHoje}/${MAX_MENSAGENS_DIA} hoje)`);

    } catch (error) {
        console.error('‚ùå Erro no sistema de mensagens autom√°ticas:', error);
    }
}, 30 * 60 * 1000); // A cada 30 minutos

process.on('uncaughtException', (error) => {
    console.error('‚ùå Erro n√£o capturado:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Promise rejeitada:', reason);
});

process.on('SIGINT', async () => {
    console.log('\nüíæ Salvando dados finais...');

    try {
        // Salvar apenas dados importantes (sem arquivos desnecess√°rios)
        await Promise.allSettled([
            salvarDadosReferencia(),
            salvarHistorico()
        ]);

        console.log('‚úÖ Dados salvos com sucesso!');
    } catch (error) {
        console.error('‚ùå Erro ao salvar:', error);
    }

    console.log('üß† IA: ATIVA');
    console.log('üìä Google Sheets: CONFIGURADO');
    console.log(`üîó URL: ${GOOGLE_SHEETS_CONFIG.scriptUrl}`);
    console.log('ü§ñ Bot Retalho - Funcionamento otimizado');
    console.log(ia.getStatus());
    process.exit(0);
});










